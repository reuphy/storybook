{
    "pipes": [],
    "interfaces": [
        {
            "name": "AccordionItem",
            "id": "interface-AccordionItem-ebd3fafdd9897022596ebdfb39fc50198b6e35590a3388f55cc32d90f07d3e0eb08d7f2364dc27d66bab8033de68c202cb8ab857d3333486e526e43c9077311c",
            "file": "src/app/components/accordion/models/accordion.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AccordionItem {\r\n    title: string;\r\n    content: string;\r\n    isOpen: boolean;\r\n}",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "isOpen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DateLimits",
            "id": "interface-DateLimits-056d66dba419270ff9cc94f250dc12ee7b63cb98dcf1e72b7f416c812644642a79dd2773377a1926eabe41a5d92d7d16239c03e04bdb9f4ab189fdf446a4db2d",
            "file": "src/app/components/ng2datepickercopy/lib/common/services/utils/utils.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {ECalendarValue} from '../../types/calendar-value-enum';\nimport {SingleCalendarValue} from '../../types/single-calendar-value';\nimport {ElementRef, Injectable} from '@angular/core';\n\nimport {Dayjs, UnitType} from 'dayjs';\nimport {CalendarValue} from '../../types/calendar-value';\nimport {IDate} from '../../models/date.model';\nimport {CalendarMode} from '../../types/calendar-mode';\nimport {DateValidator} from '../../types/validator.type';\nimport {ICalendarInternal} from '../../models/calendar.model';\nimport {dayjsRef} from '../../dayjs/dayjs.ref';\n\nexport interface DateLimits {\n  minDate?: SingleCalendarValue;\n  maxDate?: SingleCalendarValue;\n  minTime?: SingleCalendarValue;\n  maxTime?: SingleCalendarValue;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UtilsService {\n  static debounce(func: Function, wait: number) {\n    let timeout: ReturnType<typeof setTimeout>;\n    return (...args: any[]) => {\n      clearTimeout(timeout);\n      timeout = setTimeout(() => {\n        func(...args);\n      }, wait);\n    };\n  }\n\n  createArray(size: number): number[] {\n    return new Array(size).fill(1);\n  }\n\n  convertToDayjs(date: SingleCalendarValue, format: string): Dayjs {\n    if (!date) {\n      return dayjsRef();\n    } else if (typeof date === 'string') {\n      return dayjsRef(date, format);\n    } else {\n      return dayjsRef(date.toDate());\n    }\n  }\n\n  isDateValid(date: string, format: string): boolean {\n    if (date === '') {\n      return true;\n    }\n\n    return dayjsRef(date, format, true).isValid();\n  }\n\n  // todo:: add unit test\n  getDefaultDisplayDate(current: Dayjs,\n                        selected: Dayjs[],\n                        allowMultiSelect: boolean,\n                        minDate: Dayjs): Dayjs {\n    if (current) {\n      return dayjsRef(current.toDate());\n    } else if (minDate && minDate.isAfter(dayjsRef())) {\n      return dayjsRef(minDate.toDate());\n    } else if (allowMultiSelect) {\n      if (selected && selected[selected.length]) {\n        return dayjsRef(selected[selected.length].toDate());\n      }\n    } else if (selected && selected[0]) {\n      return dayjsRef(selected[0].toDate());\n    }\n\n    return dayjsRef();\n  }\n\n  // todo:: add unit test\n  getInputType(value: CalendarValue, allowMultiSelect: boolean): ECalendarValue {\n    if (Array.isArray(value)) {\n      if (!value.length) {\n        return ECalendarValue.DayjsArr;\n      } else if (typeof value[0] === 'string') {\n        return ECalendarValue.StringArr;\n      } else if (dayjsRef.isDayjs(value[0])) {\n        return ECalendarValue.DayjsArr;\n      }\n    } else {\n      if (typeof value === 'string') {\n        return ECalendarValue.String;\n      } else if (dayjsRef.isDayjs(value)) {\n        return ECalendarValue.Dayjs;\n      }\n    }\n\n    return allowMultiSelect ? ECalendarValue.DayjsArr : ECalendarValue.Dayjs;\n  }\n\n  // todo:: add unit test\n  convertToDayjsArray(value: CalendarValue,\n                      config: { allowMultiSelect?: boolean, format?: string }): Dayjs[] {\n    let retVal: Dayjs[];\n    switch (this.getInputType(value, config.allowMultiSelect ?? false)) {\n      case (ECalendarValue.String):\n        retVal = value ? [dayjsRef(<string>value, config.format, true)] : [];\n        break;\n      case (ECalendarValue.StringArr):\n        retVal = (<string[]>value)\n          .map(v => v ? dayjsRef(v, config.format, true) : null)\n          .filter((d): d is Dayjs => d !== null && d !== undefined);\n        break;\n      case (ECalendarValue.Dayjs):\n        retVal = value ? [dayjsRef((<Dayjs>value).toDate())] : [];\n        break;\n      case (ECalendarValue.DayjsArr):\n        retVal = (<Dayjs[]>value || []).map(v => dayjsRef(v.toDate()));\n        break;\n      default:\n        retVal = [];\n    }\n\n    return retVal;\n  }\n\n  // todo:: add unit test\n  convertFromDayjsArray(format: string,\n                        value: Dayjs[],\n                        convertTo: ECalendarValue): CalendarValue {\n    switch (convertTo) {\n      case (ECalendarValue.String):\n        return value[0] && value[0].format(format);\n      case (ECalendarValue.StringArr):\n        return value.filter(Boolean).map(v => v.format(format));\n      case (ECalendarValue.Dayjs):\n        return value[0] ? dayjsRef(value[0].toDate()) : value[0];\n      case (ECalendarValue.DayjsArr):\n        return value ? value.map(v => dayjsRef(v.toDate())) : value;\n      default:\n        return value;\n    }\n  }\n\n  convertToString(value: CalendarValue, format: string): string {\n    let tmpVal: string[];\n\n    if (typeof value === 'string') {\n      tmpVal = [value];\n    } else if (Array.isArray(value)) {\n      if (value.length) {\n        tmpVal = (<SingleCalendarValue[]>value).map((v) => {\n          return this.convertToDayjs(v, format).format(format);\n        });\n      } else {\n        tmpVal = <string[]>value;\n      }\n    } else if (dayjsRef.isDayjs(value)) {\n      tmpVal = [value.format(format)];\n    } else {\n      return '';\n    }\n\n    return tmpVal.filter(Boolean).join(' | ');\n  }\n\n  // todo:: add unit test\n  clearUndefined<T extends { [key: string]: any }>(obj: T): T {\n    if (!obj) {\n      return obj;\n    }\n\n    Object.keys(obj).forEach((key) => (obj[key] === undefined) && delete obj[key]);\n    return obj;\n  }\n\n  updateSelected(isMultiple: boolean,\n                 currentlySelected: Dayjs[],\n                 date: IDate,\n                 granularity: UnitType = 'day'): Dayjs[] {\n    if (isMultiple) {\n      return !date.selected\n        ? currentlySelected.concat([date.date])\n        : currentlySelected.filter(d => !d.isSame(date.date, granularity));\n    } else {\n      return !date.selected ? [date.date] : [];\n    }\n  }\n\n  closestParent(element: HTMLElement, selector: string): HTMLElement | null {\n    if (!element) {\n      return null;\n    }\n    const match = <HTMLElement>element.querySelector(selector);\n    if (match) {\n      return match;\n    }\n    if (element.parentElement) {\n      return this.closestParent(element.parentElement, selector);\n    }\n    return null;\n  }\n\n  onlyTime(m: Dayjs): Dayjs {\n    return m && dayjsRef.isDayjs(m) ? dayjsRef(m.format('HH:mm:ss'), 'HH:mm:ss') : dayjsRef('00:00:00', 'HH:mm:ss');\n  }\n\n  granularityFromType(calendarType: CalendarMode): UnitType {\n    switch (calendarType) {\n      case 'time':\n        return 'second';\n      case 'daytime':\n        return 'second';\n      default:\n        return calendarType;\n    }\n  }\n\n  createValidator({minDate, maxDate, minTime, maxTime}: DateLimits,\n                  format: string,\n                  calendarType: CalendarMode): DateValidator {\n    let isValid: boolean;\n    let value: Dayjs[];\n    const validators: { key: string; isValid: () => boolean }[] = [];\n    const granularity = this.granularityFromType(calendarType);\n\n    if (minDate) {\n      const md = this.convertToDayjs(minDate, format);\n      validators.push({\n        key: 'minDate',\n        isValid: () => {\n          const _isValid = value.every(val => val.isSameOrAfter(md, granularity));\n          isValid = isValid ? _isValid : false;\n          return _isValid;\n        }\n      });\n    }\n\n    if (maxDate) {\n      const md = this.convertToDayjs(maxDate, format);\n      validators.push({\n        key: 'maxDate',\n        isValid: () => {\n          const _isValid = value.every(val => val.isSameOrBefore(md, granularity));\n          isValid = isValid ? _isValid : false;\n          return _isValid;\n        }\n      });\n    }\n\n    if (minTime) {\n      const md = this.onlyTime(this.convertToDayjs(minTime, format));\n      validators.push({\n        key: 'minTime',\n        isValid: () => {\n          const _isValid = value.every(val => this.onlyTime(val).isSameOrAfter(md));\n          isValid = isValid ? _isValid : false;\n          return _isValid;\n        }\n      });\n    }\n\n    if (maxTime) {\n      const md = this.onlyTime(this.convertToDayjs(maxTime, format));\n      validators.push({\n        key: 'maxTime',\n        isValid: () => {\n          const _isValid = value.every(val => this.onlyTime(val).isSameOrBefore(md));\n          isValid = isValid ? _isValid : false;\n          return _isValid;\n        }\n      });\n    }\n\n    return (inputVal: CalendarValue) => {\n      isValid = true;\n\n      value = this.convertToDayjsArray(inputVal, {\n        format,\n        allowMultiSelect: true\n      }).filter(Boolean);\n\n      if (!value.every(val => val.isValid())) {\n        return {\n          format: {\n            given: inputVal\n          }\n        };\n      }\n\n      interface Validator {\n        key: string;\n        isValid: () => boolean;\n      }\n\n      interface ErrorMap {\n        [key: string]: {\n          given: Dayjs[];\n        };\n      }\n\n      interface Validator {\n        key: string;\n        isValid: () => boolean;\n      }\n\n      const errors: ErrorMap = validators.reduce<ErrorMap>((map: ErrorMap, err: Validator) => {\n        if (!err.isValid()) {\n          map[err.key] = {\n        given: value\n          };\n        }\n\n        return map;\n      }, {});\n\n      return !isValid ? errors : {};\n    };\n  }\n\n  datesStringToStringArray(value: string): string[] {\n    return (value || '').split('|').map(m => m.trim()).filter(Boolean);\n  }\n\n  getValidDayjsArray(value: string, format: string): Dayjs[] {\n    return this.datesStringToStringArray(value)\n      .filter(d => this.isDateValid(d, format))\n      .map(d => dayjsRef(d, format));\n  }\n\n  shouldShowCurrent(showGoToCurrent: boolean,\n                    mode: CalendarMode,\n                    min: Dayjs,\n                    max: Dayjs): boolean {\n    return showGoToCurrent &&\n      mode !== 'time' &&\n      this.isDateInRange(dayjsRef(), min, max);\n  }\n\n  isDateInRange(date: Dayjs, from: Dayjs, to: Dayjs): boolean {\n    if (!date) {\n      return false;\n    }\n\n    if (!from && !to) {\n      return true;\n    }\n\n    if (!from && to) {\n      return date.isSameOrBefore(to);\n    }\n\n    if (from && !to) {\n      return date.isSameOrAfter(from);\n    }\n\n    return date.isBetween(from, to, 'day', '[]');\n  }\n\n  convertPropsToDayjs(obj: { [key: string]: any }, format: string, props: string[]): void {\n    props.forEach((prop) => {\n      if (obj.hasOwnProperty(prop)) {\n        obj[prop] = this.convertToDayjs(obj[prop], format);\n      }\n    });\n  }\n\n  shouldResetCurrentView<T extends ICalendarInternal>(prevConf: T, currentConf: T): boolean {\n    if (prevConf && currentConf) {\n      if (!prevConf.min && currentConf.min) {\n        return true;\n      } else if (prevConf.min && currentConf.min && !prevConf.min.isSame(currentConf.min, 'd')) {\n        return true;\n      } else if (!prevConf.max && currentConf.max) {\n        return true;\n      } else if (prevConf.max && currentConf.max && !prevConf.max.isSame(currentConf.max, 'd')) {\n        return true;\n      }\n\n      return false;\n    }\n\n    return false;\n  }\n\n  getNativeElement(elem: HTMLElement | string | ElementRef): HTMLElement | null {\n    if (!elem) {\n      return null;\n    } else if (typeof elem === 'string') {\n      return document.querySelector(elem);\n    } else if (elem instanceof ElementRef) {\n      return elem.nativeElement;\n    } else {\n      return elem;\n    }\n  }\n}\n",
            "properties": [
                {
                    "name": "maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SingleCalendarValue",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "maxTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SingleCalendarValue",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SingleCalendarValue",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "minTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SingleCalendarValue",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "DateOptions",
            "id": "interface-DateOptions-2ccd7d5490bd479dd504373c2b871dab321ba804a3ec72cc4157142110b93169ab34d4c964df5b1ae7a5e504ef66516f330c68422fd8a029ec0728f410a8f4d5",
            "file": "src/app/components/cs-date-picker/cs-date-picker.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { CommonModule, DatePipe } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nexport interface DateOptions {\r\n  dateFormat?: string;\r\n  selectedEndDate?: Date;\r\n  selectedStartDate?: Date;\r\n  disabledWeekends?: boolean;\r\n  disableRangePciker?: boolean;\r\n  isStepperYearShown?: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'cs-date-picker',\r\n  standalone: true,\r\n  templateUrl: './cs-date-picker.component.html',\r\n  styleUrl: './cs-date-picker.component.scss',\r\n  imports: [CommonModule, FormsModule],\r\n  providers: [DatePipe],\r\n})\r\nexport class CsDatePickerComponent {\r\n  @Output() dateObject = new EventEmitter<Object>();\r\n  isRightChervronEnable = false;\r\n\r\n  @Input()\r\n  set dateOptions(dateOptions: DateOptions) {\r\n    if (dateOptions) {\r\n      this.setDateOptions(dateOptions);\r\n    }\r\n  }\r\n\r\n  disabledWeekends = true;\r\n  disableRangePciker = false;\r\n  @Input() isStepperYearShown = true;\r\n  dateFormat = '';\r\n\r\n  showDropdownWithEmptyContent = false;\r\n  days: (Date | undefined)[] = [];\r\n  years: number[] = [];\r\n  months: Date[] = [];\r\n  @Input() offsetYearsMenu = 5;\r\n  @Input() isSelectionDayAfterCurrentDayEnable = true;\r\n  isDayselected = false;\r\n  isDatePickerClicked = false;\r\n  radioButtonDate = new Date();\r\n  dateTosubmit = '';\r\n  tabBtnActive: number = -1;\r\n\r\n  currentDate: Date = new Date();\r\n  endDate: Date = new Date();\r\n\r\n  selectedStartDate: Date | undefined;\r\n  selectedStartDateTMP: Date | undefined;\r\n  selectedEndDate: Date | undefined;\r\n\r\n  dateDisplayed: string = '';\r\n  today = new Date().toLocaleDateString();\r\n  currentDay = new Date();\r\n  toggleYearChoice = false;\r\n  toggleMonthChoice = false;\r\n  yearchose = 0;\r\n  toggleDate = new Date();\r\n  abbreviatedMonth: string[] = [];\r\n  ngOnInit(): void {\r\n    this.renderCalendar();\r\n    this.setYearsMenuToChoose();\r\n    this.getMonthAbreviated();\r\n  }\r\n\r\n  constructor(private datePipe: DatePipe) {}\r\n\r\n  //to populate the calendar\r\n  renderCalendar() {\r\n    this.days = [];\r\n    this.currentDate.setDate(1);\r\n    this.currentDate.setHours(0, 0, 0, 0);\r\n\r\n    this.endDate = new Date(this.currentDate);\r\n    this.endDate.setMonth(this.endDate.getMonth() + 1);\r\n    this.endDate.setDate(0);\r\n\r\n    let dayFromNextMonthToDisplay = this.endDate.getDay()\r\n      ? 7 - this.endDate.getDay()\r\n      : 0;\r\n\r\n    for (\r\n      let indexDay = this.currentDate.getDate();\r\n      indexDay <= this.endDate.getDate() + dayFromNextMonthToDisplay;\r\n      indexDay++\r\n    ) {\r\n      let dateAtIndex: Date = new Date(this.currentDate);\r\n      dateAtIndex.setDate(indexDay);\r\n\r\n      if (indexDay === this.currentDate.getDate()) {\r\n        let spliceNumberElement = this.currentDate.getDay() || 7;\r\n\r\n        for (let i = 1; i < spliceNumberElement; i++) {\r\n          this.days.splice(0, 0, undefined);\r\n        }\r\n      }\r\n      this.days.push(dateAtIndex);\r\n    }\r\n  }\r\n\r\n  setYearsMenuToChoose() {\r\n    // offset number of years before current year\r\n    // ex: this.offsetYearsMenu = 5\r\n\r\n    //get current year - offset\r\n    // ex: initialYearMenu = 2017\r\n\r\n    let initialYearMenu = this.currentDate.getFullYear() - this.offsetYearsMenu;\r\n    console.log(this.currentDate.getFullYear());\r\n\r\n    // for loop initialYearMenu untill current year\r\n    // initialYearMenu++\r\n    for (\r\n      let index = initialYearMenu;\r\n      index <= this.currentDate.getFullYear();\r\n      index++\r\n    ) {\r\n      this.years.push(index);\r\n    }\r\n  }\r\n\r\n  getMonthAbreviated() {\r\n    let locale = 'en-GB';\r\n    let objDate = new Date();\r\n    for (let index = 0; index <= 11; index++) {\r\n      this.abbreviatedMonth.push(\r\n        new Date(objDate.setMonth(index)).toLocaleString(locale, {\r\n          month: 'short',\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  setMonthMenuToChoose() {\r\n    this.toggleMonthChoice = true;\r\n\r\n    let res = [];\r\n    let yearChosen = this.toggleDate.getFullYear();\r\n    let monthChoice =\r\n      yearChosen === new Date().getFullYear() ? new Date().getMonth() : 11;\r\n    const endDate = new Date(yearChosen, monthChoice, 1);\r\n    const startDate = new Date(endDate.setFullYear(endDate.getFullYear()));\r\n    startDate.setDate(1);\r\n    startDate.setMonth(0);\r\n    for (let index = 0; index <= endDate.getMonth(); index++) {\r\n      let tempDate = new Date(startDate.setMonth(index));\r\n      res.push(tempDate);\r\n    }\r\n    this.months = res;\r\n  }\r\n\r\n  getSelectedMonth(month: Date): void {\r\n    this.currentDate = new Date(month);\r\n    this.toggleDate = this.currentDate;\r\n    this.toggleMonthChoice = false;\r\n    this.checkIsRightChervronEnable(0);\r\n    this.renderCalendar();\r\n  }\r\n\r\n  checkIsRightChervronEnable(offset: number) {\r\n    this.currentDate = new Date(\r\n      this.currentDate.setMonth(this.currentDate.getMonth() + offset)\r\n    );\r\n    let monthOffset = new Date();\r\n    monthOffset.setMonth(monthOffset.getMonth() - 1);\r\n    this.isRightChervronEnable = this.currentDate < monthOffset;\r\n  }\r\n\r\n  moveToMonthOffset(event: any, offset: number) {\r\n    event.stopPropagation();\r\n    this.checkIsRightChervronEnable(offset);\r\n\r\n    this.toggleDate = this.currentDate;\r\n    this.renderCalendar();\r\n  }\r\n\r\n  moveToYearOffset(event: any, offset: number) {\r\n    event.stopPropagation();\r\n    const target = Number((event.target as HTMLElement)?.textContent);\r\n    console.log(target);\r\n\r\n    let calculateOffset = this.years.length - (offset + 1);\r\n    this.toggleDate = new Date(\r\n      this.toggleDate.setFullYear(target, this.toggleDate.getMonth())\r\n    );\r\n    this.currentDate = new Date(\r\n      this.currentDate.setFullYear(new Date().getFullYear() - calculateOffset)\r\n    );\r\n    this.checkIsRightChervronEnable(0);\r\n    this.setTabBtnActive(offset);\r\n    this.renderCalendar();\r\n    this.toggleYearChoice = false;\r\n    this.setMonthMenuToChoose();\r\n  }\r\n\r\n  getSelectedDay(day: Date | undefined, e: any): void {\r\n    if (day === undefined) return;\r\n\r\n    if (e.type === 'click' || e.type === 'change') {\r\n      e.stopPropagation();\r\n      this.setTabBtnActive(-1);\r\n\r\n      let weekendDay = new Date(day).getDay();\r\n      if (this.disabledWeekends && (weekendDay === 6 || weekendDay === 0))\r\n        return;\r\n\r\n      // disable current day + 1 selection if needed\r\n      this.currentDay = new Date();\r\n      if (day > this.currentDay && !this.isSelectionDayAfterCurrentDayEnable)\r\n        return;\r\n\r\n      if (this.disableRangePciker) {\r\n        this.selectedStartDate = new Date(day);\r\n        this.selectedEndDate = new Date(day);\r\n      } else {\r\n        if (\r\n          this.selectedStartDate === undefined ||\r\n          day < this.selectedStartDate ||\r\n          (day !== this.selectedStartDate && this.isDatePickerClicked === false)\r\n        ) {\r\n          this.selectedStartDate = new Date(day);\r\n          this.isDatePickerClicked = true;\r\n          // reseting endate to make sure it look like DD/MM/YYYY\r\n          this.selectedEndDate = undefined;\r\n        } else if (this.selectedStartDate && this.isDatePickerClicked) {\r\n          this.selectedEndDate = new Date(day);\r\n          this.isDatePickerClicked = false;\r\n        } else {\r\n          this.selectedStartDate = new Date(day);\r\n          this.selectedEndDate = undefined;\r\n          this.isDatePickerClicked = true;\r\n        }\r\n      }\r\n\r\n      this.updateDateDisplay();\r\n      if (\r\n        (this.selectedStartDate !== undefined &&\r\n          this.selectedEndDate !== undefined) ||\r\n        this.disableRangePciker\r\n      )\r\n        this.emitDateToParent();\r\n    }\r\n\r\n    if (\r\n      e.type === 'mouseenter' &&\r\n      this.isDatePickerClicked &&\r\n      !this.disableRangePciker\r\n    ) {\r\n      this.selectedEndDate = new Date(day);\r\n    }\r\n  }\r\n\r\n  leavePicker() {\r\n    if (this.isDatePickerClicked && this.selectedStartDate)\r\n      this.selectedEndDate = new Date(this.selectedStartDate);\r\n  }\r\n\r\n  setSelectionDate(numberOfDays: number, activeBtnIndex: number) {\r\n    let endDate = new Date();\r\n    endDate.setHours(0, 0, 0, 0);\r\n    this.selectedEndDate = new Date(endDate);\r\n    let startDate = new Date(this.selectedEndDate);\r\n    startDate.setDate(this.selectedEndDate.getDate() - numberOfDays);\r\n    this.selectedStartDate = new Date(startDate);\r\n    this.currentDate = new Date();\r\n    this.setTabBtnActive(activeBtnIndex);\r\n    this.updateDateDisplay();\r\n    this.renderCalendar();\r\n    this.emitDateToParent();\r\n  }\r\n\r\n  setDateOptions(dateOptions: DateOptions) {\r\n    this.disabledWeekends =\r\n      dateOptions.disabledWeekends !== undefined\r\n        ? dateOptions.disabledWeekends\r\n        : true;\r\n    this.disableRangePciker =\r\n      dateOptions.disableRangePciker !== undefined\r\n        ? dateOptions.disableRangePciker\r\n        : false;\r\n    this.isStepperYearShown =\r\n      dateOptions.isStepperYearShown !== undefined\r\n        ? dateOptions.isStepperYearShown\r\n        : true;\r\n\r\n    this.dateFormat = dateOptions.dateFormat || 'dd/MM/yyyy';\r\n\r\n    this.selectedEndDate = dateOptions.selectedEndDate\r\n      ? new Date(dateOptions.selectedEndDate)\r\n      : undefined;\r\n    this.selectedStartDate = dateOptions.selectedStartDate\r\n      ? new Date(dateOptions.selectedStartDate)\r\n      : undefined;\r\n    this.selectedStartDate = dateOptions.selectedStartDate\r\n      ? new Date(dateOptions.selectedStartDate)\r\n      : undefined;\r\n    this.currentDate = new Date();\r\n\r\n    if (this.selectedEndDate) {\r\n      this.selectedEndDate.setHours(0, 0, 0, 0);\r\n    }\r\n\r\n    if (this.selectedStartDate) {\r\n      this.selectedStartDate.setHours(0, 0, 0, 0);\r\n    }\r\n\r\n    this.updateDateDisplay();\r\n    this.renderCalendar();\r\n    this.emitDateToParent();\r\n  }\r\n\r\n  emitDateToParent() {\r\n    this.dateObject.emit({\r\n      startDate: this.selectedStartDate,\r\n      todate: this.selectedEndDate,\r\n    });\r\n  }\r\n\r\n  closeDropDown(e: any) {\r\n    e.stopPropagation();\r\n    if (e.relatedTarget === null && e.type === 'blur') {\r\n      this.showDropdownWithEmptyContent = false;\r\n    }\r\n    if (e.relatedTarget === null && e.type === 'focusout') {\r\n      this.showDropdownWithEmptyContent = false;\r\n    }\r\n\r\n    if (\r\n      this.isDatePickerClicked &&\r\n      !this.toggleYearChoice &&\r\n      !this.toggleMonthChoice\r\n    ) {\r\n      this.selectedEndDate = this.selectedStartDate;\r\n      // this.isDatePickerClicked = false;\r\n      // console.log('ici');\r\n    }\r\n  }\r\n\r\n  openDropDown() {\r\n    this.showDropdownWithEmptyContent = !this.showDropdownWithEmptyContent;\r\n  }\r\n\r\n  setTabBtnActive(index: number) {\r\n    this.tabBtnActive = index;\r\n  }\r\n\r\n  isSelectedStartOrEndDate(day: Date): boolean {\r\n    return (\r\n      (this.selectedStartDate !== undefined &&\r\n        this.selectedStartDate.getTime() === day.getTime()) ||\r\n      (this.selectedEndDate !== undefined &&\r\n        this.selectedEndDate.getTime() === day.getTime())\r\n    );\r\n  }\r\n\r\n  isSelectedStartDate(day: Date): boolean {\r\n    return (\r\n      this.selectedStartDate !== undefined &&\r\n      this.selectedStartDate.getTime() === day.getTime()\r\n    );\r\n  }\r\n\r\n  updateDateDisplay() {\r\n    if (this.selectedStartDate) {\r\n      this.dateDisplayed =\r\n        this.datePipe.transform(this.selectedStartDate, this.dateFormat) || '';\r\n      if (!this.disableRangePciker) {\r\n        this.dateDisplayed += this.selectedEndDate\r\n          ? ' - ' +\r\n            this.datePipe.transform(this.selectedEndDate, this.dateFormat)\r\n          : ' - ' + this.dateFormat.toUpperCase();\r\n      }\r\n    } else {\r\n      this.dateDisplayed = '';\r\n    }\r\n  }\r\n\r\n  getDaysOfWeekInAbreviateAndLocaleFormat() {\r\n    const weekdayDateMap: any = {\r\n      Mon: new Date('2020-01-06T00:00:00.000Z'),\r\n      Tue: new Date('2020-01-07T00:00:00.000Z'),\r\n      Wed: new Date('2020-01-08T00:00:00.000Z'),\r\n      Thu: new Date('2020-01-09T00:00:00.000Z'),\r\n      Fri: new Date('2020-01-10T00:00:00.000Z'),\r\n      Sat: new Date('2020-01-11T00:00:00.000Z'),\r\n      Sun: new Date('2020-01-12T00:00:00.000Z'),\r\n    };\r\n    const shortWeekdays = Object.keys(weekdayDateMap);\r\n\r\n    const getDayOfWeek = (shortName: any, locale = 'en-US', length = 'short') =>\r\n      new Intl.DateTimeFormat(locale, { weekday: 'narrow' }).format(\r\n        weekdayDateMap[shortName]\r\n      );\r\n\r\n    const getDaysOfWeek = (locale = 'en-US', length = 'short') =>\r\n      shortWeekdays.map((shortName) => getDayOfWeek(shortName, locale, length));\r\n\r\n    return getDaysOfWeek();\r\n  }\r\n\r\n  createDateObject(value: any) {\r\n    const date = new Date(value.split('/').reverse().join('/'));\r\n    return date.toString() == 'Invalid Date' ? null : date;\r\n  }\r\n\r\n  // TODO in the future\r\n  dateDisplayedChange(event: any) {\r\n    // add in the input\r\n    // (change)=\"dateDisplayedChange($event.target.value)\"\r\n    let dateChangeArray = event.target.value.replace(/\\s/g, '').split('-');\r\n    console.log(event);\r\n\r\n    let startDate = this.createDateObject(dateChangeArray[0]);\r\n\r\n    let endDate = this.createDateObject(dateChangeArray[1]);\r\n\r\n    if (startDate && endDate && startDate <= endDate) {\r\n      this.getSelectedDay(startDate, event);\r\n      this.getSelectedDay(endDate, event);\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "dateFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "disabledWeekends",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "disableRangePciker",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "isStepperYearShown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "selectedEndDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "selectedStartDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "HttpResponse",
            "id": "interface-HttpResponse-8b2d620fc835693e6eba504112d6f11513429505cabda6ded6b121086a5fc06d1676833a2fa71f6d14aa3bfd07971c7f82fc9e5e6caed674c91f624f85c6b45d",
            "file": "src/app/components/fetch-data/pokemon.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, Signal, signal } from '@angular/core';\r\nimport { Observable, forkJoin } from 'rxjs';\r\nimport { catchError, delay, map, mergeMap } from 'rxjs/operators';\r\nimport { ajax } from 'rxjs/ajax';\r\n\r\ninterface Pokemon {\r\n  name: string;\r\n  sprites?: {\r\n    front_default: string;\r\n  };\r\n  image: string;\r\n  id: number;\r\n}\r\n\r\ninterface HttpResponse<T> {\r\n  results: T;\r\n  error: string | undefined;\r\n  isLoading: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PokemonService {\r\n  url = 'https://pokeapi.co/api/v2/pokemon?offset=0&limit=5';\r\n\r\n  pokemons = signal<HttpResponse<Pokemon[]>>({\r\n    results: [],\r\n    error: undefined,\r\n    isLoading: true,\r\n  });\r\n\r\n  pokemonDetail = signal<HttpResponse<Pokemon | null>>({\r\n    results: null,\r\n    error: undefined,\r\n    isLoading: false,\r\n  });\r\n\r\n  fetchData<T>(url: string): Observable<T> {\r\n    return ajax.getJSON<T>(url).pipe(delay(2000));\r\n  }\r\n\r\n  mapPokemons(pokemons: Pokemon[]): Pokemon[] {\r\n    return pokemons.map((pokemon) => ({\r\n      name: pokemon.name,\r\n      image: pokemon.sprites?.front_default ?? '',\r\n      id: pokemon.id,\r\n    }));\r\n  }\r\n\r\n  getPokemons(): Observable<HttpResponse<Pokemon[]>> {\r\n    return this.fetchData<HttpResponse<Pokemon[]>>(this.url).pipe(\r\n      mergeMap((data) =>\r\n        forkJoin(\r\n          data.results.map((_, index) =>\r\n            this.fetchData<Pokemon>(\r\n              `https://pokeapi.co/api/v2/pokemon/${index + 1}/`\r\n            )\r\n          )\r\n        )\r\n      ),\r\n      map((pokemons) => ({\r\n        results: this.mapPokemons(pokemons),\r\n        error: undefined,\r\n        isLoading: false,\r\n      })),\r\n      catchError((error) => {\r\n        return [{ results: [], error: '' + error.message, isLoading: false }];\r\n      })\r\n    );\r\n  }\r\n\r\n  getPokemonDetails(\r\n    pokemon: Pokemon\r\n  ): Observable<HttpResponse<Pokemon | null>> {\r\n    return this.fetchData<Pokemon>(\r\n      `https://pokeapi.co/api/v2/pokemon/${pokemon.id}/`\r\n    ).pipe(\r\n      map((data) => ({\r\n        results: {\r\n          name: data.name,\r\n          image: data.sprites?.front_default ?? '',\r\n          id: data.id,\r\n        },\r\n        error: undefined,\r\n        isLoading: false,\r\n      })),\r\n      catchError((error) => {\r\n        return [\r\n          {\r\n            results: null,\r\n            error: 'Failed to fetch Pokémon details',\r\n            isLoading: false,\r\n          },\r\n        ];\r\n      })\r\n    );\r\n  }\r\n\r\n  setPokemonsLoadingState() {\r\n    this.pokemons.set({\r\n      results: this.pokemons().results,\r\n      error: undefined,\r\n      isLoading: true,\r\n    });\r\n  }\r\n\r\n  setPokemonsSuccessState(results: Pokemon[]) {\r\n    this.pokemons.set({\r\n      results,\r\n      error: undefined,\r\n      isLoading: false,\r\n    });\r\n  }\r\n\r\n  setPokemonsErrorState(error: any) {\r\n    this.pokemons.set({\r\n      results: this.pokemons().results,\r\n      error: '' + error.message,\r\n      isLoading: false,\r\n    });\r\n  }\r\n\r\n  setPokemonDetailLoadingState() {\r\n    this.pokemonDetail.set({\r\n      results: this.pokemonDetail().results,\r\n      error: undefined,\r\n      isLoading: true,\r\n    });\r\n  }\r\n\r\n  setPokemonDetailSuccessState(results: Pokemon) {\r\n    this.pokemonDetail.set({\r\n      results,\r\n      error: undefined,\r\n      isLoading: false,\r\n    });\r\n  }\r\n\r\n  setPokemonDetailErrorState(error: any) {\r\n    this.pokemonDetail.set({\r\n      results: this.pokemonDetail().results,\r\n      error: '' + error.message,\r\n      isLoading: false,\r\n    });\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "results",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ICalendar",
            "id": "interface-ICalendar-9af158607855c3ca49ca56e0d7302927d116cb15e2e7e714f0c9b07ee2d76cb52816fa7de80ae5b7f353fb92dcb1fb29599c02988a03e161e9de0ed53c7da43a",
            "file": "src/app/components/ng2datepickercopy/lib/common/models/calendar.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Dayjs} from 'dayjs';\nimport {SingleCalendarValue} from '../types/single-calendar-value';\n\nexport interface ICalendar {\n  min?: SingleCalendarValue;\n  max?: Dayjs | string;\n}\n\nexport interface ICalendarInternal {\n  min?: Dayjs;\n  max?: Dayjs;\n}\n",
            "properties": [
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dayjs | string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SingleCalendarValue",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ICalendarInternal",
            "id": "interface-ICalendarInternal-9af158607855c3ca49ca56e0d7302927d116cb15e2e7e714f0c9b07ee2d76cb52816fa7de80ae5b7f353fb92dcb1fb29599c02988a03e161e9de0ed53c7da43a",
            "file": "src/app/components/ng2datepickercopy/lib/common/models/calendar.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Dayjs} from 'dayjs';\nimport {SingleCalendarValue} from '../types/single-calendar-value';\n\nexport interface ICalendar {\n  min?: SingleCalendarValue;\n  max?: Dayjs | string;\n}\n\nexport interface ICalendarInternal {\n  min?: Dayjs;\n  max?: Dayjs;\n}\n",
            "properties": [
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dayjs",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dayjs",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IConfig",
            "id": "interface-IConfig-9f266edb94dcfc321d6a907b3b073fa1a6a6aed71ab5d0749c1a76b09e2f3fbb8d41f5179a31e6cff5d6297a79487a30f943aee74f368cad480f62e231b3dd67",
            "file": "src/app/components/ng2datepickercopy/lib/date-picker/date-picker-config.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {TDrops, TOpens} from '../common/types/poistions.type';\r\nimport {IDayCalendarConfig, IDayCalendarConfigInternal} from '../day-calendar/day-calendar-config.model';\r\nimport {IMonthCalendarConfig, IMonthCalendarConfigInternal} from '../month-calendar/month-calendar-config';\r\nimport {ITimeSelectConfig, ITimeSelectConfigInternal} from '../time-select/time-select-config.model';\r\nimport {ElementRef} from '@angular/core';\r\n\r\nexport interface IConfig {\r\n  closeOnSelect?: boolean;\r\n  closeOnSelectDelay?: number;\r\n  openOnFocus?: boolean;\r\n  openOnClick?: boolean;\r\n  onOpenDelay?: number;\r\n  closeOnEnter?: boolean;\r\n  disableKeypress?: boolean;\r\n  inputElementContainer?: HTMLElement | string | ElementRef;\r\n  drops?: TDrops;\r\n  opens?: TOpens;\r\n  hideInputContainer?: boolean;\r\n  hideOnOutsideClick?: boolean;\r\n  numOfYearRows?: number;\r\n  numOfYearsPerPage?: number;\r\n}\r\n\r\nexport interface IDatePickerConfig extends IConfig,\r\n                                           IDayCalendarConfig,\r\n                                           IMonthCalendarConfig,\r\n                                           ITimeSelectConfig {\r\n\r\n\r\n}\r\n\r\nexport interface IDatePickerConfigInternal extends IConfig,\r\n                                                   IDayCalendarConfigInternal,\r\n                                                   IMonthCalendarConfigInternal,\r\n                                                   ITimeSelectConfigInternal {\r\n}\r\n",
            "properties": [
                {
                    "name": "closeOnEnter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "closeOnSelect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "closeOnSelectDelay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "disableKeypress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "drops",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TDrops",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "hideInputContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "hideOnOutsideClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "inputElementContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement | string | ElementRef",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "numOfYearRows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "numOfYearsPerPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "onOpenDelay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "openOnClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "openOnFocus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "opens",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TOpens",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IConfig",
            "id": "interface-IConfig-a794e6826c2dd1a18e1ffbbf95cd717aa6d5dc84b9c2de83295b5b0bc40719546b69024344c2e5d4afc45d4042f7e193012d6c93644466363856cad4079d19d6-1",
            "file": "src/app/components/ng2datepickercopy/lib/month-calendar/month-calendar-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Dayjs} from 'dayjs';\nimport {ICalendar, ICalendarInternal} from '../common/models/calendar.model';\nimport {ECalendarValue} from '../common/types/calendar-value-enum';\n\nexport interface IConfig {\n  isMonthDisabledCallback?: (date: Dayjs) => boolean;\n  allowMultiSelect?: boolean;\n  yearFormat?: string;\n  yearFormatter?: (month: Dayjs) => string;\n  format?: string;\n  isNavHeaderBtnClickable?: boolean;\n  monthBtnFormat?: string;\n  monthBtnFormatter?: (day: Dayjs) => string;\n  numOfMonthRows?: number;\n  monthBtnCssClassCallback?: (day: Dayjs) => string;\n  multipleYearsNavigateBy?: number;\n  showMultipleYearsNavigation?: boolean;\n  returnedValueType?: ECalendarValue;\n  showGoToCurrent?: boolean;\n  unSelectOnClick?: boolean;\n}\n\nexport interface IMonthCalendarConfig extends IConfig,\n                                              ICalendar {\n}\n\nexport interface IMonthCalendarConfigInternal extends IConfig,\n                                                      ICalendarInternal {\n}\n",
            "properties": [
                {
                    "name": "allowMultiSelect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "format",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "isMonthDisabledCallback",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "isNavHeaderBtnClickable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "monthBtnCssClassCallback",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "monthBtnFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "monthBtnFormatter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "multipleYearsNavigateBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "numOfMonthRows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "returnedValueType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ECalendarValue",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "showGoToCurrent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "showMultipleYearsNavigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "unSelectOnClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "yearFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "yearFormatter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IConfig-1"
        },
        {
            "name": "IConfig",
            "id": "interface-IConfig-c7138ca5eb96f7a5a606bf3335d27e4f9c94806af0f7a10a7e9b17ca28721fb419631ac94f4fe51417b41ad83c7417fcb50b69f93a8790414821fb7baf37c9c5-2",
            "file": "src/app/components/ng2datepickercopy/lib/day-calendar/day-calendar-config.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {ICalendar, ICalendarInternal} from '../common/models/calendar.model';\nimport {WeekDays} from '../common/types/week-days.type';\nimport {Dayjs} from 'dayjs';\nimport {ECalendarValue} from '../common/types/calendar-value-enum';\n\ninterface IConfig {\n  isDayDisabledCallback?: (date: Dayjs) => boolean;\n  isMonthDisabledCallback?: (date: Dayjs) => boolean;\n  weekDayFormat?: string;\n  weekDayFormatter?: (dayIndex: number) => string;\n  showNearMonthDays?: boolean;\n  showWeekNumbers?: boolean;\n  firstDayOfWeek?: WeekDays;\n  format?: string;\n  allowMultiSelect?: boolean;\n  monthFormat?: string;\n  monthFormatter?: (month: Dayjs) => string;\n  enableMonthSelector?: boolean;\n  yearFormat?: string;\n  yearFormatter?: (year: Dayjs) => string;\n  dayBtnFormat?: string;\n  dayBtnFormatter?: (day: Dayjs) => string;\n  dayBtnCssClassCallback?: (day: Dayjs) => string;\n  monthBtnFormat?: string;\n  monthBtnFormatter?: (day: Dayjs) => string;\n  monthBtnCssClassCallback?: (day: Dayjs) => string;\n  multipleYearsNavigateBy?: number;\n  showMultipleYearsNavigation?: boolean;\n  returnedValueType?: ECalendarValue;\n  showGoToCurrent?: boolean;\n  unSelectOnClick?: boolean;\n  numOfMonthRows?: number;\n}\n\nexport interface IDayCalendarConfig extends IConfig,\n                                            ICalendar {\n}\n\nexport interface IDayCalendarConfigInternal extends IConfig,\n                                                    ICalendarInternal {\n}\n",
            "properties": [
                {
                    "name": "allowMultiSelect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "dayBtnCssClassCallback",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "dayBtnFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "dayBtnFormatter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "enableMonthSelector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "firstDayOfWeek",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "WeekDays",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "format",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "isDayDisabledCallback",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "isMonthDisabledCallback",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "monthBtnCssClassCallback",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "monthBtnFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "monthBtnFormatter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "monthFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "monthFormatter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "multipleYearsNavigateBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "numOfMonthRows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "returnedValueType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ECalendarValue",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "showGoToCurrent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "showMultipleYearsNavigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "showNearMonthDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "showWeekNumbers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "unSelectOnClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "weekDayFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "weekDayFormatter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "yearFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "yearFormatter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "IConfig-2"
        },
        {
            "name": "IConfig",
            "id": "interface-IConfig-ca5f55aa590a67435d6b2977e5f27f0257659638e89aea1ea023af91c23e7b1ab46eec0bcb4d4bada283291e19c13a43e97cda575edc1ab42f6c36022e769d72-3",
            "file": "src/app/components/ng2datepickercopy/lib/time-select/time-select-config.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Dayjs} from 'dayjs';\nimport {ICalendar, ICalendarInternal} from '../common/models/calendar.model';\nimport {ECalendarValue} from '../common/types/calendar-value-enum';\n\ninterface IConfig {\n  hours12Format?: string;\n  hours24Format?: string;\n  maxTime?: Dayjs;\n  meridiemFormat?: string;\n  minTime?: Dayjs;\n  minutesFormat?: string;\n  minutesInterval?: number;\n  secondsFormat?: string;\n  secondsInterval?: number;\n  showSeconds?: boolean;\n  showTwentyFourHours?: boolean;\n  timeSeparator?: string;\n  returnedValueType?: ECalendarValue;\n}\n\nexport interface ITimeSelectConfig extends IConfig, ICalendar {\n}\n\nexport interface ITimeSelectConfigInternal extends IConfig,\n                                                   ICalendarInternal {\n}\n",
            "properties": [
                {
                    "name": "hours12Format",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "hours24Format",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "maxTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dayjs",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "meridiemFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "minTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dayjs",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "minutesFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "minutesInterval",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "returnedValueType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ECalendarValue",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "secondsFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "secondsInterval",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "showSeconds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "showTwentyFourHours",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "timeSeparator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "IConfig-3"
        },
        {
            "name": "IConfig",
            "id": "interface-IConfig-3d7fd022b7c7f5f3b1367c966a1083ac6d10cd7cb83d7cfbca19cc79bbdd62198faffd2371feef11613672ad3e01674d6cf2dd3cb8b2d63d79b2ca7ba19f2cbf-4",
            "file": "src/app/components/ng2datepickercopy/lib/year-calendar/year-calendar-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Dayjs} from 'dayjs';\r\nimport {ICalendar, ICalendarInternal} from '../common/models/calendar.model';\r\nimport { ECalendarValue } from '../public-api';\r\n\r\nexport interface IConfig {\r\n  isYearDisabledCallback?: (date: Dayjs) => boolean;\r\n  isNavHeaderBtnClickable?: boolean;\r\n  allowMultiSelect?: boolean;\r\n  yearFormat?: string;\r\n  yearFormatter?: (year: Dayjs) => string;\r\n  format?: string;\r\n  numOfYearsPerPage: number;\r\n  numOfYearRows?: number;\r\n  yearBtnCssClassCallback?: (year: Dayjs) => string;\r\n  yearBtnFormatter?: (year: Dayjs) => string;\r\n  yearBtnFormat?: string;\r\n  returnedValueType?: ECalendarValue;\r\n  showGoToCurrent?: boolean;\r\n  unSelectOnClick?: boolean;\r\n}\r\n\r\nexport interface IYearCalendarConfig extends IConfig,\r\n                                             ICalendar {\r\n}\r\n\r\nexport interface IYearCalendarConfigInternal extends IConfig,\r\n                                                     ICalendarInternal {\r\n}\r\n",
            "properties": [
                {
                    "name": "allowMultiSelect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "format",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "isNavHeaderBtnClickable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "isYearDisabledCallback",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "numOfYearRows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "numOfYearsPerPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "returnedValueType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ECalendarValue",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "showGoToCurrent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "unSelectOnClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "yearBtnCssClassCallback",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "yearBtnFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "yearBtnFormatter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "yearFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "yearFormatter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 4,
            "duplicateName": "IConfig-4"
        },
        {
            "name": "IDate",
            "id": "interface-IDate-ac9e271c4df9885f5bfb367d130ad6f2aaf86e300f4294e6e88eb9ac35e9e799f8d3f7e9199f30964a6c17bdbd9839e2b779e87aea7c0c56ae9263ee8f97b027",
            "file": "src/app/components/ng2datepickercopy/lib/common/models/date.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Dayjs} from 'dayjs';\n\nexport interface IDate {\n  date: Dayjs;\n  selected: boolean;\n}\n",
            "properties": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dayjs",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IDateCell",
            "id": "interface-IDateCell-cae1f71926d8bfe0fbd22f9d0de6f0377fd58c6078db69ed643c3438ee9d6f88fb4a0f1b40e105b1ea99853ae37d927895c1cca38cc06f62f6291a4a7ddd8f3e",
            "file": "src/app/components/ng2datepickercopy/lib/year-calendar/year-calendar.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IGenCalendarParams<T> {\r\n  startDate: Dayjs;\r\n  numOfRows: number;\r\n  numOfCells: number;\r\n  isDisabledCb: (date: Dayjs, config: T) => boolean;\r\n  getBtnTextCb: (config: T, date: Dayjs) => string;\r\n  selected: Dayjs[];\r\n  config: T;\r\n  granularity: 'year' | 'month';\r\n}\r\n\r\nexport interface IDateCell {\r\n  date: Dayjs;\r\n  selected: boolean;\r\n  current: boolean;\r\n  disabled: boolean\r\n  text: string;\r\n}\r\n\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  HostBinding,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Output,\r\n  SimpleChange,\r\n  SimpleChanges,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {\r\n  ControlValueAccessor,\r\n  FormControl,\r\n  NG_VALIDATORS,\r\n  NG_VALUE_ACCESSOR,\r\n  ValidationErrors,\r\n  Validator\r\n} from '@angular/forms';\r\nimport dayjs, {Dayjs} from 'dayjs';\r\nimport {INavEvent} from '../common/models/navigation-event.model';\r\nimport {DateValidator} from '../common/types/validator.type';\r\nimport {IYearCalendarConfig, IYearCalendarConfigInternal} from './year-calendar-config';\r\nimport {YearCalendarService} from './year-calendar.service';\r\nimport {UtilsService} from '../common/services/utils/utils.service';\r\nimport { CalendarValue, ECalendarValue, SingleCalendarValue } from '../public-api';\r\nimport { CalendarNavComponent } from '../calendar-nav/calendar-nav.component';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'dp-year-calendar',\r\n  templateUrl: './year-calendar.component.html',\r\n  styleUrls: ['./year-calendar.component.less'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  standalone: true,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  imports: [CalendarNavComponent, CommonModule],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => YearCalendarComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => YearCalendarComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class YearCalendarComponent implements OnInit, OnChanges, ControlValueAccessor, Validator {\r\n\r\n  @Input() config!: IYearCalendarConfig;\r\n  @Input() displayDate!: Dayjs;\r\n  @Input() minDate!: Dayjs;\r\n  @Input() maxDate!: Dayjs;\r\n  @HostBinding('class') @Input() theme!: string;\r\n  @Output() onSelect: EventEmitter<IDateCell> = new EventEmitter();\r\n  @Output() onNavHeaderBtnClick: EventEmitter<null> = new EventEmitter();\r\n  @Output() onGoToCurrent: EventEmitter<void> = new EventEmitter();\r\n  @Output() onLeftNav: EventEmitter<INavEvent> = new EventEmitter();\r\n  @Output() onRightNav: EventEmitter<INavEvent> = new EventEmitter();\r\n  @Output() onLeftSecondaryNav: EventEmitter<INavEvent> = new EventEmitter();\r\n  @Output() onRightSecondaryNav: EventEmitter<INavEvent> = new EventEmitter();\r\n  isInited: boolean = false;\r\n  componentConfig!: IYearCalendarConfigInternal;\r\n  yearMonths!: IDateCell[][];\r\n  startYear: number = 2016;\r\n  inputValue!: CalendarValue;\r\n  inputValueType!: ECalendarValue;\r\n  validateFn!: DateValidator;\r\n  _shouldShowCurrent: boolean = true;\r\n  navLabel!: string;\r\n  showLeftNav!: boolean;\r\n  showRightNav!: boolean;\r\n  api = {\r\n    toggleCalendar: this.toggleCalendarMode.bind(this),\r\n    moveCalendarTo: this.moveCalendarTo.bind(this)\r\n  };\r\n\r\n  _selected!: Dayjs[];\r\n  _currentDateView!: Dayjs;\r\n\r\n  get selected(): Dayjs[] {\r\n    return this._selected;\r\n  }\r\n\r\n  set selected(selected: Dayjs[]) {\r\n    this._selected = selected;\r\n    this.onChangeCallback(this.processOnChangeCallback(selected));\r\n  }\r\n\r\n  get currentDateView(): Dayjs {\r\n    return this._currentDateView;\r\n  }\r\n\r\n    convertToMoment(date: SingleCalendarValue, format: string): Dayjs | null {\r\n    if (!date) {\r\n      return null;\r\n    } else if (typeof date === 'string') {\r\n      return dayjs(date, format);\r\n    } else {\r\n      return date.clone();\r\n    }\r\n  }\r\n\r\n  set currentDateView(current: Dayjs) {\r\n    this._currentDateView = current.clone();\r\n    // Initial range: 2016-2039\r\n    this.startYear =  this.currentDateView.year();\r\n    this.updateYearRange();\r\n    this.showLeftNav = this.yearCalendarService.shouldShowLeft(this.componentConfig.min, this._currentDateView);\r\n    this.showRightNav = this.yearCalendarService.shouldShowRight(this.componentConfig.max, this.currentDateView);\r\n  }\r\n\r\n  updateYearRange() {\r\n    // Set startYear based on currentDateView.year()\r\n    this.startYear = this.currentDateView.year();\r\n    const years: IDateCell[] = [];\r\n    const currentYear = dayjs().year();\r\n    for (let y = this.startYear; y < this.startYear + 24; y++) {\r\n      const date = dayjs(`${y}-01-01`);\r\n      years.push({\r\n        date,\r\n        selected: false,\r\n        current: date.year() === currentYear,\r\n        disabled: false,\r\n        text: date.format(this.componentConfig.yearBtnFormat ?? 'YYYY'),\r\n      });\r\n    }\r\n    this.yearMonths = [];\r\n    for (let i = 0; i < years.length; i += 6) {\r\n      this.yearMonths.push(years.slice(i, i + 6));\r\n    }\r\n    this.navLabel = `${this.startYear} - ${this.startYear + 23}`;\r\n  }\r\n\r\n  constructor(private readonly cd: ChangeDetectorRef,\r\n              private readonly yearCalendarService: YearCalendarService,\r\n              private readonly utilsService: UtilsService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.isInited = true;\r\n    this.init();\r\n    this.initValidators();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (this.isInited) {\r\n      const {minDate, maxDate, config} = changes;\r\n\r\n      this.handleConfigChange(config);\r\n      this.init();\r\n\r\n      if (minDate || maxDate) {\r\n        this.initValidators();\r\n      }\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onChangeCallback = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n  }\r\n\r\n  validate(formControl: FormControl): ValidationErrors | any {\r\n    if (this.minDate || this.maxDate) {\r\n      return this.validateFn(formControl.value);\r\n    } else {\r\n      return () => null;\r\n    }\r\n  }\r\n\r\n  writeValue(value: CalendarValue): void {\r\n    this.inputValue = value;\r\n    if (value) {\r\n      this.selected = this.utilsService.convertToDayjsArray(value, this.componentConfig);\r\n      // Set currentDateView to first selected value or displayDate\r\n      if (this.selected.length > 0) {\r\n        this.currentDateView = this.selected[0].clone();\r\n      } else if (this.displayDate) {\r\n        this.currentDateView = this.displayDate.clone();\r\n      }\r\n      this.startYear = this.currentDateView.year();\r\n    } else {\r\n      this.selected = [];\r\n      if (this.displayDate) {\r\n        this.currentDateView = this.displayDate.clone();\r\n        this.startYear = this.currentDateView.year();\r\n      }\r\n    }\r\n    this.updateYearRange();\r\n    this.inputValueType = this.utilsService.getInputType(this.inputValue, this.componentConfig.allowMultiSelect ?? false);\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  onChangeCallback(_: any): void {\r\n  }\r\n\r\n  processOnChangeCallback(value: Dayjs[]): CalendarValue {\r\n    return this.utilsService.convertFromDayjsArray(\r\n      this.componentConfig.format ?? '',\r\n      value,\r\n      this.componentConfig.returnedValueType || this.inputValueType\r\n    );\r\n  }\r\n\r\n\r\n  // todo:: add unit test\r\n  convertFromMomentArray(format: string,\r\n                         value: Dayjs[],\r\n                         convertTo: ECalendarValue): CalendarValue {\r\n    switch (convertTo) {\r\n      case (ECalendarValue.String):\r\n        return value[0] && value[0].format(format);\r\n      case (ECalendarValue.StringArr):\r\n        return value.filter(Boolean).map(v => v.format(format));\r\n      case (ECalendarValue.Dayjs):\r\n        return value[0] ? value[0].clone() : value[0];\r\n      case (ECalendarValue.DayjsArr):\r\n        return value ? value.map(v => v.clone()) : value;\r\n      default:\r\n        return value;\r\n    }\r\n  }\r\n\r\n  goToCurrent(): void {\r\n    this.currentDateView = dayjs();\r\n    this.onGoToCurrent.emit();\r\n  }\r\n\r\n  onLeftNavClick() {\r\n  const from = this.currentDateView.clone();\r\n  // Move currentDateView 24 years back and update startYear accordingly\r\n  this.currentDateView = this.currentDateView.subtract(24, 'year');\r\n  this.startYear = this.currentDateView.year();\r\n  this.updateYearRange();\r\n  this.onLeftNav.emit({from, to: this.currentDateView.clone()});\r\n  }\r\n\r\n  onRightNavClick(): void {\r\n  const from = this.currentDateView.clone();\r\n  // Move currentDateView 24 years forward and update startYear accordingly\r\n  this.currentDateView = this.currentDateView.add(24, 'year');\r\n  this.startYear = this.currentDateView.year();\r\n  this.updateYearRange();\r\n  this.onRightNav.emit({from, to: this.currentDateView.clone()});\r\n  }\r\n\r\n  shouldShowCurrent(): boolean {\r\n    return this.utilsService.shouldShowCurrent(\r\n      this.componentConfig.showGoToCurrent ?? false,\r\n      'month',\r\n      this.componentConfig.min ?? dayjs(),\r\n      this.componentConfig.max ?? dayjs()\r\n    );\r\n  }\r\n\r\n  yearClicked(year: IDateCell): void {\r\n    if (year.selected && !this.componentConfig.unSelectOnClick) {\r\n      return;\r\n    }\r\n\r\n    this.selected = this.utilsService\r\n      .updateSelected(this.componentConfig.allowMultiSelect ?? false, this.selected, year, 'year');\r\n    this.yearMonths = this.yearCalendarService\r\n      .generateCalendar(this.componentConfig, this.currentDateView, this.selected);\r\n    this.onSelect.emit(year);\r\n  }\r\n\r\n  getYearBtnCssClass(year: IDateCell): {[klass: string]: boolean} {\r\n    const cssClass: {[klass: string]: boolean} = {\r\n      'dp-selected': year.selected,\r\n      'dp-current-year': year.current\r\n    };\r\n    const customCssClass: string = this.yearCalendarService.getYearBtnCssClass(this.componentConfig, year.date);\r\n\r\n    if (customCssClass) {\r\n      cssClass[customCssClass] = true;\r\n    }\r\n\r\n    return cssClass;\r\n  }\r\n\r\n  private init(): void {\r\n    this.componentConfig = this.yearCalendarService.getConfig(this.config);\r\n    this.selected = this.selected || [];\r\n    this.currentDateView = this.displayDate\r\n      ? this.displayDate\r\n      : this.utilsService\r\n        .getDefaultDisplayDate(\r\n          this.currentDateView,\r\n          this.selected,\r\n          this.componentConfig.allowMultiSelect ?? false,\r\n          this.componentConfig.min ?? dayjs()\r\n        );\r\n    this.inputValueType = this.utilsService.getInputType(this.inputValue, this.componentConfig.allowMultiSelect ?? false);\r\n    this._shouldShowCurrent = this.shouldShowCurrent();\r\n  }\r\n\r\n  private initValidators(): void {\r\n    this.validateFn = this.utilsService.createValidator(\r\n      {minDate: this.minDate, maxDate: this.maxDate},\r\n      this.componentConfig.format ?? '',\r\n      'year'\r\n    );\r\n    this.onChangeCallback(this.processOnChangeCallback(this.selected));\r\n  }\r\n\r\n  private toggleCalendarMode(): void {\r\n    this.onNavHeaderBtnClick.emit();\r\n  }\r\n\r\n  private moveCalendarTo(to: SingleCalendarValue): void {\r\n    if (to) {\r\n      this.currentDateView = this.utilsService.convertToDayjs(to, this.componentConfig.format ?? '');\r\n      this.cd.markForCheck();\r\n    }\r\n  }\r\n\r\n  private handleConfigChange(config: SimpleChange): void {\r\n    if (config) {\r\n      const prevConf: IYearCalendarConfigInternal = this.yearCalendarService.getConfig(config.previousValue);\r\n      const currentConf: IYearCalendarConfigInternal = this.yearCalendarService.getConfig(config.currentValue);\r\n\r\n      if (this.utilsService.shouldResetCurrentView(prevConf, currentConf)) {\r\n        this._currentDateView = dayjs();\r\n      }\r\n\r\n      // Use locale from the original config objects, not the internal config\r\n      const prevLocale = config.previousValue?.locale;\r\n      const currentLocale = config.currentValue?.locale;\r\n\r\n      if (prevLocale !== currentLocale) {\r\n        if (this.currentDateView && currentLocale) {\r\n          this.currentDateView = this.currentDateView.locale(currentLocale);\r\n        }\r\n\r\n        if (currentLocale) {\r\n          (this.selected || []).forEach((d) => d.locale(currentLocale));\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "current",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dayjs",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IDateCell",
            "id": "interface-IDateCell-c1cd816c89780a1c7567f1871ce2e959d240ec11246b32cabb3cc39c69834dd72e370a6e1490ef10b2a04564e60120c4fb4eda4d117d54d78f10d038b4c4d0c7-1",
            "file": "src/app/components/ng2datepickercopy/lib/year-calendar/year-calendar.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable} from '@angular/core';\r\nimport dayjs, {Dayjs} from 'dayjs';\r\nimport {UtilsService} from '../common/services/utils/utils.service';\r\nimport {IYearCalendarConfig, IYearCalendarConfigInternal} from './year-calendar-config';\r\nimport { IGenCalendarParams } from './year-calendar.component';\r\n\r\nexport interface IDateCell {\r\n  date: Dayjs;\r\n  selected: boolean;\r\n  current: boolean;\r\n  disabled: boolean\r\n  text: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class YearCalendarService {\r\n  readonly DEFAULT_CONFIG: IYearCalendarConfigInternal = {\r\n    allowMultiSelect: false,\r\n    yearFormat: 'YYYY',\r\n    yearBtnFormat: 'YYYY',\r\n    format: 'YYYY',\r\n    numOfYearsPerPage: 24,\r\n    numOfYearRows: 6,\r\n    unSelectOnClick: true\r\n  };\r\n\r\n  constructor(private utilsService: UtilsService) {\r\n  }\r\n\r\n  getConfig(config: IYearCalendarConfig): IYearCalendarConfigInternal {\r\n    const _config = <IYearCalendarConfigInternal>{\r\n      ...this.DEFAULT_CONFIG,\r\n      ...this.utilsService.clearUndefined(config)\r\n    };\r\n\r\n    this.validateConfig(_config);\r\n\r\n  this.utilsService.convertPropsToDayjs(_config, _config.format ?? 'YYYY', ['min', 'max']);\r\n  // If you use dayjs locale plugin, set locale here if needed\r\n\r\n    return _config;\r\n  }\r\n\r\n    _generateCalendar<T>({\r\n                        numOfRows,\r\n                        numOfCells,\r\n                        isDisabledCb,\r\n                        getBtnTextCb,\r\n                        selected,\r\n                        config,\r\n                        startDate,\r\n                        granularity\r\n                      }: IGenCalendarParams<T>): IDateCell[][] {\r\n    const index = startDate.clone();\r\n\r\n    return this.createArray(numOfRows).map(() => {\r\n      return this.createArray(numOfCells / numOfRows).map(() => {\r\n        const date = index.clone();\r\n        const month = {\r\n          date,\r\n          selected: !!selected.find(s => index.isSame(s, granularity)),\r\n          current: index.isSame(dayjs(), granularity),\r\n          disabled: isDisabledCb(date, config),\r\n          text: getBtnTextCb(config, date)\r\n        };\r\n\r\n        index.add(1, 'month');\r\n\r\n        return month;\r\n      });\r\n    });\r\n  }\r\n\r\n  generateCalendar(config: IYearCalendarConfig, year: Dayjs, selected: Dayjs[] = []): IDateCell[][] {\r\n    return this._generateCalendar<IYearCalendarConfig>({\r\n      numOfRows: config.numOfYearRows ?? 0,\r\n      numOfCells: config.numOfYearsPerPage ?? this.DEFAULT_CONFIG.numOfYearsPerPage,\r\n      isDisabledCb: this.isYearDisabled,\r\n      getBtnTextCb: this.getYearBtnText,\r\n      selected,\r\n      config,\r\n      startDate: year.clone().startOf('year'),\r\n      granularity: 'year'\r\n    });\r\n  }\r\n\r\n  isYearDisabled(date: Dayjs, config: IYearCalendarConfig) {\r\n    if (config.min && date.isBefore(config.min, 'year')) {\r\n      return true;\r\n    }\r\n    return !!(config.max && date.isAfter(config.max, 'year'));\r\n  }\r\n\r\n  shouldShowLeft(min: Dayjs | undefined, currentMonthView: Dayjs): boolean {\r\n    return min ? min.isBefore(currentMonthView, 'year') : true;\r\n  }\r\n\r\n  shouldShowRight(max: Dayjs | undefined, currentMonthView: Dayjs): boolean {\r\n    return max ? max.isAfter(currentMonthView, 'year') : true;\r\n  }\r\n\r\n  getHeaderLabel(config: IYearCalendarConfig, year: Dayjs): string {\r\n    if (config.yearFormatter) {\r\n      return config.yearFormatter(year);\r\n    }\r\n    return year.format(config.yearFormat ?? 'YYYY');\r\n  }\r\n\r\n  getYearBtnText(config: IYearCalendarConfig, year: Dayjs): string {\r\n    if (config.yearBtnFormatter) {\r\n      return config.yearBtnFormatter(year);\r\n    }\r\n    return year.format(config.yearBtnFormat ?? 'YYYY');\r\n  }\r\n\r\n  getYearBtnCssClass(config: IYearCalendarConfig, year: Dayjs): string {\r\n    if (config.yearBtnCssClassCallback) {\r\n      return config.yearBtnCssClassCallback(year);\r\n    }\r\n    return '';\r\n  }\r\n\r\n  private validateConfig(config: IYearCalendarConfigInternal): void {\r\n  }\r\n\r\n  private createArray(length: number): number[] {\r\n    return Array.from({ length }, (_, i) => i);\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "current",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dayjs",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IDateCell-1"
        },
        {
            "name": "IDatePickerConfig",
            "id": "interface-IDatePickerConfig-9f266edb94dcfc321d6a907b3b073fa1a6a6aed71ab5d0749c1a76b09e2f3fbb8d41f5179a31e6cff5d6297a79487a30f943aee74f368cad480f62e231b3dd67",
            "file": "src/app/components/ng2datepickercopy/lib/date-picker/date-picker-config.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {TDrops, TOpens} from '../common/types/poistions.type';\r\nimport {IDayCalendarConfig, IDayCalendarConfigInternal} from '../day-calendar/day-calendar-config.model';\r\nimport {IMonthCalendarConfig, IMonthCalendarConfigInternal} from '../month-calendar/month-calendar-config';\r\nimport {ITimeSelectConfig, ITimeSelectConfigInternal} from '../time-select/time-select-config.model';\r\nimport {ElementRef} from '@angular/core';\r\n\r\nexport interface IConfig {\r\n  closeOnSelect?: boolean;\r\n  closeOnSelectDelay?: number;\r\n  openOnFocus?: boolean;\r\n  openOnClick?: boolean;\r\n  onOpenDelay?: number;\r\n  closeOnEnter?: boolean;\r\n  disableKeypress?: boolean;\r\n  inputElementContainer?: HTMLElement | string | ElementRef;\r\n  drops?: TDrops;\r\n  opens?: TOpens;\r\n  hideInputContainer?: boolean;\r\n  hideOnOutsideClick?: boolean;\r\n  numOfYearRows?: number;\r\n  numOfYearsPerPage?: number;\r\n}\r\n\r\nexport interface IDatePickerConfig extends IConfig,\r\n                                           IDayCalendarConfig,\r\n                                           IMonthCalendarConfig,\r\n                                           ITimeSelectConfig {\r\n\r\n\r\n}\r\n\r\nexport interface IDatePickerConfigInternal extends IConfig,\r\n                                                   IDayCalendarConfigInternal,\r\n                                                   IMonthCalendarConfigInternal,\r\n                                                   ITimeSelectConfigInternal {\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "IConfig",
                "IDayCalendarConfig",
                "IMonthCalendarConfig",
                "ITimeSelectConfig"
            ]
        },
        {
            "name": "IDatePickerConfigInternal",
            "id": "interface-IDatePickerConfigInternal-9f266edb94dcfc321d6a907b3b073fa1a6a6aed71ab5d0749c1a76b09e2f3fbb8d41f5179a31e6cff5d6297a79487a30f943aee74f368cad480f62e231b3dd67",
            "file": "src/app/components/ng2datepickercopy/lib/date-picker/date-picker-config.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {TDrops, TOpens} from '../common/types/poistions.type';\r\nimport {IDayCalendarConfig, IDayCalendarConfigInternal} from '../day-calendar/day-calendar-config.model';\r\nimport {IMonthCalendarConfig, IMonthCalendarConfigInternal} from '../month-calendar/month-calendar-config';\r\nimport {ITimeSelectConfig, ITimeSelectConfigInternal} from '../time-select/time-select-config.model';\r\nimport {ElementRef} from '@angular/core';\r\n\r\nexport interface IConfig {\r\n  closeOnSelect?: boolean;\r\n  closeOnSelectDelay?: number;\r\n  openOnFocus?: boolean;\r\n  openOnClick?: boolean;\r\n  onOpenDelay?: number;\r\n  closeOnEnter?: boolean;\r\n  disableKeypress?: boolean;\r\n  inputElementContainer?: HTMLElement | string | ElementRef;\r\n  drops?: TDrops;\r\n  opens?: TOpens;\r\n  hideInputContainer?: boolean;\r\n  hideOnOutsideClick?: boolean;\r\n  numOfYearRows?: number;\r\n  numOfYearsPerPage?: number;\r\n}\r\n\r\nexport interface IDatePickerConfig extends IConfig,\r\n                                           IDayCalendarConfig,\r\n                                           IMonthCalendarConfig,\r\n                                           ITimeSelectConfig {\r\n\r\n\r\n}\r\n\r\nexport interface IDatePickerConfigInternal extends IConfig,\r\n                                                   IDayCalendarConfigInternal,\r\n                                                   IMonthCalendarConfigInternal,\r\n                                                   ITimeSelectConfigInternal {\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "IConfig",
                "IDayCalendarConfigInternal",
                "IMonthCalendarConfigInternal",
                "ITimeSelectConfigInternal"
            ]
        },
        {
            "name": "IDatePickerDirectiveConfig",
            "id": "interface-IDatePickerDirectiveConfig-56b12d1f4d3f0a7ed339405fb3475f7eb99fe4bc41a2ce72a3b256d9de41c4fdd3456ecb775941a6abf438d7323d3aa6b103098f3455cc96baecd9c68de06d3c",
            "file": "src/app/components/ng2datepickercopy/lib/date-picker/date-picker-directive-config.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {TDrops, TOpens} from '../common/types/poistions.type';\nimport {IDayCalendarConfig} from '../day-calendar/day-calendar-config.model';\nimport {IMonthCalendarConfig} from '../month-calendar/month-calendar-config';\nimport {ITimeSelectConfig} from '../time-select/time-select-config.model';\nimport {ElementRef} from '@angular/core';\n\nexport interface IDatePickerDirectiveConfig extends IDayCalendarConfig, IMonthCalendarConfig, ITimeSelectConfig {\n  closeOnSelect?: boolean;\n  closeOnSelectDelay?: number;\n  onOpenDelay?: number;\n  disableKeypress?: boolean;\n  inputElementContainer?: HTMLElement | ElementRef;\n  drops?: TDrops;\n  opens?: TOpens;\n  hideInputContainer?: boolean;\n}\n",
            "properties": [
                {
                    "name": "closeOnSelect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "closeOnSelectDelay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "disableKeypress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "drops",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TDrops",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "hideInputContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "inputElementContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement | ElementRef",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "onOpenDelay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "opens",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TOpens",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "IDayCalendarConfig",
                "IMonthCalendarConfig",
                "ITimeSelectConfig"
            ]
        },
        {
            "name": "IDay",
            "id": "interface-IDay-0ad0b12023fb4c90ccaa6476c5aa880750cf31e41f7c6f43a134c00f67cb2ce6ccfdd174d7644e06351491a0fdd2490cf504b8fade621a3554eeb3ef445d3104",
            "file": "src/app/components/ng2datepickercopy/lib/day-calendar/day.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {IDate} from '../common/models/date.model';\n\nexport interface IDay extends IDate {\n  currentMonth?: boolean;\n  prevMonth?: boolean;\n  nextMonth?: boolean;\n  currentDay?: boolean;\n  disabled?: boolean;\n}\n\nexport interface IDayEvent {\n  day: IDay;\n  event: MouseEvent;\n}\n",
            "properties": [
                {
                    "name": "currentDay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "currentMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "nextMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "prevMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "IDate"
            ]
        },
        {
            "name": "IDayCalendarConfig",
            "id": "interface-IDayCalendarConfig-c7138ca5eb96f7a5a606bf3335d27e4f9c94806af0f7a10a7e9b17ca28721fb419631ac94f4fe51417b41ad83c7417fcb50b69f93a8790414821fb7baf37c9c5",
            "file": "src/app/components/ng2datepickercopy/lib/day-calendar/day-calendar-config.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {ICalendar, ICalendarInternal} from '../common/models/calendar.model';\nimport {WeekDays} from '../common/types/week-days.type';\nimport {Dayjs} from 'dayjs';\nimport {ECalendarValue} from '../common/types/calendar-value-enum';\n\ninterface IConfig {\n  isDayDisabledCallback?: (date: Dayjs) => boolean;\n  isMonthDisabledCallback?: (date: Dayjs) => boolean;\n  weekDayFormat?: string;\n  weekDayFormatter?: (dayIndex: number) => string;\n  showNearMonthDays?: boolean;\n  showWeekNumbers?: boolean;\n  firstDayOfWeek?: WeekDays;\n  format?: string;\n  allowMultiSelect?: boolean;\n  monthFormat?: string;\n  monthFormatter?: (month: Dayjs) => string;\n  enableMonthSelector?: boolean;\n  yearFormat?: string;\n  yearFormatter?: (year: Dayjs) => string;\n  dayBtnFormat?: string;\n  dayBtnFormatter?: (day: Dayjs) => string;\n  dayBtnCssClassCallback?: (day: Dayjs) => string;\n  monthBtnFormat?: string;\n  monthBtnFormatter?: (day: Dayjs) => string;\n  monthBtnCssClassCallback?: (day: Dayjs) => string;\n  multipleYearsNavigateBy?: number;\n  showMultipleYearsNavigation?: boolean;\n  returnedValueType?: ECalendarValue;\n  showGoToCurrent?: boolean;\n  unSelectOnClick?: boolean;\n  numOfMonthRows?: number;\n}\n\nexport interface IDayCalendarConfig extends IConfig,\n                                            ICalendar {\n}\n\nexport interface IDayCalendarConfigInternal extends IConfig,\n                                                    ICalendarInternal {\n}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "IConfig",
                "ICalendar"
            ]
        },
        {
            "name": "IDayCalendarConfigInternal",
            "id": "interface-IDayCalendarConfigInternal-c7138ca5eb96f7a5a606bf3335d27e4f9c94806af0f7a10a7e9b17ca28721fb419631ac94f4fe51417b41ad83c7417fcb50b69f93a8790414821fb7baf37c9c5",
            "file": "src/app/components/ng2datepickercopy/lib/day-calendar/day-calendar-config.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {ICalendar, ICalendarInternal} from '../common/models/calendar.model';\nimport {WeekDays} from '../common/types/week-days.type';\nimport {Dayjs} from 'dayjs';\nimport {ECalendarValue} from '../common/types/calendar-value-enum';\n\ninterface IConfig {\n  isDayDisabledCallback?: (date: Dayjs) => boolean;\n  isMonthDisabledCallback?: (date: Dayjs) => boolean;\n  weekDayFormat?: string;\n  weekDayFormatter?: (dayIndex: number) => string;\n  showNearMonthDays?: boolean;\n  showWeekNumbers?: boolean;\n  firstDayOfWeek?: WeekDays;\n  format?: string;\n  allowMultiSelect?: boolean;\n  monthFormat?: string;\n  monthFormatter?: (month: Dayjs) => string;\n  enableMonthSelector?: boolean;\n  yearFormat?: string;\n  yearFormatter?: (year: Dayjs) => string;\n  dayBtnFormat?: string;\n  dayBtnFormatter?: (day: Dayjs) => string;\n  dayBtnCssClassCallback?: (day: Dayjs) => string;\n  monthBtnFormat?: string;\n  monthBtnFormatter?: (day: Dayjs) => string;\n  monthBtnCssClassCallback?: (day: Dayjs) => string;\n  multipleYearsNavigateBy?: number;\n  showMultipleYearsNavigation?: boolean;\n  returnedValueType?: ECalendarValue;\n  showGoToCurrent?: boolean;\n  unSelectOnClick?: boolean;\n  numOfMonthRows?: number;\n}\n\nexport interface IDayCalendarConfig extends IConfig,\n                                            ICalendar {\n}\n\nexport interface IDayCalendarConfigInternal extends IConfig,\n                                                    ICalendarInternal {\n}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "IConfig",
                "ICalendarInternal"
            ]
        },
        {
            "name": "IDayEvent",
            "id": "interface-IDayEvent-0ad0b12023fb4c90ccaa6476c5aa880750cf31e41f7c6f43a134c00f67cb2ce6ccfdd174d7644e06351491a0fdd2490cf504b8fade621a3554eeb3ef445d3104",
            "file": "src/app/components/ng2datepickercopy/lib/day-calendar/day.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {IDate} from '../common/models/date.model';\n\nexport interface IDay extends IDate {\n  currentMonth?: boolean;\n  prevMonth?: boolean;\n  nextMonth?: boolean;\n  currentDay?: boolean;\n  disabled?: boolean;\n}\n\nexport interface IDayEvent {\n  day: IDay;\n  event: MouseEvent;\n}\n",
            "properties": [
                {
                    "name": "day",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDay",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "event",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MouseEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IDayTimeCalendarConfig",
            "id": "interface-IDayTimeCalendarConfig-ee504964d2d45eaa1f4f09d29d3543692bdf265cc433f5ee5ab396a968dc298a9355bc4c15e0382219802cd60c4b4054d66aeab9be2a1ec8b6dc043919d89086",
            "file": "src/app/components/ng2datepickercopy/lib/day-time-calendar/day-time-calendar-config.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {ITimeSelectConfig, ITimeSelectConfigInternal} from '../time-select/time-select-config.model';\nimport {IDayCalendarConfig, IDayCalendarConfigInternal} from '../day-calendar/day-calendar-config.model';\n\nexport interface IDayTimeCalendarConfig extends ITimeSelectConfig, IDayCalendarConfig {\n}\n\nexport interface IDayTimeCalendarConfigInternal extends ITimeSelectConfigInternal, IDayCalendarConfigInternal {\n}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "ITimeSelectConfig",
                "IDayCalendarConfig"
            ]
        },
        {
            "name": "IDayTimeCalendarConfigInternal",
            "id": "interface-IDayTimeCalendarConfigInternal-ee504964d2d45eaa1f4f09d29d3543692bdf265cc433f5ee5ab396a968dc298a9355bc4c15e0382219802cd60c4b4054d66aeab9be2a1ec8b6dc043919d89086",
            "file": "src/app/components/ng2datepickercopy/lib/day-time-calendar/day-time-calendar-config.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {ITimeSelectConfig, ITimeSelectConfigInternal} from '../time-select/time-select-config.model';\nimport {IDayCalendarConfig, IDayCalendarConfigInternal} from '../day-calendar/day-calendar-config.model';\n\nexport interface IDayTimeCalendarConfig extends ITimeSelectConfig, IDayCalendarConfig {\n}\n\nexport interface IDayTimeCalendarConfigInternal extends ITimeSelectConfigInternal, IDayCalendarConfigInternal {\n}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "ITimeSelectConfigInternal",
                "IDayCalendarConfigInternal"
            ]
        },
        {
            "name": "IDpDayPickerApi",
            "id": "interface-IDpDayPickerApi-4c09147f46aa2239c94c57efb25144507c8a38afe9c00a85958e422630b6ced97de73f9d81415446ecb3d5da2cfc3737e30655c3ad529c0425b4c325e32427bc",
            "file": "src/app/components/ng2datepickercopy/lib/date-picker/date-picker.api.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {SingleCalendarValue} from '../common/types/single-calendar-value';\n\nexport interface IDpDayPickerApi {\n  open: () => void;\n  close: () => void;\n  moveCalendarTo: (date: SingleCalendarValue) => void;\n}\n",
            "properties": [
                {
                    "name": "close",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "moveCalendarTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IGenCalendarParams",
            "id": "interface-IGenCalendarParams-cae1f71926d8bfe0fbd22f9d0de6f0377fd58c6078db69ed643c3438ee9d6f88fb4a0f1b40e105b1ea99853ae37d927895c1cca38cc06f62f6291a4a7ddd8f3e",
            "file": "src/app/components/ng2datepickercopy/lib/year-calendar/year-calendar.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IGenCalendarParams<T> {\r\n  startDate: Dayjs;\r\n  numOfRows: number;\r\n  numOfCells: number;\r\n  isDisabledCb: (date: Dayjs, config: T) => boolean;\r\n  getBtnTextCb: (config: T, date: Dayjs) => string;\r\n  selected: Dayjs[];\r\n  config: T;\r\n  granularity: 'year' | 'month';\r\n}\r\n\r\nexport interface IDateCell {\r\n  date: Dayjs;\r\n  selected: boolean;\r\n  current: boolean;\r\n  disabled: boolean\r\n  text: string;\r\n}\r\n\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  HostBinding,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Output,\r\n  SimpleChange,\r\n  SimpleChanges,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {\r\n  ControlValueAccessor,\r\n  FormControl,\r\n  NG_VALIDATORS,\r\n  NG_VALUE_ACCESSOR,\r\n  ValidationErrors,\r\n  Validator\r\n} from '@angular/forms';\r\nimport dayjs, {Dayjs} from 'dayjs';\r\nimport {INavEvent} from '../common/models/navigation-event.model';\r\nimport {DateValidator} from '../common/types/validator.type';\r\nimport {IYearCalendarConfig, IYearCalendarConfigInternal} from './year-calendar-config';\r\nimport {YearCalendarService} from './year-calendar.service';\r\nimport {UtilsService} from '../common/services/utils/utils.service';\r\nimport { CalendarValue, ECalendarValue, SingleCalendarValue } from '../public-api';\r\nimport { CalendarNavComponent } from '../calendar-nav/calendar-nav.component';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'dp-year-calendar',\r\n  templateUrl: './year-calendar.component.html',\r\n  styleUrls: ['./year-calendar.component.less'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  standalone: true,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  imports: [CalendarNavComponent, CommonModule],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => YearCalendarComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => YearCalendarComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class YearCalendarComponent implements OnInit, OnChanges, ControlValueAccessor, Validator {\r\n\r\n  @Input() config!: IYearCalendarConfig;\r\n  @Input() displayDate!: Dayjs;\r\n  @Input() minDate!: Dayjs;\r\n  @Input() maxDate!: Dayjs;\r\n  @HostBinding('class') @Input() theme!: string;\r\n  @Output() onSelect: EventEmitter<IDateCell> = new EventEmitter();\r\n  @Output() onNavHeaderBtnClick: EventEmitter<null> = new EventEmitter();\r\n  @Output() onGoToCurrent: EventEmitter<void> = new EventEmitter();\r\n  @Output() onLeftNav: EventEmitter<INavEvent> = new EventEmitter();\r\n  @Output() onRightNav: EventEmitter<INavEvent> = new EventEmitter();\r\n  @Output() onLeftSecondaryNav: EventEmitter<INavEvent> = new EventEmitter();\r\n  @Output() onRightSecondaryNav: EventEmitter<INavEvent> = new EventEmitter();\r\n  isInited: boolean = false;\r\n  componentConfig!: IYearCalendarConfigInternal;\r\n  yearMonths!: IDateCell[][];\r\n  startYear: number = 2016;\r\n  inputValue!: CalendarValue;\r\n  inputValueType!: ECalendarValue;\r\n  validateFn!: DateValidator;\r\n  _shouldShowCurrent: boolean = true;\r\n  navLabel!: string;\r\n  showLeftNav!: boolean;\r\n  showRightNav!: boolean;\r\n  api = {\r\n    toggleCalendar: this.toggleCalendarMode.bind(this),\r\n    moveCalendarTo: this.moveCalendarTo.bind(this)\r\n  };\r\n\r\n  _selected!: Dayjs[];\r\n  _currentDateView!: Dayjs;\r\n\r\n  get selected(): Dayjs[] {\r\n    return this._selected;\r\n  }\r\n\r\n  set selected(selected: Dayjs[]) {\r\n    this._selected = selected;\r\n    this.onChangeCallback(this.processOnChangeCallback(selected));\r\n  }\r\n\r\n  get currentDateView(): Dayjs {\r\n    return this._currentDateView;\r\n  }\r\n\r\n    convertToMoment(date: SingleCalendarValue, format: string): Dayjs | null {\r\n    if (!date) {\r\n      return null;\r\n    } else if (typeof date === 'string') {\r\n      return dayjs(date, format);\r\n    } else {\r\n      return date.clone();\r\n    }\r\n  }\r\n\r\n  set currentDateView(current: Dayjs) {\r\n    this._currentDateView = current.clone();\r\n    // Initial range: 2016-2039\r\n    this.startYear =  this.currentDateView.year();\r\n    this.updateYearRange();\r\n    this.showLeftNav = this.yearCalendarService.shouldShowLeft(this.componentConfig.min, this._currentDateView);\r\n    this.showRightNav = this.yearCalendarService.shouldShowRight(this.componentConfig.max, this.currentDateView);\r\n  }\r\n\r\n  updateYearRange() {\r\n    // Set startYear based on currentDateView.year()\r\n    this.startYear = this.currentDateView.year();\r\n    const years: IDateCell[] = [];\r\n    const currentYear = dayjs().year();\r\n    for (let y = this.startYear; y < this.startYear + 24; y++) {\r\n      const date = dayjs(`${y}-01-01`);\r\n      years.push({\r\n        date,\r\n        selected: false,\r\n        current: date.year() === currentYear,\r\n        disabled: false,\r\n        text: date.format(this.componentConfig.yearBtnFormat ?? 'YYYY'),\r\n      });\r\n    }\r\n    this.yearMonths = [];\r\n    for (let i = 0; i < years.length; i += 6) {\r\n      this.yearMonths.push(years.slice(i, i + 6));\r\n    }\r\n    this.navLabel = `${this.startYear} - ${this.startYear + 23}`;\r\n  }\r\n\r\n  constructor(private readonly cd: ChangeDetectorRef,\r\n              private readonly yearCalendarService: YearCalendarService,\r\n              private readonly utilsService: UtilsService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.isInited = true;\r\n    this.init();\r\n    this.initValidators();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (this.isInited) {\r\n      const {minDate, maxDate, config} = changes;\r\n\r\n      this.handleConfigChange(config);\r\n      this.init();\r\n\r\n      if (minDate || maxDate) {\r\n        this.initValidators();\r\n      }\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onChangeCallback = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n  }\r\n\r\n  validate(formControl: FormControl): ValidationErrors | any {\r\n    if (this.minDate || this.maxDate) {\r\n      return this.validateFn(formControl.value);\r\n    } else {\r\n      return () => null;\r\n    }\r\n  }\r\n\r\n  writeValue(value: CalendarValue): void {\r\n    this.inputValue = value;\r\n    if (value) {\r\n      this.selected = this.utilsService.convertToDayjsArray(value, this.componentConfig);\r\n      // Set currentDateView to first selected value or displayDate\r\n      if (this.selected.length > 0) {\r\n        this.currentDateView = this.selected[0].clone();\r\n      } else if (this.displayDate) {\r\n        this.currentDateView = this.displayDate.clone();\r\n      }\r\n      this.startYear = this.currentDateView.year();\r\n    } else {\r\n      this.selected = [];\r\n      if (this.displayDate) {\r\n        this.currentDateView = this.displayDate.clone();\r\n        this.startYear = this.currentDateView.year();\r\n      }\r\n    }\r\n    this.updateYearRange();\r\n    this.inputValueType = this.utilsService.getInputType(this.inputValue, this.componentConfig.allowMultiSelect ?? false);\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  onChangeCallback(_: any): void {\r\n  }\r\n\r\n  processOnChangeCallback(value: Dayjs[]): CalendarValue {\r\n    return this.utilsService.convertFromDayjsArray(\r\n      this.componentConfig.format ?? '',\r\n      value,\r\n      this.componentConfig.returnedValueType || this.inputValueType\r\n    );\r\n  }\r\n\r\n\r\n  // todo:: add unit test\r\n  convertFromMomentArray(format: string,\r\n                         value: Dayjs[],\r\n                         convertTo: ECalendarValue): CalendarValue {\r\n    switch (convertTo) {\r\n      case (ECalendarValue.String):\r\n        return value[0] && value[0].format(format);\r\n      case (ECalendarValue.StringArr):\r\n        return value.filter(Boolean).map(v => v.format(format));\r\n      case (ECalendarValue.Dayjs):\r\n        return value[0] ? value[0].clone() : value[0];\r\n      case (ECalendarValue.DayjsArr):\r\n        return value ? value.map(v => v.clone()) : value;\r\n      default:\r\n        return value;\r\n    }\r\n  }\r\n\r\n  goToCurrent(): void {\r\n    this.currentDateView = dayjs();\r\n    this.onGoToCurrent.emit();\r\n  }\r\n\r\n  onLeftNavClick() {\r\n  const from = this.currentDateView.clone();\r\n  // Move currentDateView 24 years back and update startYear accordingly\r\n  this.currentDateView = this.currentDateView.subtract(24, 'year');\r\n  this.startYear = this.currentDateView.year();\r\n  this.updateYearRange();\r\n  this.onLeftNav.emit({from, to: this.currentDateView.clone()});\r\n  }\r\n\r\n  onRightNavClick(): void {\r\n  const from = this.currentDateView.clone();\r\n  // Move currentDateView 24 years forward and update startYear accordingly\r\n  this.currentDateView = this.currentDateView.add(24, 'year');\r\n  this.startYear = this.currentDateView.year();\r\n  this.updateYearRange();\r\n  this.onRightNav.emit({from, to: this.currentDateView.clone()});\r\n  }\r\n\r\n  shouldShowCurrent(): boolean {\r\n    return this.utilsService.shouldShowCurrent(\r\n      this.componentConfig.showGoToCurrent ?? false,\r\n      'month',\r\n      this.componentConfig.min ?? dayjs(),\r\n      this.componentConfig.max ?? dayjs()\r\n    );\r\n  }\r\n\r\n  yearClicked(year: IDateCell): void {\r\n    if (year.selected && !this.componentConfig.unSelectOnClick) {\r\n      return;\r\n    }\r\n\r\n    this.selected = this.utilsService\r\n      .updateSelected(this.componentConfig.allowMultiSelect ?? false, this.selected, year, 'year');\r\n    this.yearMonths = this.yearCalendarService\r\n      .generateCalendar(this.componentConfig, this.currentDateView, this.selected);\r\n    this.onSelect.emit(year);\r\n  }\r\n\r\n  getYearBtnCssClass(year: IDateCell): {[klass: string]: boolean} {\r\n    const cssClass: {[klass: string]: boolean} = {\r\n      'dp-selected': year.selected,\r\n      'dp-current-year': year.current\r\n    };\r\n    const customCssClass: string = this.yearCalendarService.getYearBtnCssClass(this.componentConfig, year.date);\r\n\r\n    if (customCssClass) {\r\n      cssClass[customCssClass] = true;\r\n    }\r\n\r\n    return cssClass;\r\n  }\r\n\r\n  private init(): void {\r\n    this.componentConfig = this.yearCalendarService.getConfig(this.config);\r\n    this.selected = this.selected || [];\r\n    this.currentDateView = this.displayDate\r\n      ? this.displayDate\r\n      : this.utilsService\r\n        .getDefaultDisplayDate(\r\n          this.currentDateView,\r\n          this.selected,\r\n          this.componentConfig.allowMultiSelect ?? false,\r\n          this.componentConfig.min ?? dayjs()\r\n        );\r\n    this.inputValueType = this.utilsService.getInputType(this.inputValue, this.componentConfig.allowMultiSelect ?? false);\r\n    this._shouldShowCurrent = this.shouldShowCurrent();\r\n  }\r\n\r\n  private initValidators(): void {\r\n    this.validateFn = this.utilsService.createValidator(\r\n      {minDate: this.minDate, maxDate: this.maxDate},\r\n      this.componentConfig.format ?? '',\r\n      'year'\r\n    );\r\n    this.onChangeCallback(this.processOnChangeCallback(this.selected));\r\n  }\r\n\r\n  private toggleCalendarMode(): void {\r\n    this.onNavHeaderBtnClick.emit();\r\n  }\r\n\r\n  private moveCalendarTo(to: SingleCalendarValue): void {\r\n    if (to) {\r\n      this.currentDateView = this.utilsService.convertToDayjs(to, this.componentConfig.format ?? '');\r\n      this.cd.markForCheck();\r\n    }\r\n  }\r\n\r\n  private handleConfigChange(config: SimpleChange): void {\r\n    if (config) {\r\n      const prevConf: IYearCalendarConfigInternal = this.yearCalendarService.getConfig(config.previousValue);\r\n      const currentConf: IYearCalendarConfigInternal = this.yearCalendarService.getConfig(config.currentValue);\r\n\r\n      if (this.utilsService.shouldResetCurrentView(prevConf, currentConf)) {\r\n        this._currentDateView = dayjs();\r\n      }\r\n\r\n      // Use locale from the original config objects, not the internal config\r\n      const prevLocale = config.previousValue?.locale;\r\n      const currentLocale = config.currentValue?.locale;\r\n\r\n      if (prevLocale !== currentLocale) {\r\n        if (this.currentDateView && currentLocale) {\r\n          this.currentDateView = this.currentDateView.locale(currentLocale);\r\n        }\r\n\r\n        if (currentLocale) {\r\n          (this.selected || []).forEach((d) => d.locale(currentLocale));\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "getBtnTextCb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "granularity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"year\" | \"month\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "isDisabledCb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "numOfCells",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "numOfRows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dayjs[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "startDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dayjs",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IMonth",
            "id": "interface-IMonth-85da296dfc95afc8007fb22ff67169c98ee912a0750f7e582c1bb60b56cdaf5725b5135644f22a2a7e51586406a5adaa033aa989965677707f92841ff43cf637",
            "file": "src/app/components/ng2datepickercopy/lib/month-calendar/month.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {IDate} from '../common/models/date.model';\n\nexport interface IMonth extends IDate {\n  currentMonth: boolean;\n  disabled: boolean;\n  text: string;\n}\n",
            "properties": [
                {
                    "name": "currentMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "IDate"
            ]
        },
        {
            "name": "IMonthCalendarConfig",
            "id": "interface-IMonthCalendarConfig-a794e6826c2dd1a18e1ffbbf95cd717aa6d5dc84b9c2de83295b5b0bc40719546b69024344c2e5d4afc45d4042f7e193012d6c93644466363856cad4079d19d6",
            "file": "src/app/components/ng2datepickercopy/lib/month-calendar/month-calendar-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Dayjs} from 'dayjs';\nimport {ICalendar, ICalendarInternal} from '../common/models/calendar.model';\nimport {ECalendarValue} from '../common/types/calendar-value-enum';\n\nexport interface IConfig {\n  isMonthDisabledCallback?: (date: Dayjs) => boolean;\n  allowMultiSelect?: boolean;\n  yearFormat?: string;\n  yearFormatter?: (month: Dayjs) => string;\n  format?: string;\n  isNavHeaderBtnClickable?: boolean;\n  monthBtnFormat?: string;\n  monthBtnFormatter?: (day: Dayjs) => string;\n  numOfMonthRows?: number;\n  monthBtnCssClassCallback?: (day: Dayjs) => string;\n  multipleYearsNavigateBy?: number;\n  showMultipleYearsNavigation?: boolean;\n  returnedValueType?: ECalendarValue;\n  showGoToCurrent?: boolean;\n  unSelectOnClick?: boolean;\n}\n\nexport interface IMonthCalendarConfig extends IConfig,\n                                              ICalendar {\n}\n\nexport interface IMonthCalendarConfigInternal extends IConfig,\n                                                      ICalendarInternal {\n}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "IConfig",
                "ICalendar"
            ]
        },
        {
            "name": "IMonthCalendarConfigInternal",
            "id": "interface-IMonthCalendarConfigInternal-a794e6826c2dd1a18e1ffbbf95cd717aa6d5dc84b9c2de83295b5b0bc40719546b69024344c2e5d4afc45d4042f7e193012d6c93644466363856cad4079d19d6",
            "file": "src/app/components/ng2datepickercopy/lib/month-calendar/month-calendar-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Dayjs} from 'dayjs';\nimport {ICalendar, ICalendarInternal} from '../common/models/calendar.model';\nimport {ECalendarValue} from '../common/types/calendar-value-enum';\n\nexport interface IConfig {\n  isMonthDisabledCallback?: (date: Dayjs) => boolean;\n  allowMultiSelect?: boolean;\n  yearFormat?: string;\n  yearFormatter?: (month: Dayjs) => string;\n  format?: string;\n  isNavHeaderBtnClickable?: boolean;\n  monthBtnFormat?: string;\n  monthBtnFormatter?: (day: Dayjs) => string;\n  numOfMonthRows?: number;\n  monthBtnCssClassCallback?: (day: Dayjs) => string;\n  multipleYearsNavigateBy?: number;\n  showMultipleYearsNavigation?: boolean;\n  returnedValueType?: ECalendarValue;\n  showGoToCurrent?: boolean;\n  unSelectOnClick?: boolean;\n}\n\nexport interface IMonthCalendarConfig extends IConfig,\n                                              ICalendar {\n}\n\nexport interface IMonthCalendarConfigInternal extends IConfig,\n                                                      ICalendarInternal {\n}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "IConfig",
                "ICalendarInternal"
            ]
        },
        {
            "name": "INavEvent",
            "id": "interface-INavEvent-e255ddd1daf83cc1ffcaea74c69935e80a5e2b88c3ec743876c78461f7dec68dfc94b2323f572de24f1ce19be55e01e357769bb593cddd38435533f28f970e02",
            "file": "src/app/components/ng2datepickercopy/lib/common/models/navigation-event.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Dayjs} from 'dayjs';\n\nexport interface INavEvent {\n  from: Dayjs;\n  to: Dayjs;\n}\n",
            "properties": [
                {
                    "name": "from",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dayjs",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "to",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dayjs",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ISelectionEvent",
            "id": "interface-ISelectionEvent-ec30793622ca9ad6c82a41028c874a7ebb41a1f7299f65e36fb0d9d89db3f9e2e4c80e577f2f8cad0803df0c9419a5fe80b631a373550d6b97a1150c74e5b143",
            "file": "src/app/components/ng2datepickercopy/lib/common/types/selection-event.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {SingleCalendarValue} from './single-calendar-value';\nimport {UnitType} from 'dayjs';\nimport {SelectEvent} from './selection-event.enum';\n\nexport interface ISelectionEvent {\n  date: SingleCalendarValue;\n  granularity: UnitType;\n  type: SelectEvent;\n}\n",
            "properties": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SingleCalendarValue",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "granularity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UnitType",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ITimeSelectConfig",
            "id": "interface-ITimeSelectConfig-ca5f55aa590a67435d6b2977e5f27f0257659638e89aea1ea023af91c23e7b1ab46eec0bcb4d4bada283291e19c13a43e97cda575edc1ab42f6c36022e769d72",
            "file": "src/app/components/ng2datepickercopy/lib/time-select/time-select-config.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Dayjs} from 'dayjs';\nimport {ICalendar, ICalendarInternal} from '../common/models/calendar.model';\nimport {ECalendarValue} from '../common/types/calendar-value-enum';\n\ninterface IConfig {\n  hours12Format?: string;\n  hours24Format?: string;\n  maxTime?: Dayjs;\n  meridiemFormat?: string;\n  minTime?: Dayjs;\n  minutesFormat?: string;\n  minutesInterval?: number;\n  secondsFormat?: string;\n  secondsInterval?: number;\n  showSeconds?: boolean;\n  showTwentyFourHours?: boolean;\n  timeSeparator?: string;\n  returnedValueType?: ECalendarValue;\n}\n\nexport interface ITimeSelectConfig extends IConfig, ICalendar {\n}\n\nexport interface ITimeSelectConfigInternal extends IConfig,\n                                                   ICalendarInternal {\n}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "IConfig",
                "ICalendar"
            ]
        },
        {
            "name": "ITimeSelectConfigInternal",
            "id": "interface-ITimeSelectConfigInternal-ca5f55aa590a67435d6b2977e5f27f0257659638e89aea1ea023af91c23e7b1ab46eec0bcb4d4bada283291e19c13a43e97cda575edc1ab42f6c36022e769d72",
            "file": "src/app/components/ng2datepickercopy/lib/time-select/time-select-config.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Dayjs} from 'dayjs';\nimport {ICalendar, ICalendarInternal} from '../common/models/calendar.model';\nimport {ECalendarValue} from '../common/types/calendar-value-enum';\n\ninterface IConfig {\n  hours12Format?: string;\n  hours24Format?: string;\n  maxTime?: Dayjs;\n  meridiemFormat?: string;\n  minTime?: Dayjs;\n  minutesFormat?: string;\n  minutesInterval?: number;\n  secondsFormat?: string;\n  secondsInterval?: number;\n  showSeconds?: boolean;\n  showTwentyFourHours?: boolean;\n  timeSeparator?: string;\n  returnedValueType?: ECalendarValue;\n}\n\nexport interface ITimeSelectConfig extends IConfig, ICalendar {\n}\n\nexport interface ITimeSelectConfigInternal extends IConfig,\n                                                   ICalendarInternal {\n}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "IConfig",
                "ICalendarInternal"
            ]
        },
        {
            "name": "IYearCalendarConfig",
            "id": "interface-IYearCalendarConfig-3d7fd022b7c7f5f3b1367c966a1083ac6d10cd7cb83d7cfbca19cc79bbdd62198faffd2371feef11613672ad3e01674d6cf2dd3cb8b2d63d79b2ca7ba19f2cbf",
            "file": "src/app/components/ng2datepickercopy/lib/year-calendar/year-calendar-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Dayjs} from 'dayjs';\r\nimport {ICalendar, ICalendarInternal} from '../common/models/calendar.model';\r\nimport { ECalendarValue } from '../public-api';\r\n\r\nexport interface IConfig {\r\n  isYearDisabledCallback?: (date: Dayjs) => boolean;\r\n  isNavHeaderBtnClickable?: boolean;\r\n  allowMultiSelect?: boolean;\r\n  yearFormat?: string;\r\n  yearFormatter?: (year: Dayjs) => string;\r\n  format?: string;\r\n  numOfYearsPerPage: number;\r\n  numOfYearRows?: number;\r\n  yearBtnCssClassCallback?: (year: Dayjs) => string;\r\n  yearBtnFormatter?: (year: Dayjs) => string;\r\n  yearBtnFormat?: string;\r\n  returnedValueType?: ECalendarValue;\r\n  showGoToCurrent?: boolean;\r\n  unSelectOnClick?: boolean;\r\n}\r\n\r\nexport interface IYearCalendarConfig extends IConfig,\r\n                                             ICalendar {\r\n}\r\n\r\nexport interface IYearCalendarConfigInternal extends IConfig,\r\n                                                     ICalendarInternal {\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "IConfig",
                "ICalendar"
            ]
        },
        {
            "name": "IYearCalendarConfigInternal",
            "id": "interface-IYearCalendarConfigInternal-3d7fd022b7c7f5f3b1367c966a1083ac6d10cd7cb83d7cfbca19cc79bbdd62198faffd2371feef11613672ad3e01674d6cf2dd3cb8b2d63d79b2ca7ba19f2cbf",
            "file": "src/app/components/ng2datepickercopy/lib/year-calendar/year-calendar-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Dayjs} from 'dayjs';\r\nimport {ICalendar, ICalendarInternal} from '../common/models/calendar.model';\r\nimport { ECalendarValue } from '../public-api';\r\n\r\nexport interface IConfig {\r\n  isYearDisabledCallback?: (date: Dayjs) => boolean;\r\n  isNavHeaderBtnClickable?: boolean;\r\n  allowMultiSelect?: boolean;\r\n  yearFormat?: string;\r\n  yearFormatter?: (year: Dayjs) => string;\r\n  format?: string;\r\n  numOfYearsPerPage: number;\r\n  numOfYearRows?: number;\r\n  yearBtnCssClassCallback?: (year: Dayjs) => string;\r\n  yearBtnFormatter?: (year: Dayjs) => string;\r\n  yearBtnFormat?: string;\r\n  returnedValueType?: ECalendarValue;\r\n  showGoToCurrent?: boolean;\r\n  unSelectOnClick?: boolean;\r\n}\r\n\r\nexport interface IYearCalendarConfig extends IConfig,\r\n                                             ICalendar {\r\n}\r\n\r\nexport interface IYearCalendarConfigInternal extends IConfig,\r\n                                                     ICalendarInternal {\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": [
                "IConfig",
                "ICalendarInternal"
            ]
        },
        {
            "name": "Pokemon",
            "id": "interface-Pokemon-8b14352500ea1e94e1a86e6611dd3efa3b617c55072d784650166ca41358c88f028da408ab404210a03d99393073f831e08adc7da647e636cc922df7b7551d3e",
            "file": "src/app/components/fetch-data/fetch-data.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, inject, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PokemonService } from './pokemon.service';\r\n\r\ninterface Pokemon {\r\n  name: string;\r\n  sprites?: {\r\n    front_default: string;\r\n  };\r\n  image: string;\r\n  id: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-fetch-data',\r\n  templateUrl: './fetch-data.component.html',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n})\r\nexport class FetchDataComponent implements OnInit {\r\n  pokemonService = inject(PokemonService);\r\n\r\n  ngOnInit() {\r\n    this.fetchPokemons();\r\n  }\r\n\r\n  fetchPokemons() {\r\n    this.pokemonService.setPokemonsLoadingState();\r\n\r\n    this.pokemonService.getPokemons().subscribe({\r\n      next: (response) => {\r\n        this.pokemonService.setPokemonsSuccessState(response.results);\r\n      },\r\n      error: (error) => {\r\n        this.pokemonService.setPokemonsErrorState(error);\r\n      },\r\n    });\r\n  }\r\n\r\n  getPokemonDetails(pokemon: Pokemon) {\r\n    this.pokemonService.setPokemonsSuccessState([]);\r\n    this.pokemonService.setPokemonDetailLoadingState();\r\n\r\n    this.pokemonService.getPokemonDetails(pokemon).subscribe({\r\n      next: (response) => {\r\n        if (response.results) {\r\n          this.pokemonService.setPokemonDetailSuccessState(response.results);\r\n        } else {\r\n          this.pokemonService.setPokemonDetailErrorState(\r\n            new Error('Pokemon details not found')\r\n          );\r\n        }\r\n      },\r\n      error: (err) => {\r\n        this.pokemonService.setPokemonDetailErrorState(err);\r\n      },\r\n    });\r\n  }\r\n\r\n  goBackToPokemonsList() {\r\n    this.pokemonService.pokemonDetail.set({\r\n      results: null,\r\n      error: undefined,\r\n      isLoading: false,\r\n    });\r\n    this.fetchPokemons();\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "sprites",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Pokemon",
            "id": "interface-Pokemon-8b2d620fc835693e6eba504112d6f11513429505cabda6ded6b121086a5fc06d1676833a2fa71f6d14aa3bfd07971c7f82fc9e5e6caed674c91f624f85c6b45d-1",
            "file": "src/app/components/fetch-data/pokemon.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, Signal, signal } from '@angular/core';\r\nimport { Observable, forkJoin } from 'rxjs';\r\nimport { catchError, delay, map, mergeMap } from 'rxjs/operators';\r\nimport { ajax } from 'rxjs/ajax';\r\n\r\ninterface Pokemon {\r\n  name: string;\r\n  sprites?: {\r\n    front_default: string;\r\n  };\r\n  image: string;\r\n  id: number;\r\n}\r\n\r\ninterface HttpResponse<T> {\r\n  results: T;\r\n  error: string | undefined;\r\n  isLoading: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PokemonService {\r\n  url = 'https://pokeapi.co/api/v2/pokemon?offset=0&limit=5';\r\n\r\n  pokemons = signal<HttpResponse<Pokemon[]>>({\r\n    results: [],\r\n    error: undefined,\r\n    isLoading: true,\r\n  });\r\n\r\n  pokemonDetail = signal<HttpResponse<Pokemon | null>>({\r\n    results: null,\r\n    error: undefined,\r\n    isLoading: false,\r\n  });\r\n\r\n  fetchData<T>(url: string): Observable<T> {\r\n    return ajax.getJSON<T>(url).pipe(delay(2000));\r\n  }\r\n\r\n  mapPokemons(pokemons: Pokemon[]): Pokemon[] {\r\n    return pokemons.map((pokemon) => ({\r\n      name: pokemon.name,\r\n      image: pokemon.sprites?.front_default ?? '',\r\n      id: pokemon.id,\r\n    }));\r\n  }\r\n\r\n  getPokemons(): Observable<HttpResponse<Pokemon[]>> {\r\n    return this.fetchData<HttpResponse<Pokemon[]>>(this.url).pipe(\r\n      mergeMap((data) =>\r\n        forkJoin(\r\n          data.results.map((_, index) =>\r\n            this.fetchData<Pokemon>(\r\n              `https://pokeapi.co/api/v2/pokemon/${index + 1}/`\r\n            )\r\n          )\r\n        )\r\n      ),\r\n      map((pokemons) => ({\r\n        results: this.mapPokemons(pokemons),\r\n        error: undefined,\r\n        isLoading: false,\r\n      })),\r\n      catchError((error) => {\r\n        return [{ results: [], error: '' + error.message, isLoading: false }];\r\n      })\r\n    );\r\n  }\r\n\r\n  getPokemonDetails(\r\n    pokemon: Pokemon\r\n  ): Observable<HttpResponse<Pokemon | null>> {\r\n    return this.fetchData<Pokemon>(\r\n      `https://pokeapi.co/api/v2/pokemon/${pokemon.id}/`\r\n    ).pipe(\r\n      map((data) => ({\r\n        results: {\r\n          name: data.name,\r\n          image: data.sprites?.front_default ?? '',\r\n          id: data.id,\r\n        },\r\n        error: undefined,\r\n        isLoading: false,\r\n      })),\r\n      catchError((error) => {\r\n        return [\r\n          {\r\n            results: null,\r\n            error: 'Failed to fetch Pokémon details',\r\n            isLoading: false,\r\n          },\r\n        ];\r\n      })\r\n    );\r\n  }\r\n\r\n  setPokemonsLoadingState() {\r\n    this.pokemons.set({\r\n      results: this.pokemons().results,\r\n      error: undefined,\r\n      isLoading: true,\r\n    });\r\n  }\r\n\r\n  setPokemonsSuccessState(results: Pokemon[]) {\r\n    this.pokemons.set({\r\n      results,\r\n      error: undefined,\r\n      isLoading: false,\r\n    });\r\n  }\r\n\r\n  setPokemonsErrorState(error: any) {\r\n    this.pokemons.set({\r\n      results: this.pokemons().results,\r\n      error: '' + error.message,\r\n      isLoading: false,\r\n    });\r\n  }\r\n\r\n  setPokemonDetailLoadingState() {\r\n    this.pokemonDetail.set({\r\n      results: this.pokemonDetail().results,\r\n      error: undefined,\r\n      isLoading: true,\r\n    });\r\n  }\r\n\r\n  setPokemonDetailSuccessState(results: Pokemon) {\r\n    this.pokemonDetail.set({\r\n      results,\r\n      error: undefined,\r\n      isLoading: false,\r\n    });\r\n  }\r\n\r\n  setPokemonDetailErrorState(error: any) {\r\n    this.pokemonDetail.set({\r\n      results: this.pokemonDetail().results,\r\n      error: '' + error.message,\r\n      isLoading: false,\r\n    });\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "sprites",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Pokemon-1"
        },
        {
            "name": "StyleConfig",
            "id": "interface-StyleConfig-8a755d09c4b5481619e070b30fdbe71e8c6d1015aa46491c4ab45270355ee04fcc61ee6b8c5fb62eaf5bdcb1a63750ef019804720e9e746f023caac2aeff219e",
            "file": "src/app/directives/text-input-style.directives.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n  Directive,\r\n  ElementRef,\r\n  Renderer2,\r\n  HostListener,\r\n  Input,\r\n  OnChanges,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\n\r\ninterface StyleConfig {\r\n  borderColor?: string;\r\n  focusBorderColor?: string;\r\n  padding?: string;\r\n  borderRadius?: string;\r\n}\r\n\r\n@Directive({\r\n  selector: '[appCustomInputStyle]',\r\n})\r\nexport class CustomInputStyleDirective implements OnChanges {\r\n  @Input('appCustomInputStyle') styleConfig: StyleConfig = {\r\n    borderColor: '#ccc',\r\n    focusBorderColor: '#007bff',\r\n    padding: '10px',\r\n    borderRadius: '4px',\r\n  };\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2) {\r\n    this.setStyle();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes) {\r\n      this.setStyle();\r\n    }\r\n  }\r\n\r\n  private setStyle() {\r\n    const { borderColor, padding, borderRadius } = this.styleConfig;\r\n    this.renderer.setStyle(\r\n      this.el.nativeElement,\r\n      'border',\r\n      `1px solid ${borderColor}`\r\n    );\r\n    this.renderer.setStyle(this.el.nativeElement, 'padding', padding);\r\n    this.renderer.setStyle(this.el.nativeElement, 'borderRadius', borderRadius);\r\n    this.renderer.setStyle(this.el.nativeElement, 'outline', 'none');\r\n    this.renderer.setStyle(\r\n      this.el.nativeElement,\r\n      'transition',\r\n      'border-color 0.3s'\r\n    );\r\n  }\r\n\r\n  @HostListener('focus') onFocus() {\r\n    this.renderer.setStyle(\r\n      this.el.nativeElement,\r\n      'borderColor',\r\n      this.styleConfig.focusBorderColor\r\n    );\r\n  }\r\n\r\n  @HostListener('blur') onBlur() {\r\n    this.renderer.setStyle(\r\n      this.el.nativeElement,\r\n      'borderColor',\r\n      this.styleConfig.borderColor\r\n    );\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "borderColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "borderRadius",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "focusBorderColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "padding",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Task",
            "id": "interface-Task-8ff60bd7d3ecbb5aa8efccc7fb6337f67dfc955c373dbddc9acacb8b849212756c7f7013057b1fbb90340c0e854017c622fc799af461c332cf1ce3be183dff9e",
            "file": "src/app/models/task.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Task {\r\n    id?: string;\r\n    title?: string;\r\n    state?: string;\r\n  }",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "DatePickerService",
            "id": "injectable-DatePickerService-b713601fb513dc059cace2a00d4ad63695bf1a56984dfe54c6d2011e82c47c8572563b3a8e4a25b3c8f535d63f7846b5ce04ac098c9edad256e57562d06062a3",
            "file": "src/app/components/ng2datepickercopy/lib/date-picker/date-picker.service.ts",
            "properties": [
                {
                    "name": "defaultConfig",
                    "defaultValue": "{\r\n    closeOnSelect: true,\r\n    closeOnSelectDelay: 100,\r\n    closeOnEnter: true,\r\n    format: 'DD-MM-YYYY',\r\n    openOnFocus: true,\r\n    openOnClick: true,\r\n    onOpenDelay: 0,\r\n    disableKeypress: false,\r\n    showNearMonthDays: true,\r\n    showWeekNumbers: false,\r\n    enableMonthSelector: true,\r\n    showGoToCurrent: true,\r\n    hideOnOutsideClick: true,\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDatePickerConfigInternal",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onPickerClosed",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "convertInputValueToDayjsArray",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "IDatePickerConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Dayjs[]",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "IDatePickerConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getConfig",
                    "args": [
                        {
                            "name": "config",
                            "type": "IDatePickerConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "mode",
                            "type": "CalendarMode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'daytime'"
                        }
                    ],
                    "optional": false,
                    "returnType": "IDatePickerConfigInternal",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "IDatePickerConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "mode",
                            "type": "CalendarMode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'daytime'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDayConfigService",
                    "args": [
                        {
                            "name": "pickerConfig",
                            "type": "IDatePickerConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IDayCalendarConfig",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pickerConfig",
                            "type": "IDatePickerConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDayTimeConfig",
                    "args": [
                        {
                            "name": "pickerConfig",
                            "type": "IDatePickerConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IDayTimeCalendarConfig",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pickerConfig",
                            "type": "IDatePickerConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultFormatByMode",
                    "args": [
                        {
                            "name": "mode",
                            "type": "CalendarMode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "mode",
                            "type": "CalendarMode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOverlayPosition",
                    "args": [
                        {
                            "type": "IDatePickerConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "[] | undefined",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "IDatePickerConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTimeConfig",
                    "args": [
                        {
                            "name": "pickerConfig",
                            "type": "IDatePickerConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ITimeSelectConfig",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pickerConfig",
                            "type": "IDatePickerConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getYearConfigService",
                    "args": [
                        {
                            "name": "pickerConfig",
                            "type": "IDatePickerConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IYearCalendarConfig",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pickerConfig",
                            "type": "IDatePickerConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValidInputDateValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "IDatePickerConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "IDatePickerConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pickerClosed",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {EventEmitter, Injectable} from '@angular/core';\r\nimport {IDatePickerConfig, IDatePickerConfigInternal} from './date-picker-config.model';\r\n\r\nimport {UtilsService} from '../common/services/utils/utils.service';\r\nimport {IDayCalendarConfig} from '../day-calendar/day-calendar-config.model';\r\nimport {TimeSelectService} from '../time-select/time-select.service';\r\nimport {DayTimeCalendarService} from '../day-time-calendar/day-time-calendar.service';\r\nimport {ITimeSelectConfig} from '../time-select/time-select-config.model';\r\nimport {CalendarMode} from '../common/types/calendar-mode';\r\nimport {Dayjs} from 'dayjs';\r\nimport {IDayTimeCalendarConfig} from '../day-time-calendar/day-time-calendar-config.model';\r\nimport {ConnectionPositionPair} from '@angular/cdk/overlay';\r\nimport { IYearCalendarConfig } from '../year-calendar/year-calendar-config';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DatePickerService {\r\n  readonly onPickerClosed: EventEmitter<null> = new EventEmitter();\r\n  private defaultConfig: IDatePickerConfigInternal = {\r\n    closeOnSelect: true,\r\n    closeOnSelectDelay: 100,\r\n    closeOnEnter: true,\r\n    format: 'DD-MM-YYYY',\r\n    openOnFocus: true,\r\n    openOnClick: true,\r\n    onOpenDelay: 0,\r\n    disableKeypress: false,\r\n    showNearMonthDays: true,\r\n    showWeekNumbers: false,\r\n    enableMonthSelector: true,\r\n    showGoToCurrent: true,\r\n    hideOnOutsideClick: true,\r\n  };\r\n\r\n  constructor(private readonly utilsService: UtilsService,\r\n              private readonly timeSelectService: TimeSelectService,\r\n              private readonly daytimeCalendarService: DayTimeCalendarService) {\r\n  }\r\n\r\n  // todo:: add unit tests\r\n  getConfig(config: IDatePickerConfig, mode: CalendarMode = 'daytime'): IDatePickerConfigInternal {\r\n    const _config = <IDatePickerConfigInternal>{\r\n      ...this.defaultConfig,\r\n      format: DatePickerService.getDefaultFormatByMode(mode),\r\n      ...this.utilsService.clearUndefined(config)\r\n    };\r\n\r\n    this.utilsService.convertPropsToDayjs(_config, _config.format ?? 'DD-MM-YYYY', ['min', 'max']);\r\n\r\n    if (config && config.allowMultiSelect && config.closeOnSelect === undefined) {\r\n      _config.closeOnSelect = false;\r\n    }\r\n\r\n    return _config;\r\n  }\r\n\r\n    getYearConfigService(pickerConfig: IDatePickerConfig): IYearCalendarConfig {\r\n    return {\r\n      min: pickerConfig.min,\r\n      max: pickerConfig.max,\r\n      isYearDisabledCallback: pickerConfig.isDayDisabledCallback,\r\n      allowMultiSelect: pickerConfig.allowMultiSelect,\r\n      yearFormat: pickerConfig.yearFormat,\r\n      yearFormatter: pickerConfig.yearFormatter,\r\n      format: pickerConfig.format,\r\n      numOfYearsPerPage: 24,\r\n      numOfYearRows: 4,\r\n      yearBtnFormat: pickerConfig.yearFormat,\r\n      yearBtnFormatter: pickerConfig.yearFormatter,\r\n      yearBtnCssClassCallback: pickerConfig.dayBtnCssClassCallback,\r\n      returnedValueType: pickerConfig.returnedValueType,\r\n      showGoToCurrent: pickerConfig.showGoToCurrent,\r\n      unSelectOnClick: pickerConfig.unSelectOnClick\r\n    };\r\n  }\r\n\r\n  getDayConfigService(pickerConfig: IDatePickerConfig): IDayCalendarConfig {\r\n    return {\r\n      min: pickerConfig.min,\r\n      max: pickerConfig.max,\r\n      isDayDisabledCallback: pickerConfig.isDayDisabledCallback,\r\n      weekDayFormat: pickerConfig.weekDayFormat,\r\n      weekDayFormatter: pickerConfig.weekDayFormatter,\r\n      showNearMonthDays: pickerConfig.showNearMonthDays,\r\n      showWeekNumbers: pickerConfig.showWeekNumbers,\r\n      firstDayOfWeek: pickerConfig.firstDayOfWeek,\r\n      format: pickerConfig.format,\r\n      allowMultiSelect: pickerConfig.allowMultiSelect,\r\n      monthFormat: pickerConfig.monthFormat,\r\n      monthFormatter: pickerConfig.monthFormatter,\r\n      enableMonthSelector: pickerConfig.enableMonthSelector,\r\n      yearFormat: pickerConfig.yearFormat,\r\n      yearFormatter: pickerConfig.yearFormatter,\r\n      dayBtnFormat: pickerConfig.dayBtnFormat,\r\n      dayBtnFormatter: pickerConfig.dayBtnFormatter,\r\n      dayBtnCssClassCallback: pickerConfig.dayBtnCssClassCallback,\r\n      monthBtnFormat: pickerConfig.monthBtnFormat,\r\n      monthBtnFormatter: pickerConfig.monthBtnFormatter,\r\n      monthBtnCssClassCallback: pickerConfig.monthBtnCssClassCallback,\r\n      isMonthDisabledCallback: pickerConfig.isMonthDisabledCallback,\r\n      multipleYearsNavigateBy: pickerConfig.multipleYearsNavigateBy,\r\n      showMultipleYearsNavigation: pickerConfig.showMultipleYearsNavigation,\r\n      returnedValueType: pickerConfig.returnedValueType,\r\n      showGoToCurrent: pickerConfig.showGoToCurrent,\r\n      unSelectOnClick: pickerConfig.unSelectOnClick,\r\n      numOfMonthRows: pickerConfig.numOfMonthRows\r\n    };\r\n  }\r\n\r\n  getDayTimeConfig(pickerConfig: IDatePickerConfig): IDayTimeCalendarConfig {\r\n    return this.daytimeCalendarService.getConfig(pickerConfig);\r\n  }\r\n\r\n  getTimeConfig(pickerConfig: IDatePickerConfig): ITimeSelectConfig {\r\n    return this.timeSelectService.getConfig(pickerConfig);\r\n  }\r\n\r\n  pickerClosed() {\r\n    this.onPickerClosed.emit();\r\n  }\r\n\r\n  // todo:: add unit tests\r\n  isValidInputDateValue(value: string, config: IDatePickerConfig): boolean {\r\n    value = value ? value : '';\r\n    const datesStrArr: string[] = this.utilsService.datesStringToStringArray(value);\r\n\r\n    return datesStrArr.every(date => this.utilsService.isDateValid(date, config.format || 'DD-MM-YYYY'));\r\n  }\r\n\r\n  // todo:: add unit tests\r\n  convertInputValueToDayjsArray(value: string, config: IDatePickerConfig): Dayjs[] {\r\n    value = value ? value : '';\r\n    const datesStrArr: string[] = this.utilsService.datesStringToStringArray(value);\r\n\r\n    return this.utilsService.convertToDayjsArray(datesStrArr, config);\r\n  }\r\n\r\n  getOverlayPosition({drops, opens}: IDatePickerConfig):  ConnectionPositionPair[] | undefined {\r\n    if (!drops && !opens) {\r\n      return undefined;\r\n    }\r\n\r\n    return [{\r\n      originX: opens ? opens === 'left' ? 'start' : 'end' : 'start',\r\n      originY:  drops ? drops === 'up' ? 'top' : 'bottom' : 'bottom',\r\n      overlayX: opens ? opens === 'left' ? 'start' : 'end' : 'start',\r\n      overlayY: drops ? drops === 'up' ? 'bottom' : 'top' : 'top',\r\n    }];\r\n  }\r\n\r\n  private static getDefaultFormatByMode(mode: CalendarMode): string {\r\n    switch (mode) {\r\n      case 'day':\r\n        return 'DD-MM-YYYY';\r\n      case 'daytime':\r\n        return 'DD-MM-YYYY HH:mm:ss';\r\n      case 'time':\r\n        return 'HH:mm:ss';\r\n      case 'month':\r\n        return 'MMM, YYYY';\r\n      case 'year':\r\n        return 'YYYY';\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "timeSelectService",
                        "type": "TimeSelectService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "daytimeCalendarService",
                        "type": "DayTimeCalendarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "timeSelectService",
                        "type": "TimeSelectService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "daytimeCalendarService",
                        "type": "DayTimeCalendarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "DayCalendarService",
            "id": "injectable-DayCalendarService-dcee0bcab0c69af6b063e12d7c48b492b6a249d5debddd1895a6f01098e1cce026c3d1e31ffd3696a1f9781ce8c2c1a8a2d2fe90e62dafa6f9566026dc80bc14",
            "file": "src/app/components/ng2datepickercopy/lib/day-calendar/day-calendar.service.ts",
            "properties": [
                {
                    "name": "DAYS",
                    "defaultValue": "['su', 'mo', 'tu', 'we', 'th', 'fr', 'sa']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "DEFAULT_CONFIG",
                    "defaultValue": "{\n    showNearMonthDays: true,\n    showWeekNumbers: false,\n    firstDayOfWeek: 'su',\n    weekDayFormat: 'ddd',\n    format: 'DD-MM-YYYY',\n    allowMultiSelect: false,\n    monthFormat: 'MMM, YYYY',\n    enableMonthSelector: true,\n    dayBtnFormat: 'DD',\n    unSelectOnClick: true\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDayCalendarConfig",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "generateDaysIndexMap",
                    "args": [
                        {
                            "name": "firstDayOfWeek",
                            "type": "WeekDays",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "firstDayOfWeek",
                            "type": "WeekDays",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateDaysMap",
                    "args": [
                        {
                            "name": "firstDayOfWeek",
                            "type": "WeekDays",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "firstDayOfWeek",
                            "type": "WeekDays",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateMonthArray",
                    "args": [
                        {
                            "name": "config",
                            "type": "IDayCalendarConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "month",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selected",
                            "type": "Dayjs[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "[][]",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "IDayCalendarConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "month",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selected",
                            "type": "Dayjs[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateWeekdays",
                    "args": [
                        {
                            "name": "firstDayOfWeek",
                            "type": "WeekDays",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Dayjs[]",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "firstDayOfWeek",
                            "type": "WeekDays",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getConfig",
                    "args": [
                        {
                            "name": "config",
                            "type": "IDayCalendarConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IDayCalendarConfigInternal",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "IDayCalendarConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDayBtnCssClass",
                    "args": [
                        {
                            "name": "config",
                            "type": "IDayCalendarConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "day",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "IDayCalendarConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "day",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDayBtnText",
                    "args": [
                        {
                            "name": "config",
                            "type": "IDayCalendarConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "day",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "IDayCalendarConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "day",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHeaderLabel",
                    "args": [
                        {
                            "name": "config",
                            "type": "IDayCalendarConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "month",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "IDayCalendarConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "month",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMonthCalendarConfig",
                    "args": [
                        {
                            "name": "componentConfig",
                            "type": "IDayCalendarConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IMonthCalendarConfig",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "componentConfig",
                            "type": "IDayCalendarConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isDateDisabled",
                    "args": [
                        {
                            "name": "date",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "IDayCalendarConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "IDayCalendarConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeNearMonthWeeks",
                    "args": [
                        {
                            "name": "currentMonth",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthArray",
                            "type": "IDay[][]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "[][]",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "currentMonth",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthArray",
                            "type": "IDay[][]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldShowLeft",
                    "args": [
                        {
                            "name": "min",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentMonthView",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "min",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentMonthView",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldShowRight",
                    "args": [
                        {
                            "name": "max",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentMonthView",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "max",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentMonthView",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\n\nimport {WeekDays} from '../common/types/week-days.type';\nimport {UtilsService} from '../common/services/utils/utils.service';\nimport {IDay} from './day.model';\nimport {IDayCalendarConfig, IDayCalendarConfigInternal} from './day-calendar-config.model';\nimport {IMonthCalendarConfig} from '../month-calendar/month-calendar-config';\nimport {Dayjs} from 'dayjs';\nimport {dayjsRef} from '../common/dayjs/dayjs.ref';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DayCalendarService {\n  readonly DEFAULT_CONFIG: IDayCalendarConfig = {\n    showNearMonthDays: true,\n    showWeekNumbers: false,\n    firstDayOfWeek: 'su',\n    weekDayFormat: 'ddd',\n    format: 'DD-MM-YYYY',\n    allowMultiSelect: false,\n    monthFormat: 'MMM, YYYY',\n    enableMonthSelector: true,\n    dayBtnFormat: 'DD',\n    unSelectOnClick: true\n  };\n  private readonly DAYS = ['su', 'mo', 'tu', 'we', 'th', 'fr', 'sa'];\n\n  constructor(private utilsService: UtilsService) {\n  }\n\n  getConfig(config: IDayCalendarConfig): IDayCalendarConfigInternal {\n    const _config = {\n      ...this.DEFAULT_CONFIG,\n      ...this.utilsService.clearUndefined(config)\n    };\n\n    this.utilsService.convertPropsToDayjs(_config, _config.format ?? 'DD-MM-YYYY', ['min', 'max']);\n\n    return _config as IDayCalendarConfigInternal;\n  }\n\n  generateDaysMap(firstDayOfWeek: WeekDays) {\n    const firstDayIndex = this.DAYS.indexOf(firstDayOfWeek);\n    const daysArr = this.DAYS.slice(firstDayIndex, 7).concat(this.DAYS.slice(0, firstDayIndex));\n    return daysArr.reduce((map, day, index) => {\n      map[day] = index;\n\n      return map;\n    }, <{[key: string]: number}>{});\n  }\n\n  generateMonthArray(config: IDayCalendarConfigInternal, month: Dayjs, selected: Dayjs[]): IDay[][] {\n    const parsedMonth = month.isValid() ? dayjsRef(month.toDate()) : dayjsRef();\n    let monthArray: IDay[][] = [];\n    const firstDayOfWeekIndex = this.DAYS.indexOf(config.firstDayOfWeek ?? 'su');\n    let firstDayOfBoard = parsedMonth.startOf('month');\n\n    while (firstDayOfBoard.day() !== firstDayOfWeekIndex) {\n      firstDayOfBoard = firstDayOfBoard.subtract(1, 'day');\n    }\n\n    let current = dayjsRef(firstDayOfBoard.toDate());\n    const prevMonth = parsedMonth.subtract(1, 'month');\n    const nextMonth = parsedMonth.add(1, 'month');\n    const today = dayjsRef();\n\n    const daysOfCalendar: IDay[] = this.utilsService.createArray(42)\n      .reduce((array: IDay[]) => {\n        array.push({\n          date: dayjsRef(current.toDate()),\n          selected: !!selected.find(selectedDay => current.isSame(selectedDay, 'day')),\n          currentMonth: current.isSame(parsedMonth, 'month'),\n          prevMonth: current.isSame(prevMonth, 'month'),\n          nextMonth: current.isSame(nextMonth, 'month'),\n          currentDay: current.isSame(today, 'day'),\n          disabled: this.isDateDisabled(current, config)\n        });\n        current = current.add(1, 'day');\n\n        return array;\n      }, []);\n\n    daysOfCalendar.forEach((day, index) => {\n      const weekIndex = Math.floor(index / 7);\n\n      if (!monthArray[weekIndex]) {\n        monthArray.push([]);\n      }\n\n      monthArray[weekIndex].push(day);\n    });\n\n    if (!config.showNearMonthDays) {\n      monthArray = this.removeNearMonthWeeks(parsedMonth, monthArray);\n    }\n\n    return monthArray;\n  }\n\n  generateWeekdays(firstDayOfWeek: WeekDays): Dayjs[] {\n    const weekdayNames: {[key: string]: Dayjs} = {\n      su: dayjsRef().day(0),\n      mo: dayjsRef().day(1),\n      tu: dayjsRef().day(2),\n      we: dayjsRef().day(3),\n      th: dayjsRef().day(4),\n      fr: dayjsRef().day(5),\n      sa: dayjsRef().day(6)\n    };\n    const weekdays: Dayjs[] = [];\n    const daysMap = this.generateDaysMap(firstDayOfWeek);\n\n    for (const dayKey in daysMap) {\n      if (daysMap.hasOwnProperty(dayKey)) {\n        weekdays[daysMap[dayKey]] = weekdayNames[dayKey];\n      }\n    }\n\n    return weekdays;\n  }\n\n  isDateDisabled(date: Dayjs, config: IDayCalendarConfigInternal): boolean {\n    if (config.isDayDisabledCallback) {\n      return config.isDayDisabledCallback(date);\n    }\n\n    if (config.min && date.isBefore(config.min, 'day')) {\n      return true;\n    }\n\n    return !!(config.max && date.isAfter(config.max, 'day'));\n  }\n\n  // todo:: add unit tests\n  getHeaderLabel(config: IDayCalendarConfigInternal, month: Dayjs): string {\n    if (config.monthFormatter) {\n      return config.monthFormatter(month);\n    }\n\n    return month.format(config.monthFormat);\n  }\n\n  // todo:: add unit tests\n  shouldShowLeft(min: Dayjs, currentMonthView: Dayjs): boolean {\n    return min ? min.isBefore(currentMonthView, 'month') : true;\n  }\n\n  // todo:: add unit tests\n  shouldShowRight(max: Dayjs, currentMonthView: Dayjs): boolean {\n    return max ? max.isAfter(currentMonthView, 'month') : true;\n  }\n\n  generateDaysIndexMap(firstDayOfWeek: WeekDays) {\n    const firstDayIndex = this.DAYS.indexOf(firstDayOfWeek);\n    const daysArr = this.DAYS.slice(firstDayIndex, 7).concat(this.DAYS.slice(0, firstDayIndex));\n    return daysArr.reduce((map, day, index) => {\n      map[index] = day;\n\n      return map;\n    }, <{[key: number]: string}>{});\n  }\n\n  getMonthCalendarConfig(componentConfig: IDayCalendarConfigInternal): IMonthCalendarConfig {\n    return this.utilsService.clearUndefined({\n      min: componentConfig.min,\n      max: componentConfig.max,\n      format: componentConfig.format,\n      isNavHeaderBtnClickable: true,\n      allowMultiSelect: false,\n      yearFormat: componentConfig.yearFormat,\n      yearFormatter: componentConfig.yearFormatter,\n      monthBtnFormat: componentConfig.monthBtnFormat,\n      monthBtnFormatter: componentConfig.monthBtnFormatter,\n      monthBtnCssClassCallback: componentConfig.monthBtnCssClassCallback,\n      isMonthDisabledCallback: componentConfig.isMonthDisabledCallback,\n      multipleYearsNavigateBy: componentConfig.multipleYearsNavigateBy,\n      showMultipleYearsNavigation: componentConfig.showMultipleYearsNavigation,\n      showGoToCurrent: componentConfig.showGoToCurrent,\n      numOfMonthRows: componentConfig.numOfMonthRows\n    });\n  }\n\n  getDayBtnText(config: IDayCalendarConfigInternal, day: Dayjs): string {\n    if (config.dayBtnFormatter) {\n      return config.dayBtnFormatter(day);\n    }\n\n    return day.format(config.dayBtnFormat);\n  }\n\n  getDayBtnCssClass(config: IDayCalendarConfigInternal, day: Dayjs): string {\n    if (config.dayBtnCssClassCallback) {\n      return config.dayBtnCssClassCallback(day);\n    }\n\n    return '';\n  }\n\n  private removeNearMonthWeeks(currentMonth: Dayjs, monthArray: IDay[][]): IDay[][] {\n    if (monthArray[monthArray.length - 1].find((day) => day.date.isSame(currentMonth, 'month'))) {\n      return monthArray;\n    } else {\n      return monthArray.slice(0, -1);\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "DayTimeCalendarService",
            "id": "injectable-DayTimeCalendarService-aa0cbf5a0c16a009c483b3fcee152c04979a2761a01ceca390ebbdb28adcaa78e171c017ee6747eb27261947c301602125a16cfd2cf60f79ad893ec9c22b2115",
            "file": "src/app/components/ng2datepickercopy/lib/day-time-calendar/day-time-calendar.service.ts",
            "properties": [
                {
                    "name": "DEFAULT_CONFIG",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDayTimeCalendarConfig",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getConfig",
                    "args": [
                        {
                            "name": "config",
                            "type": "IDayTimeCalendarConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IDayTimeCalendarConfigInternal",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "IDayTimeCalendarConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDay",
                    "args": [
                        {
                            "name": "current",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "day",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "IDayCalendarConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Dayjs",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "current",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "day",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "IDayCalendarConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTime",
                    "args": [
                        {
                            "name": "current",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "time",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Dayjs",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "current",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "time",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\n\nimport {UtilsService} from '../common/services/utils/utils.service';\nimport {DayCalendarService} from '../day-calendar/day-calendar.service';\nimport {TimeSelectService} from '../time-select/time-select.service';\nimport {IDayTimeCalendarConfig, IDayTimeCalendarConfigInternal} from './day-time-calendar-config.model';\nimport {dayjsRef} from '../common/dayjs/dayjs.ref';\nimport {Dayjs} from 'dayjs';\nimport {IDayCalendarConfigInternal} from '../day-calendar/day-calendar-config.model';\n\nconst DAY_FORMAT = 'YYYYMMDD';\nconst TIME_FORMAT = 'HH:mm:ss';\nconst COMBINED_FORMAT = DAY_FORMAT + TIME_FORMAT;\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class DayTimeCalendarService {\n  readonly DEFAULT_CONFIG: IDayTimeCalendarConfig = {};\n\n  constructor(private utilsService: UtilsService,\n              private dayCalendarService: DayCalendarService,\n              private timeSelectService: TimeSelectService) {\n  }\n\n  getConfig(config: IDayTimeCalendarConfig): IDayTimeCalendarConfigInternal {\n    const _config =  {\n      ...this.DEFAULT_CONFIG,\n      ...this.timeSelectService.getConfig(config),\n      ...this.dayCalendarService.getConfig(config)\n    };\n\n    this.utilsService.convertPropsToDayjs(_config, _config.format ?? 'YYYY-MM-DD', ['min', 'max']);\n\n    return _config as IDayTimeCalendarConfigInternal;\n  }\n\n  updateDay(current: Dayjs, day: Dayjs, config: IDayCalendarConfigInternal): Dayjs {\n    const time = current ? current : dayjsRef();\n    let updated = dayjsRef(day.format(DAY_FORMAT) + time.format(TIME_FORMAT), COMBINED_FORMAT);\n\n    if (config.min) {\n      const min = config.min;\n      updated = min.isAfter(updated) ? min : updated;\n    }\n\n    if (config.max) {\n      const max = config.max;\n      updated = max.isBefore(updated) ? max : updated;\n    }\n\n    return updated;\n  }\n\n  updateTime(current: Dayjs, time: Dayjs): Dayjs {\n    const day = current ? current : dayjsRef();\n\n    return dayjsRef(day.format(DAY_FORMAT) + time.format(TIME_FORMAT), COMBINED_FORMAT);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dayCalendarService",
                        "type": "DayCalendarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "timeSelectService",
                        "type": "TimeSelectService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dayCalendarService",
                        "type": "DayCalendarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "timeSelectService",
                        "type": "TimeSelectService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "MonthCalendarService",
            "id": "injectable-MonthCalendarService-816b502c589740b4790a0541778afd3d559a6ccfd057fd1a0ac4de2108162083cc77b42a923cddd82bcd3ec672fc6c94a7366ef708a0a8057a144ef934e9d398",
            "file": "src/app/components/ng2datepickercopy/lib/month-calendar/month-calendar.service.ts",
            "properties": [
                {
                    "name": "DEFAULT_CONFIG",
                    "defaultValue": "{\n    allowMultiSelect: false,\n    yearFormat: 'YYYY',\n    format: 'MM-YYYY',\n    isNavHeaderBtnClickable: false,\n    monthBtnFormat: 'MMM',\n    multipleYearsNavigateBy: 10,\n    showMultipleYearsNavigation: false,\n    unSelectOnClick: true,\n    numOfMonthRows: 3\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMonthCalendarConfigInternal",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "generateYear",
                    "args": [
                        {
                            "name": "config",
                            "type": "IMonthCalendarConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "year",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selected",
                            "type": "Dayjs[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "[][]",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "IMonthCalendarConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "year",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selected",
                            "type": "Dayjs[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getConfig",
                    "args": [
                        {
                            "name": "config",
                            "type": "IMonthCalendarConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IMonthCalendarConfigInternal",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "IMonthCalendarConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHeaderLabel",
                    "args": [
                        {
                            "name": "config",
                            "type": "IMonthCalendarConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "year",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "IMonthCalendarConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "year",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMonthBtnCssClass",
                    "args": [
                        {
                            "name": "config",
                            "type": "IMonthCalendarConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "month",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "IMonthCalendarConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "month",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMonthBtnText",
                    "args": [
                        {
                            "name": "config",
                            "type": "IMonthCalendarConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "month",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "IMonthCalendarConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "month",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isMonthDisabled",
                    "args": [
                        {
                            "name": "date",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "IMonthCalendarConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "IMonthCalendarConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldShowLeft",
                    "args": [
                        {
                            "name": "min",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentMonthView",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "min",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentMonthView",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldShowRight",
                    "args": [
                        {
                            "name": "max",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentMonthView",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "max",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentMonthView",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateConfig",
                    "args": [
                        {
                            "name": "config",
                            "type": "IMonthCalendarConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "IMonthCalendarConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\n\nimport {UtilsService} from '../common/services/utils/utils.service';\nimport {IMonth} from './month.model';\nimport {IMonthCalendarConfig, IMonthCalendarConfigInternal} from './month-calendar-config';\nimport {Dayjs} from 'dayjs';\nimport {dayjsRef} from '../common/dayjs/dayjs.ref';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MonthCalendarService {\n  readonly DEFAULT_CONFIG: IMonthCalendarConfigInternal = {\n    allowMultiSelect: false,\n    yearFormat: 'YYYY',\n    format: 'MM-YYYY',\n    isNavHeaderBtnClickable: false,\n    monthBtnFormat: 'MMM',\n    multipleYearsNavigateBy: 10,\n    showMultipleYearsNavigation: false,\n    unSelectOnClick: true,\n    numOfMonthRows: 3\n  };\n\n  constructor(private utilsService: UtilsService) {\n  }\n\n  getConfig(config: IMonthCalendarConfig): IMonthCalendarConfigInternal {\n    const _config = <IMonthCalendarConfigInternal>{\n      ...this.DEFAULT_CONFIG,\n      ...this.utilsService?.clearUndefined?.(config) ?? {}\n    };\n\n    MonthCalendarService.validateConfig(_config);\n  this.utilsService?.convertPropsToDayjs?.(_config, _config.format ?? 'MM-YYYY', ['min', 'max']);\n\n    return _config;\n  }\n\n  generateYear(config: IMonthCalendarConfig, year: Dayjs, selected?: Dayjs[]): IMonth[][] {\n    let index = year?.startOf?.('year') ?? dayjsRef().startOf('year');\n\n    return this.utilsService?.createArray?.(config?.numOfMonthRows ?? 1)?.map(() => {\n      return this.utilsService?.createArray?.(12 / (config?.numOfMonthRows ?? 1))?.map(() => {\n        const date = dayjsRef(index);\n        const month = {\n          date,\n          selected: !!selected?.find?.(s => index?.isSame?.(s, 'month')),\n          currentMonth: index?.isSame?.(dayjsRef(), 'month') ?? false,\n          disabled: this.isMonthDisabled(date, config),\n          text: this.getMonthBtnText(config, date)\n        };\n\n        index = index?.add?.(1, 'month') ?? index;\n\n        return month;\n      }) ?? [];\n    }) ?? [];\n  }\n\n  isMonthDisabled(date: Dayjs, config: IMonthCalendarConfig) {\n    if (config?.isMonthDisabledCallback) {\n      return config.isMonthDisabledCallback(date);\n    }\n\n    if (config?.min && date?.isBefore?.(config.min, 'month')) {\n      return true;\n    }\n\n    return !!(config?.max && date?.isAfter?.(config.max, 'month'));\n  }\n\n  shouldShowLeft(min: Dayjs, currentMonthView: Dayjs): boolean {\n  return min?.isBefore?.(currentMonthView, 'year') ?? true;\n  }\n\n  shouldShowRight(max: Dayjs, currentMonthView: Dayjs): boolean {\n  return max?.isAfter?.(currentMonthView, 'year') ?? true;\n  }\n\n  getHeaderLabel(config: IMonthCalendarConfig, year: Dayjs): string {\n    if (config?.yearFormatter) {\n      return config.yearFormatter(year);\n    }\n\n    return year?.format?.(config?.yearFormat ?? 'YYYY') ?? '';\n  }\n\n  getMonthBtnText(config: IMonthCalendarConfig, month: Dayjs): string {\n    if (config?.monthBtnFormatter) {\n      return config.monthBtnFormatter(month);\n    }\n\n    return month?.format?.(config?.monthBtnFormat ?? 'MMM') ?? '';\n  }\n\n  getMonthBtnCssClass(config: IMonthCalendarConfig, month: Dayjs): string {\n    if (config?.monthBtnCssClassCallback) {\n      return config.monthBtnCssClassCallback(month);\n    }\n\n    return '';\n  }\n\n  private static validateConfig(config: IMonthCalendarConfigInternal): void {\n    if ((config?.numOfMonthRows ?? 0) < 1 || (config?.numOfMonthRows ?? 0) > 12 || !Number.isInteger(12 / (config?.numOfMonthRows ?? 1))) {\n      throw new Error('numOfMonthRows has to be between 1 - 12 and divide 12 to integer');\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PokemonService",
            "id": "injectable-PokemonService-8b2d620fc835693e6eba504112d6f11513429505cabda6ded6b121086a5fc06d1676833a2fa71f6d14aa3bfd07971c7f82fc9e5e6caed674c91f624f85c6b45d",
            "file": "src/app/components/fetch-data/pokemon.service.ts",
            "properties": [
                {
                    "name": "pokemonDetail",
                    "defaultValue": "signal<HttpResponse<Pokemon | null>>({\r\n    results: null,\r\n    error: undefined,\r\n    isLoading: false,\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "pokemons",
                    "defaultValue": "signal<HttpResponse<Pokemon[]>>({\r\n    results: [],\r\n    error: undefined,\r\n    isLoading: true,\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "url",
                    "defaultValue": "'https://pokeapi.co/api/v2/pokemon?offset=0&limit=5'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methods": [
                {
                    "name": "fetchData",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPokemonDetails",
                    "args": [
                        {
                            "name": "pokemon",
                            "type": "Pokemon",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<Pokemon | null>>",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pokemon",
                            "type": "Pokemon",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPokemons",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<Pokemon[]>>",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "mapPokemons",
                    "args": [
                        {
                            "name": "pokemons",
                            "type": "Pokemon[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Pokemon[]",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pokemons",
                            "type": "Pokemon[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPokemonDetailErrorState",
                    "args": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPokemonDetailLoadingState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setPokemonDetailSuccessState",
                    "args": [
                        {
                            "name": "results",
                            "type": "Pokemon",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "results",
                            "type": "Pokemon",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPokemonsErrorState",
                    "args": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPokemonsLoadingState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setPokemonsSuccessState",
                    "args": [
                        {
                            "name": "results",
                            "type": "Pokemon[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "results",
                            "type": "Pokemon[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, Signal, signal } from '@angular/core';\r\nimport { Observable, forkJoin } from 'rxjs';\r\nimport { catchError, delay, map, mergeMap } from 'rxjs/operators';\r\nimport { ajax } from 'rxjs/ajax';\r\n\r\ninterface Pokemon {\r\n  name: string;\r\n  sprites?: {\r\n    front_default: string;\r\n  };\r\n  image: string;\r\n  id: number;\r\n}\r\n\r\ninterface HttpResponse<T> {\r\n  results: T;\r\n  error: string | undefined;\r\n  isLoading: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PokemonService {\r\n  url = 'https://pokeapi.co/api/v2/pokemon?offset=0&limit=5';\r\n\r\n  pokemons = signal<HttpResponse<Pokemon[]>>({\r\n    results: [],\r\n    error: undefined,\r\n    isLoading: true,\r\n  });\r\n\r\n  pokemonDetail = signal<HttpResponse<Pokemon | null>>({\r\n    results: null,\r\n    error: undefined,\r\n    isLoading: false,\r\n  });\r\n\r\n  fetchData<T>(url: string): Observable<T> {\r\n    return ajax.getJSON<T>(url).pipe(delay(2000));\r\n  }\r\n\r\n  mapPokemons(pokemons: Pokemon[]): Pokemon[] {\r\n    return pokemons.map((pokemon) => ({\r\n      name: pokemon.name,\r\n      image: pokemon.sprites?.front_default ?? '',\r\n      id: pokemon.id,\r\n    }));\r\n  }\r\n\r\n  getPokemons(): Observable<HttpResponse<Pokemon[]>> {\r\n    return this.fetchData<HttpResponse<Pokemon[]>>(this.url).pipe(\r\n      mergeMap((data) =>\r\n        forkJoin(\r\n          data.results.map((_, index) =>\r\n            this.fetchData<Pokemon>(\r\n              `https://pokeapi.co/api/v2/pokemon/${index + 1}/`\r\n            )\r\n          )\r\n        )\r\n      ),\r\n      map((pokemons) => ({\r\n        results: this.mapPokemons(pokemons),\r\n        error: undefined,\r\n        isLoading: false,\r\n      })),\r\n      catchError((error) => {\r\n        return [{ results: [], error: '' + error.message, isLoading: false }];\r\n      })\r\n    );\r\n  }\r\n\r\n  getPokemonDetails(\r\n    pokemon: Pokemon\r\n  ): Observable<HttpResponse<Pokemon | null>> {\r\n    return this.fetchData<Pokemon>(\r\n      `https://pokeapi.co/api/v2/pokemon/${pokemon.id}/`\r\n    ).pipe(\r\n      map((data) => ({\r\n        results: {\r\n          name: data.name,\r\n          image: data.sprites?.front_default ?? '',\r\n          id: data.id,\r\n        },\r\n        error: undefined,\r\n        isLoading: false,\r\n      })),\r\n      catchError((error) => {\r\n        return [\r\n          {\r\n            results: null,\r\n            error: 'Failed to fetch Pokémon details',\r\n            isLoading: false,\r\n          },\r\n        ];\r\n      })\r\n    );\r\n  }\r\n\r\n  setPokemonsLoadingState() {\r\n    this.pokemons.set({\r\n      results: this.pokemons().results,\r\n      error: undefined,\r\n      isLoading: true,\r\n    });\r\n  }\r\n\r\n  setPokemonsSuccessState(results: Pokemon[]) {\r\n    this.pokemons.set({\r\n      results,\r\n      error: undefined,\r\n      isLoading: false,\r\n    });\r\n  }\r\n\r\n  setPokemonsErrorState(error: any) {\r\n    this.pokemons.set({\r\n      results: this.pokemons().results,\r\n      error: '' + error.message,\r\n      isLoading: false,\r\n    });\r\n  }\r\n\r\n  setPokemonDetailLoadingState() {\r\n    this.pokemonDetail.set({\r\n      results: this.pokemonDetail().results,\r\n      error: undefined,\r\n      isLoading: true,\r\n    });\r\n  }\r\n\r\n  setPokemonDetailSuccessState(results: Pokemon) {\r\n    this.pokemonDetail.set({\r\n      results,\r\n      error: undefined,\r\n      isLoading: false,\r\n    });\r\n  }\r\n\r\n  setPokemonDetailErrorState(error: any) {\r\n    this.pokemonDetail.set({\r\n      results: this.pokemonDetail().results,\r\n      error: '' + error.message,\r\n      isLoading: false,\r\n    });\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TimeSelectService",
            "id": "injectable-TimeSelectService-c69375c2f11307ad01ad1269f3700767f03d78569b315258bf49e4fc5b73537069c34318a85998456ea1f93d50fbf3f333fd4687705b92068b6e856f07238b1c",
            "file": "src/app/components/ng2datepickercopy/lib/time-select/time-select.service.ts",
            "properties": [
                {
                    "name": "DEFAULT_CONFIG",
                    "defaultValue": "{\n    hours12Format: 'hh',\n    hours24Format: 'HH',\n    meridiemFormat: 'A',\n    minutesFormat: 'mm',\n    minutesInterval: 1,\n    secondsFormat: 'ss',\n    secondsInterval: 1,\n    showSeconds: false,\n    showTwentyFourHours: false,\n    timeSeparator: ':',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITimeSelectConfigInternal",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "decrease",
                    "args": [
                        {
                            "name": "config",
                            "type": "ITimeSelectConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "time",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "unit",
                            "type": "TimeUnit",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Dayjs",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "ITimeSelectConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "time",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "unit",
                            "type": "TimeUnit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getConfig",
                    "args": [
                        {
                            "name": "config",
                            "type": "ITimeSelectConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ITimeSelectConfigInternal",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "ITimeSelectConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHours",
                    "args": [
                        {
                            "name": "config",
                            "type": "ITimeSelectConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "t",
                            "type": "Dayjs | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "ITimeSelectConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "t",
                            "type": "Dayjs | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMeridiem",
                    "args": [
                        {
                            "name": "config",
                            "type": "ITimeSelectConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "time",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "ITimeSelectConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "time",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMinutes",
                    "args": [
                        {
                            "name": "config",
                            "type": "ITimeSelectConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "t",
                            "type": "Dayjs | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "ITimeSelectConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "t",
                            "type": "Dayjs | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSeconds",
                    "args": [
                        {
                            "name": "config",
                            "type": "ITimeSelectConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "t",
                            "type": "Dayjs | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "ITimeSelectConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "t",
                            "type": "Dayjs | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTimeFormat",
                    "args": [
                        {
                            "name": "config",
                            "type": "ITimeSelectConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "ITimeSelectConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "increase",
                    "args": [
                        {
                            "name": "config",
                            "type": "ITimeSelectConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "time",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "unit",
                            "type": "TimeUnit",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Dayjs",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "ITimeSelectConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "time",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "unit",
                            "type": "TimeUnit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldShowDecrease",
                    "args": [
                        {
                            "name": "config",
                            "type": "ITimeSelectConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "time",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "unit",
                            "type": "TimeUnit",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "ITimeSelectConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "time",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "unit",
                            "type": "TimeUnit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldShowIncrease",
                    "args": [
                        {
                            "name": "config",
                            "type": "ITimeSelectConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "time",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "unit",
                            "type": "TimeUnit",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "ITimeSelectConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "time",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "unit",
                            "type": "TimeUnit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldShowToggleMeridiem",
                    "args": [
                        {
                            "name": "config",
                            "type": "ITimeSelectConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "time",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "ITimeSelectConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "time",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleMeridiem",
                    "args": [
                        {
                            "name": "time",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Dayjs",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "time",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\n\nimport {UtilsService} from '../common/services/utils/utils.service';\nimport {ITimeSelectConfig, ITimeSelectConfigInternal} from './time-select-config.model';\nimport {Dayjs} from 'dayjs';\nimport {dayjsRef} from '../common/dayjs/dayjs.ref';\n\nexport type TimeUnit = 'hour' | 'minute' | 'second';\nexport const FIRST_PM_HOUR = 12;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TimeSelectService {\n  readonly DEFAULT_CONFIG: ITimeSelectConfigInternal = {\n    hours12Format: 'hh',\n    hours24Format: 'HH',\n    meridiemFormat: 'A',\n    minutesFormat: 'mm',\n    minutesInterval: 1,\n    secondsFormat: 'ss',\n    secondsInterval: 1,\n    showSeconds: false,\n    showTwentyFourHours: false,\n    timeSeparator: ':',\n  };\n\n  constructor(private readonly utilsService: UtilsService) {\n  }\n\n  getConfig(config: ITimeSelectConfig): ITimeSelectConfigInternal {\n    const timeConfigs = {\n      maxTime: config?.maxTime ? this.utilsService?.onlyTime(config.maxTime) : undefined,\n      minTime: config?.minTime ? this.utilsService?.onlyTime(config.minTime) : undefined\n    };\n\n    return <ITimeSelectConfigInternal>{\n      ...this.DEFAULT_CONFIG,\n      ...this.utilsService?.clearUndefined(config) ?? {},\n      ...timeConfigs\n    };\n  }\n\n  getTimeFormat(config: ITimeSelectConfigInternal): string {\n    return (config?.showTwentyFourHours ? config?.hours24Format : config?.hours12Format)\n      + (config?.timeSeparator ?? ':') + (config?.minutesFormat ?? 'mm')\n      + (config?.showSeconds ? ((config?.timeSeparator ?? ':') + (config?.secondsFormat ?? 'ss')) : '')\n      + (config?.showTwentyFourHours ? '' : ' ' + (config?.meridiemFormat ?? 'A'));\n  }\n\n  getHours(config: ITimeSelectConfigInternal, t: Dayjs | null): string {\n  const time = t || dayjsRef();\n  return time?.format(config?.showTwentyFourHours ? config?.hours24Format : config?.hours12Format) ?? '';\n  }\n\n  getMinutes(config: ITimeSelectConfigInternal, t: Dayjs | null): string {\n  const time = t || dayjsRef();\n  return time?.format(config?.minutesFormat ?? 'mm') ?? '';\n  }\n\n  getSeconds(config: ITimeSelectConfigInternal, t: Dayjs | null): string {\n  const time = t || dayjsRef();\n  return time?.format(config?.secondsFormat ?? 'ss') ?? '';\n  }\n\n  getMeridiem(config: ITimeSelectConfigInternal, time: Dayjs): string {\n  return time?.format(config?.meridiemFormat ?? 'A') ?? '';\n  }\n\n  decrease(config: ITimeSelectConfigInternal, time: Dayjs, unit: TimeUnit): Dayjs {\n    let amount: number = 1;\n    switch (unit) {\n      case 'minute':\n        amount = config?.minutesInterval ?? 1;\n        break;\n      case 'second':\n        amount = config?.secondsInterval ?? 1;\n        break;\n    }\n    return time?.subtract(amount, unit) ?? time;\n  }\n\n  increase(config: ITimeSelectConfigInternal, time: Dayjs, unit: TimeUnit): Dayjs {\n    let amount: number = 1;\n    switch (unit) {\n      case 'minute':\n        amount = config?.minutesInterval ?? 1;\n        break;\n      case 'second':\n        amount = config?.secondsInterval ?? 1;\n        break;\n    }\n    return time?.add(amount, unit) ?? time;\n  }\n\n  toggleMeridiem(time: Dayjs): Dayjs {\n    if (!time) return time;\n    if (time.hour() < FIRST_PM_HOUR) {\n      return time.add(12, 'hour');\n    } else {\n      return time.subtract(12, 'hour');\n    }\n  }\n\n  shouldShowDecrease(config: ITimeSelectConfigInternal, time: Dayjs, unit: TimeUnit): boolean {\n    if (!config?.min && !config?.minTime) {\n      return true;\n    }\n    const newTime = this.decrease(config, time, unit);\n\n    return (!config?.min || config?.min?.isSameOrBefore?.(newTime))\n      && (!config?.minTime || config?.minTime?.isSameOrBefore?.(this.utilsService?.onlyTime(newTime)));\n  }\n\n  shouldShowIncrease(config: ITimeSelectConfigInternal, time: Dayjs, unit: TimeUnit): boolean {\n    if (!config?.max && !config?.maxTime) {\n      return true;\n    }\n    const newTime = this.increase(config, time, unit);\n\n    return (!config?.max || config?.max?.isSameOrAfter?.(newTime))\n      && (!config?.maxTime || config?.maxTime?.isSameOrAfter?.(this.utilsService?.onlyTime(newTime)));\n  }\n\n  shouldShowToggleMeridiem(config: ITimeSelectConfigInternal, time: Dayjs): boolean {\n    if (!config?.min && !config?.max && !config?.minTime && !config?.maxTime) {\n      return true;\n    }\n    const newTime = this.toggleMeridiem(time);\n    return (!config?.max || config?.max?.isSameOrAfter?.(newTime))\n      && (!config?.min || config?.min?.isSameOrBefore?.(newTime))\n      && (!config?.maxTime || config?.maxTime?.isSameOrAfter?.(this.utilsService?.onlyTime(newTime)))\n      && (!config?.minTime || config?.minTime?.isSameOrBefore?.(this.utilsService?.onlyTime(newTime)));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "UtilsService",
            "id": "injectable-UtilsService-056d66dba419270ff9cc94f250dc12ee7b63cb98dcf1e72b7f416c812644642a79dd2773377a1926eabe41a5d92d7d16239c03e04bdb9f4ab189fdf446a4db2d",
            "file": "src/app/components/ng2datepickercopy/lib/common/services/utils/utils.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "clearUndefined",
                    "args": [
                        {
                            "name": "obj",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "T",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closestParent",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selector",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HTMLElement | null",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selector",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertFromDayjsArray",
                    "args": [
                        {
                            "name": "format",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "Dayjs[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "convertTo",
                            "type": "ECalendarValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "CalendarValue",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "format",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "Dayjs[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "convertTo",
                            "type": "ECalendarValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertPropsToDayjs",
                    "args": [
                        {
                            "name": "obj",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "props",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 356,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "props",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertToDayjs",
                    "args": [
                        {
                            "name": "date",
                            "type": "SingleCalendarValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Dayjs",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "SingleCalendarValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertToDayjsArray",
                    "args": [
                        {
                            "name": "value",
                            "type": "CalendarValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Dayjs[]",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "CalendarValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertToString",
                    "args": [
                        {
                            "name": "value",
                            "type": "CalendarValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "CalendarValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createArray",
                    "args": [
                        {
                            "name": "size",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number[]",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "size",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createValidator",
                    "args": [
                        {
                            "type": "DateLimits",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "calendarType",
                            "type": "CalendarMode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DateValidator",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "DateLimits",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "calendarType",
                            "type": "CalendarMode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "datesStringToStringArray",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 317,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "debounce",
                    "args": [
                        {
                            "name": "func",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "wait",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "(...args: {}) => void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "func",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "wait",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultDisplayDate",
                    "args": [
                        {
                            "name": "current",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selected",
                            "type": "Dayjs[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "allowMultiSelect",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minDate",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Dayjs",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "current",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selected",
                            "type": "Dayjs[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "allowMultiSelect",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "minDate",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getInputType",
                    "args": [
                        {
                            "name": "value",
                            "type": "CalendarValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "allowMultiSelect",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ECalendarValue",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "CalendarValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "allowMultiSelect",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNativeElement",
                    "args": [
                        {
                            "name": "elem",
                            "type": "HTMLElement | string | ElementRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HTMLElement | null",
                    "typeParameters": [],
                    "line": 382,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "elem",
                            "type": "HTMLElement | string | ElementRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValidDayjsArray",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Dayjs[]",
                    "typeParameters": [],
                    "line": 321,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "granularityFromType",
                    "args": [
                        {
                            "name": "calendarType",
                            "type": "CalendarMode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "UnitType",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "calendarType",
                            "type": "CalendarMode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isDateInRange",
                    "args": [
                        {
                            "name": "date",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "from",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "to",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 336,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "from",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "to",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isDateValid",
                    "args": [
                        {
                            "name": "date",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onlyTime",
                    "args": [
                        {
                            "name": "m",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Dayjs",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "m",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldResetCurrentView",
                    "args": [
                        {
                            "name": "prevConf",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentConf",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 364,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "prevConf",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentConf",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldShowCurrent",
                    "args": [
                        {
                            "name": "showGoToCurrent",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "mode",
                            "type": "CalendarMode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "min",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "max",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 327,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "showGoToCurrent",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "mode",
                            "type": "CalendarMode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "min",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "max",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSelected",
                    "args": [
                        {
                            "name": "isMultiple",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentlySelected",
                            "type": "Dayjs[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "date",
                            "type": "IDate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "granularity",
                            "type": "UnitType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'day'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Dayjs[]",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isMultiple",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentlySelected",
                            "type": "Dayjs[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "date",
                            "type": "IDate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "granularity",
                            "type": "UnitType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'day'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {ECalendarValue} from '../../types/calendar-value-enum';\nimport {SingleCalendarValue} from '../../types/single-calendar-value';\nimport {ElementRef, Injectable} from '@angular/core';\n\nimport {Dayjs, UnitType} from 'dayjs';\nimport {CalendarValue} from '../../types/calendar-value';\nimport {IDate} from '../../models/date.model';\nimport {CalendarMode} from '../../types/calendar-mode';\nimport {DateValidator} from '../../types/validator.type';\nimport {ICalendarInternal} from '../../models/calendar.model';\nimport {dayjsRef} from '../../dayjs/dayjs.ref';\n\nexport interface DateLimits {\n  minDate?: SingleCalendarValue;\n  maxDate?: SingleCalendarValue;\n  minTime?: SingleCalendarValue;\n  maxTime?: SingleCalendarValue;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UtilsService {\n  static debounce(func: Function, wait: number) {\n    let timeout: ReturnType<typeof setTimeout>;\n    return (...args: any[]) => {\n      clearTimeout(timeout);\n      timeout = setTimeout(() => {\n        func(...args);\n      }, wait);\n    };\n  }\n\n  createArray(size: number): number[] {\n    return new Array(size).fill(1);\n  }\n\n  convertToDayjs(date: SingleCalendarValue, format: string): Dayjs {\n    if (!date) {\n      return dayjsRef();\n    } else if (typeof date === 'string') {\n      return dayjsRef(date, format);\n    } else {\n      return dayjsRef(date.toDate());\n    }\n  }\n\n  isDateValid(date: string, format: string): boolean {\n    if (date === '') {\n      return true;\n    }\n\n    return dayjsRef(date, format, true).isValid();\n  }\n\n  // todo:: add unit test\n  getDefaultDisplayDate(current: Dayjs,\n                        selected: Dayjs[],\n                        allowMultiSelect: boolean,\n                        minDate: Dayjs): Dayjs {\n    if (current) {\n      return dayjsRef(current.toDate());\n    } else if (minDate && minDate.isAfter(dayjsRef())) {\n      return dayjsRef(minDate.toDate());\n    } else if (allowMultiSelect) {\n      if (selected && selected[selected.length]) {\n        return dayjsRef(selected[selected.length].toDate());\n      }\n    } else if (selected && selected[0]) {\n      return dayjsRef(selected[0].toDate());\n    }\n\n    return dayjsRef();\n  }\n\n  // todo:: add unit test\n  getInputType(value: CalendarValue, allowMultiSelect: boolean): ECalendarValue {\n    if (Array.isArray(value)) {\n      if (!value.length) {\n        return ECalendarValue.DayjsArr;\n      } else if (typeof value[0] === 'string') {\n        return ECalendarValue.StringArr;\n      } else if (dayjsRef.isDayjs(value[0])) {\n        return ECalendarValue.DayjsArr;\n      }\n    } else {\n      if (typeof value === 'string') {\n        return ECalendarValue.String;\n      } else if (dayjsRef.isDayjs(value)) {\n        return ECalendarValue.Dayjs;\n      }\n    }\n\n    return allowMultiSelect ? ECalendarValue.DayjsArr : ECalendarValue.Dayjs;\n  }\n\n  // todo:: add unit test\n  convertToDayjsArray(value: CalendarValue,\n                      config: { allowMultiSelect?: boolean, format?: string }): Dayjs[] {\n    let retVal: Dayjs[];\n    switch (this.getInputType(value, config.allowMultiSelect ?? false)) {\n      case (ECalendarValue.String):\n        retVal = value ? [dayjsRef(<string>value, config.format, true)] : [];\n        break;\n      case (ECalendarValue.StringArr):\n        retVal = (<string[]>value)\n          .map(v => v ? dayjsRef(v, config.format, true) : null)\n          .filter((d): d is Dayjs => d !== null && d !== undefined);\n        break;\n      case (ECalendarValue.Dayjs):\n        retVal = value ? [dayjsRef((<Dayjs>value).toDate())] : [];\n        break;\n      case (ECalendarValue.DayjsArr):\n        retVal = (<Dayjs[]>value || []).map(v => dayjsRef(v.toDate()));\n        break;\n      default:\n        retVal = [];\n    }\n\n    return retVal;\n  }\n\n  // todo:: add unit test\n  convertFromDayjsArray(format: string,\n                        value: Dayjs[],\n                        convertTo: ECalendarValue): CalendarValue {\n    switch (convertTo) {\n      case (ECalendarValue.String):\n        return value[0] && value[0].format(format);\n      case (ECalendarValue.StringArr):\n        return value.filter(Boolean).map(v => v.format(format));\n      case (ECalendarValue.Dayjs):\n        return value[0] ? dayjsRef(value[0].toDate()) : value[0];\n      case (ECalendarValue.DayjsArr):\n        return value ? value.map(v => dayjsRef(v.toDate())) : value;\n      default:\n        return value;\n    }\n  }\n\n  convertToString(value: CalendarValue, format: string): string {\n    let tmpVal: string[];\n\n    if (typeof value === 'string') {\n      tmpVal = [value];\n    } else if (Array.isArray(value)) {\n      if (value.length) {\n        tmpVal = (<SingleCalendarValue[]>value).map((v) => {\n          return this.convertToDayjs(v, format).format(format);\n        });\n      } else {\n        tmpVal = <string[]>value;\n      }\n    } else if (dayjsRef.isDayjs(value)) {\n      tmpVal = [value.format(format)];\n    } else {\n      return '';\n    }\n\n    return tmpVal.filter(Boolean).join(' | ');\n  }\n\n  // todo:: add unit test\n  clearUndefined<T extends { [key: string]: any }>(obj: T): T {\n    if (!obj) {\n      return obj;\n    }\n\n    Object.keys(obj).forEach((key) => (obj[key] === undefined) && delete obj[key]);\n    return obj;\n  }\n\n  updateSelected(isMultiple: boolean,\n                 currentlySelected: Dayjs[],\n                 date: IDate,\n                 granularity: UnitType = 'day'): Dayjs[] {\n    if (isMultiple) {\n      return !date.selected\n        ? currentlySelected.concat([date.date])\n        : currentlySelected.filter(d => !d.isSame(date.date, granularity));\n    } else {\n      return !date.selected ? [date.date] : [];\n    }\n  }\n\n  closestParent(element: HTMLElement, selector: string): HTMLElement | null {\n    if (!element) {\n      return null;\n    }\n    const match = <HTMLElement>element.querySelector(selector);\n    if (match) {\n      return match;\n    }\n    if (element.parentElement) {\n      return this.closestParent(element.parentElement, selector);\n    }\n    return null;\n  }\n\n  onlyTime(m: Dayjs): Dayjs {\n    return m && dayjsRef.isDayjs(m) ? dayjsRef(m.format('HH:mm:ss'), 'HH:mm:ss') : dayjsRef('00:00:00', 'HH:mm:ss');\n  }\n\n  granularityFromType(calendarType: CalendarMode): UnitType {\n    switch (calendarType) {\n      case 'time':\n        return 'second';\n      case 'daytime':\n        return 'second';\n      default:\n        return calendarType;\n    }\n  }\n\n  createValidator({minDate, maxDate, minTime, maxTime}: DateLimits,\n                  format: string,\n                  calendarType: CalendarMode): DateValidator {\n    let isValid: boolean;\n    let value: Dayjs[];\n    const validators: { key: string; isValid: () => boolean }[] = [];\n    const granularity = this.granularityFromType(calendarType);\n\n    if (minDate) {\n      const md = this.convertToDayjs(minDate, format);\n      validators.push({\n        key: 'minDate',\n        isValid: () => {\n          const _isValid = value.every(val => val.isSameOrAfter(md, granularity));\n          isValid = isValid ? _isValid : false;\n          return _isValid;\n        }\n      });\n    }\n\n    if (maxDate) {\n      const md = this.convertToDayjs(maxDate, format);\n      validators.push({\n        key: 'maxDate',\n        isValid: () => {\n          const _isValid = value.every(val => val.isSameOrBefore(md, granularity));\n          isValid = isValid ? _isValid : false;\n          return _isValid;\n        }\n      });\n    }\n\n    if (minTime) {\n      const md = this.onlyTime(this.convertToDayjs(minTime, format));\n      validators.push({\n        key: 'minTime',\n        isValid: () => {\n          const _isValid = value.every(val => this.onlyTime(val).isSameOrAfter(md));\n          isValid = isValid ? _isValid : false;\n          return _isValid;\n        }\n      });\n    }\n\n    if (maxTime) {\n      const md = this.onlyTime(this.convertToDayjs(maxTime, format));\n      validators.push({\n        key: 'maxTime',\n        isValid: () => {\n          const _isValid = value.every(val => this.onlyTime(val).isSameOrBefore(md));\n          isValid = isValid ? _isValid : false;\n          return _isValid;\n        }\n      });\n    }\n\n    return (inputVal: CalendarValue) => {\n      isValid = true;\n\n      value = this.convertToDayjsArray(inputVal, {\n        format,\n        allowMultiSelect: true\n      }).filter(Boolean);\n\n      if (!value.every(val => val.isValid())) {\n        return {\n          format: {\n            given: inputVal\n          }\n        };\n      }\n\n      interface Validator {\n        key: string;\n        isValid: () => boolean;\n      }\n\n      interface ErrorMap {\n        [key: string]: {\n          given: Dayjs[];\n        };\n      }\n\n      interface Validator {\n        key: string;\n        isValid: () => boolean;\n      }\n\n      const errors: ErrorMap = validators.reduce<ErrorMap>((map: ErrorMap, err: Validator) => {\n        if (!err.isValid()) {\n          map[err.key] = {\n        given: value\n          };\n        }\n\n        return map;\n      }, {});\n\n      return !isValid ? errors : {};\n    };\n  }\n\n  datesStringToStringArray(value: string): string[] {\n    return (value || '').split('|').map(m => m.trim()).filter(Boolean);\n  }\n\n  getValidDayjsArray(value: string, format: string): Dayjs[] {\n    return this.datesStringToStringArray(value)\n      .filter(d => this.isDateValid(d, format))\n      .map(d => dayjsRef(d, format));\n  }\n\n  shouldShowCurrent(showGoToCurrent: boolean,\n                    mode: CalendarMode,\n                    min: Dayjs,\n                    max: Dayjs): boolean {\n    return showGoToCurrent &&\n      mode !== 'time' &&\n      this.isDateInRange(dayjsRef(), min, max);\n  }\n\n  isDateInRange(date: Dayjs, from: Dayjs, to: Dayjs): boolean {\n    if (!date) {\n      return false;\n    }\n\n    if (!from && !to) {\n      return true;\n    }\n\n    if (!from && to) {\n      return date.isSameOrBefore(to);\n    }\n\n    if (from && !to) {\n      return date.isSameOrAfter(from);\n    }\n\n    return date.isBetween(from, to, 'day', '[]');\n  }\n\n  convertPropsToDayjs(obj: { [key: string]: any }, format: string, props: string[]): void {\n    props.forEach((prop) => {\n      if (obj.hasOwnProperty(prop)) {\n        obj[prop] = this.convertToDayjs(obj[prop], format);\n      }\n    });\n  }\n\n  shouldResetCurrentView<T extends ICalendarInternal>(prevConf: T, currentConf: T): boolean {\n    if (prevConf && currentConf) {\n      if (!prevConf.min && currentConf.min) {\n        return true;\n      } else if (prevConf.min && currentConf.min && !prevConf.min.isSame(currentConf.min, 'd')) {\n        return true;\n      } else if (!prevConf.max && currentConf.max) {\n        return true;\n      } else if (prevConf.max && currentConf.max && !prevConf.max.isSame(currentConf.max, 'd')) {\n        return true;\n      }\n\n      return false;\n    }\n\n    return false;\n  }\n\n  getNativeElement(elem: HTMLElement | string | ElementRef): HTMLElement | null {\n    if (!elem) {\n      return null;\n    } else if (typeof elem === 'string') {\n      return document.querySelector(elem);\n    } else if (elem instanceof ElementRef) {\n      return elem.nativeElement;\n    } else {\n      return elem;\n    }\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "YearCalendarService",
            "id": "injectable-YearCalendarService-c1cd816c89780a1c7567f1871ce2e959d240ec11246b32cabb3cc39c69834dd72e370a6e1490ef10b2a04564e60120c4fb4eda4d117d54d78f10d038b4c4d0c7",
            "file": "src/app/components/ng2datepickercopy/lib/year-calendar/year-calendar.service.ts",
            "properties": [
                {
                    "name": "DEFAULT_CONFIG",
                    "defaultValue": "{\r\n    allowMultiSelect: false,\r\n    yearFormat: 'YYYY',\r\n    yearBtnFormat: 'YYYY',\r\n    format: 'YYYY',\r\n    numOfYearsPerPage: 24,\r\n    numOfYearRows: 6,\r\n    unSelectOnClick: true\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IYearCalendarConfigInternal",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "_generateCalendar",
                    "args": [
                        {
                            "type": "IGenCalendarParams<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "[][]",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "type": "IGenCalendarParams<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createArray",
                    "args": [
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number[]",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateCalendar",
                    "args": [
                        {
                            "name": "config",
                            "type": "IYearCalendarConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "year",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selected",
                            "type": "Dayjs[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "[][]",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "IYearCalendarConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "year",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selected",
                            "type": "Dayjs[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getConfig",
                    "args": [
                        {
                            "name": "config",
                            "type": "IYearCalendarConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IYearCalendarConfigInternal",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "IYearCalendarConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHeaderLabel",
                    "args": [
                        {
                            "name": "config",
                            "type": "IYearCalendarConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "year",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "IYearCalendarConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "year",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getYearBtnCssClass",
                    "args": [
                        {
                            "name": "config",
                            "type": "IYearCalendarConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "year",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "IYearCalendarConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "year",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getYearBtnText",
                    "args": [
                        {
                            "name": "config",
                            "type": "IYearCalendarConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "year",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "IYearCalendarConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "year",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isYearDisabled",
                    "args": [
                        {
                            "name": "date",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "IYearCalendarConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "IYearCalendarConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldShowLeft",
                    "args": [
                        {
                            "name": "min",
                            "type": "Dayjs | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentMonthView",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "min",
                            "type": "Dayjs | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentMonthView",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldShowRight",
                    "args": [
                        {
                            "name": "max",
                            "type": "Dayjs | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentMonthView",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "max",
                            "type": "Dayjs | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentMonthView",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateConfig",
                    "args": [
                        {
                            "name": "config",
                            "type": "IYearCalendarConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "IYearCalendarConfigInternal",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\r\nimport dayjs, {Dayjs} from 'dayjs';\r\nimport {UtilsService} from '../common/services/utils/utils.service';\r\nimport {IYearCalendarConfig, IYearCalendarConfigInternal} from './year-calendar-config';\r\nimport { IGenCalendarParams } from './year-calendar.component';\r\n\r\nexport interface IDateCell {\r\n  date: Dayjs;\r\n  selected: boolean;\r\n  current: boolean;\r\n  disabled: boolean\r\n  text: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class YearCalendarService {\r\n  readonly DEFAULT_CONFIG: IYearCalendarConfigInternal = {\r\n    allowMultiSelect: false,\r\n    yearFormat: 'YYYY',\r\n    yearBtnFormat: 'YYYY',\r\n    format: 'YYYY',\r\n    numOfYearsPerPage: 24,\r\n    numOfYearRows: 6,\r\n    unSelectOnClick: true\r\n  };\r\n\r\n  constructor(private utilsService: UtilsService) {\r\n  }\r\n\r\n  getConfig(config: IYearCalendarConfig): IYearCalendarConfigInternal {\r\n    const _config = <IYearCalendarConfigInternal>{\r\n      ...this.DEFAULT_CONFIG,\r\n      ...this.utilsService.clearUndefined(config)\r\n    };\r\n\r\n    this.validateConfig(_config);\r\n\r\n  this.utilsService.convertPropsToDayjs(_config, _config.format ?? 'YYYY', ['min', 'max']);\r\n  // If you use dayjs locale plugin, set locale here if needed\r\n\r\n    return _config;\r\n  }\r\n\r\n    _generateCalendar<T>({\r\n                        numOfRows,\r\n                        numOfCells,\r\n                        isDisabledCb,\r\n                        getBtnTextCb,\r\n                        selected,\r\n                        config,\r\n                        startDate,\r\n                        granularity\r\n                      }: IGenCalendarParams<T>): IDateCell[][] {\r\n    const index = startDate.clone();\r\n\r\n    return this.createArray(numOfRows).map(() => {\r\n      return this.createArray(numOfCells / numOfRows).map(() => {\r\n        const date = index.clone();\r\n        const month = {\r\n          date,\r\n          selected: !!selected.find(s => index.isSame(s, granularity)),\r\n          current: index.isSame(dayjs(), granularity),\r\n          disabled: isDisabledCb(date, config),\r\n          text: getBtnTextCb(config, date)\r\n        };\r\n\r\n        index.add(1, 'month');\r\n\r\n        return month;\r\n      });\r\n    });\r\n  }\r\n\r\n  generateCalendar(config: IYearCalendarConfig, year: Dayjs, selected: Dayjs[] = []): IDateCell[][] {\r\n    return this._generateCalendar<IYearCalendarConfig>({\r\n      numOfRows: config.numOfYearRows ?? 0,\r\n      numOfCells: config.numOfYearsPerPage ?? this.DEFAULT_CONFIG.numOfYearsPerPage,\r\n      isDisabledCb: this.isYearDisabled,\r\n      getBtnTextCb: this.getYearBtnText,\r\n      selected,\r\n      config,\r\n      startDate: year.clone().startOf('year'),\r\n      granularity: 'year'\r\n    });\r\n  }\r\n\r\n  isYearDisabled(date: Dayjs, config: IYearCalendarConfig) {\r\n    if (config.min && date.isBefore(config.min, 'year')) {\r\n      return true;\r\n    }\r\n    return !!(config.max && date.isAfter(config.max, 'year'));\r\n  }\r\n\r\n  shouldShowLeft(min: Dayjs | undefined, currentMonthView: Dayjs): boolean {\r\n    return min ? min.isBefore(currentMonthView, 'year') : true;\r\n  }\r\n\r\n  shouldShowRight(max: Dayjs | undefined, currentMonthView: Dayjs): boolean {\r\n    return max ? max.isAfter(currentMonthView, 'year') : true;\r\n  }\r\n\r\n  getHeaderLabel(config: IYearCalendarConfig, year: Dayjs): string {\r\n    if (config.yearFormatter) {\r\n      return config.yearFormatter(year);\r\n    }\r\n    return year.format(config.yearFormat ?? 'YYYY');\r\n  }\r\n\r\n  getYearBtnText(config: IYearCalendarConfig, year: Dayjs): string {\r\n    if (config.yearBtnFormatter) {\r\n      return config.yearBtnFormatter(year);\r\n    }\r\n    return year.format(config.yearBtnFormat ?? 'YYYY');\r\n  }\r\n\r\n  getYearBtnCssClass(config: IYearCalendarConfig, year: Dayjs): string {\r\n    if (config.yearBtnCssClassCallback) {\r\n      return config.yearBtnCssClassCallback(year);\r\n    }\r\n    return '';\r\n  }\r\n\r\n  private validateConfig(config: IYearCalendarConfigInternal): void {\r\n  }\r\n\r\n  private createArray(length: number): number[] {\r\n    return Array.from({ length }, (_, i) => i);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "CustomInputStyleDirective",
            "id": "directive-CustomInputStyleDirective-8a755d09c4b5481619e070b30fdbe71e8c6d1015aa46491c4ab45270355ee04fcc61ee6b8c5fb62eaf5bdcb1a63750ef019804720e9e746f023caac2aeff219e",
            "file": "src/app/directives/text-input-style.directives.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  Directive,\r\n  ElementRef,\r\n  Renderer2,\r\n  HostListener,\r\n  Input,\r\n  OnChanges,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\n\r\ninterface StyleConfig {\r\n  borderColor?: string;\r\n  focusBorderColor?: string;\r\n  padding?: string;\r\n  borderRadius?: string;\r\n}\r\n\r\n@Directive({\r\n  selector: '[appCustomInputStyle]',\r\n})\r\nexport class CustomInputStyleDirective implements OnChanges {\r\n  @Input('appCustomInputStyle') styleConfig: StyleConfig = {\r\n    borderColor: '#ccc',\r\n    focusBorderColor: '#007bff',\r\n    padding: '10px',\r\n    borderRadius: '4px',\r\n  };\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2) {\r\n    this.setStyle();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes) {\r\n      this.setStyle();\r\n    }\r\n  }\r\n\r\n  private setStyle() {\r\n    const { borderColor, padding, borderRadius } = this.styleConfig;\r\n    this.renderer.setStyle(\r\n      this.el.nativeElement,\r\n      'border',\r\n      `1px solid ${borderColor}`\r\n    );\r\n    this.renderer.setStyle(this.el.nativeElement, 'padding', padding);\r\n    this.renderer.setStyle(this.el.nativeElement, 'borderRadius', borderRadius);\r\n    this.renderer.setStyle(this.el.nativeElement, 'outline', 'none');\r\n    this.renderer.setStyle(\r\n      this.el.nativeElement,\r\n      'transition',\r\n      'border-color 0.3s'\r\n    );\r\n  }\r\n\r\n  @HostListener('focus') onFocus() {\r\n    this.renderer.setStyle(\r\n      this.el.nativeElement,\r\n      'borderColor',\r\n      this.styleConfig.focusBorderColor\r\n    );\r\n  }\r\n\r\n  @HostListener('blur') onBlur() {\r\n    this.renderer.setStyle(\r\n      this.el.nativeElement,\r\n      'borderColor',\r\n      this.styleConfig.borderColor\r\n    );\r\n  }\r\n}\r\n",
            "selector": "[appCustomInputStyle]",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [
                {
                    "name": "appCustomInputStyle",
                    "defaultValue": "{\r\n    borderColor: '#ccc',\r\n    focusBorderColor: '#007bff',\r\n    padding: '10px',\r\n    borderRadius: '4px',\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "StyleConfig",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "blur",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64
                },
                {
                    "name": "focus",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'blur'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'focus'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "setStyle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "DatePickerDirective",
            "id": "directive-DatePickerDirective-aa257a76958020ab5a3647f72a38c61dc69535ff946841e1408233e4fc3ed38ccd501e64cd0f000ddc16c90d236564f3c5d82d6fc8dde3283f74b067f72d472a",
            "file": "src/app/components/ng2datepickercopy/lib/date-picker/date-picker.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {CalendarMode} from '../common/types/calendar-mode';\nimport {IDatePickerDirectiveConfig} from './date-picker-directive-config.model';\nimport {IDpDayPickerApi} from './date-picker.api';\nimport {DatePickerComponent} from './date-picker.component';\nimport {\n  ComponentFactoryResolver,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnInit,\n  Optional,\n  Output,\n  ViewContainerRef\n} from '@angular/core';\nimport {NgControl} from '@angular/forms';\nimport {INavEvent} from '../common/models/navigation-event.model';\nimport {UtilsService} from '../common/services/utils/utils.service'\nimport {CalendarValue} from '../common/types/calendar-value';\nimport {ISelectionEvent} from '../common/types/selection-event.model';\nimport {SingleCalendarValue} from '../common/types/single-calendar-value';\nimport {Dayjs} from 'dayjs';\n\n@Directive({\n    exportAs: 'dpDayPicker',\n    selector: '[dpDayPicker]',\n    standalone: true\n})\nexport class DatePickerDirective implements OnInit {\n\n  @Output() open = new EventEmitter<void>();\n  @Output() close = new EventEmitter<void>();\n  @Output() onChange = new EventEmitter<CalendarValue>();\n  @Output() onGoToCurrent: EventEmitter<void> = new EventEmitter();\n  @Output() onLeftNav: EventEmitter<INavEvent> = new EventEmitter();\n  @Output() onRightNav: EventEmitter<INavEvent> = new EventEmitter();\n  @Output() onSelect: EventEmitter<ISelectionEvent> = new EventEmitter();\n  datePicker!: DatePickerComponent;\n  api!: IDpDayPickerApi;\n\n  constructor(public readonly viewContainerRef: ViewContainerRef,\n              public readonly elemRef: ElementRef,\n              public readonly componentFactoryResolver: ComponentFactoryResolver,\n              @Optional() public readonly formControl: NgControl,\n              public readonly utilsService: UtilsService) {\n  }\n\n  private _config!: IDatePickerDirectiveConfig;\n\n  get config(): IDatePickerDirectiveConfig {\n    return this._config;\n  }\n\n  @Input('dpDayPicker') set config(config: IDatePickerDirectiveConfig) {\n    this._config = {\n      ...config,\n      hideInputContainer: true,\n      inputElementContainer: config.inputElementContainer ?? this.elemRef,\n    };\n    this.updateDatepickerConfig();\n    this.markForCheck();\n  }\n\n  private _theme!: string;\n\n  get theme(): string {\n    return this._theme;\n  }\n\n  @Input() set theme(theme: string) {\n    this._theme = theme;\n    if (this.datePicker) {\n      this.datePicker.theme = theme;\n    }\n\n    this.markForCheck();\n  }\n\n  private _mode: CalendarMode = 'day';\n\n  get mode(): CalendarMode {\n    return this._mode;\n  }\n\n  @Input() set mode(mode: CalendarMode) {\n    this._mode = mode;\n    if (this.datePicker) {\n      this.datePicker.mode = mode;\n    }\n\n    this.markForCheck();\n  }\n\n  private _minDate!: SingleCalendarValue;\n\n  get minDate(): SingleCalendarValue {\n    return this._minDate;\n  }\n\n  @Input() set minDate(minDate: SingleCalendarValue) {\n    this._minDate = minDate;\n    if (this.datePicker) {\n      this.datePicker.minDate = minDate;\n      this.datePicker.ngOnInit();\n    }\n\n    this.markForCheck();\n  }\n\n  private _maxDate!: SingleCalendarValue;\n\n  get maxDate(): SingleCalendarValue {\n    return this._maxDate;\n  }\n\n  @Input() set maxDate(maxDate: SingleCalendarValue) {\n    this._maxDate = maxDate;\n    if (this.datePicker) {\n      this.datePicker.maxDate = maxDate;\n      this.datePicker.ngOnInit();\n    }\n\n    this.markForCheck();\n  }\n\n  private _minTime!: SingleCalendarValue;\n\n  get minTime(): SingleCalendarValue {\n    return this._minTime;\n  }\n\n  @Input() set minTime(minTime: SingleCalendarValue) {\n    this._minTime = minTime;\n    if (this.datePicker) {\n      this.datePicker.minTime = minTime;\n      this.datePicker.ngOnInit();\n    }\n\n    this.markForCheck();\n  }\n\n  private _maxTime!: SingleCalendarValue;\n\n  get maxTime(): SingleCalendarValue {\n    return this._maxTime;\n  }\n\n  @Input() set maxTime(maxTime: SingleCalendarValue) {\n    this._maxTime = maxTime;\n    if (this.datePicker) {\n      this.datePicker.maxTime = maxTime;\n      this.datePicker.ngOnInit();\n    }\n\n    this.markForCheck();\n  }\n\n  private _displayDate!: Dayjs | string;\n\n  get displayDate(): Dayjs | string {\n    return this._displayDate;\n  }\n\n  @Input() set displayDate(displayDate: Dayjs | string) {\n    this._displayDate = displayDate;\n    this.updateDatepickerConfig();\n\n    this.markForCheck();\n  }\n\n  ngOnInit(): void {\n    this.datePicker = this.createDatePicker();\n    this.api = this.datePicker.api;\n    this.updateDatepickerConfig();\n    this.attachModelToDatePicker();\n    this.datePicker.theme = this.theme;\n  }\n\n  createDatePicker(): DatePickerComponent {\n    const factory = this.componentFactoryResolver.resolveComponentFactory(DatePickerComponent);\n    return this.viewContainerRef.createComponent(factory).instance;\n  }\n\n  attachModelToDatePicker() {\n    if (!this.formControl) {\n      return;\n    }\n\n    this.datePicker.onViewDateChange(this.formControl.value);\n\n    if (this.formControl.valueChanges) {\n      this.formControl.valueChanges.subscribe((value) => {\n        if (value !== this.datePicker.inputElementValue) {\n          const strVal = this.utilsService.convertToString(value, this.datePicker.componentConfig.format ?? '');\n          this.datePicker.onViewDateChange(strVal);\n        }\n      });\n    }\n\n    let setup = true;\n\n    interface RegisterOnChangeFn {\n      (value: CalendarValue, changedByInput: boolean): void;\n    }\n\n    interface FormatError {\n      format: {\n        given: string;\n      };\n      [key: string]: any;\n    }\n\n    interface Errors {\n      format?: {\n        given: string;\n      };\n      [key: string]: any;\n    }\n\n    this.datePicker.registerOnChange((value: CalendarValue, changedByInput: boolean): void => {\n      if (value) {\n        const isMultiselectEmpty: boolean = setup && Array.isArray(value) && !value.length;\n\n        if (!isMultiselectEmpty && !changedByInput) {\n          if (this.formControl.control) {\n            this.formControl.control.setValue(this.datePicker.inputElementValue);\n          }\n        }\n      }\n\n      const errors: Errors = this.datePicker.validateFn(value);\n\n      if (!setup) {\n        if (this.formControl.control) {\n          this.formControl.control.markAsDirty({\n            onlySelf: true\n          });\n        }\n      } else {\n        setup = false;\n      }\n\n      if (errors) {\n        if (errors.hasOwnProperty('format') && errors['format']) {\n          const { given } = errors['format'] as { given: string };\n          this.datePicker.inputElementValue = given;\n          if (!changedByInput && this.formControl.control) {\n            this.formControl.control.setValue(given);\n          }\n        }\n\n        if (this.formControl.control) {\n          this.formControl.control.setErrors(errors);\n        }\n      }\n    });\n  }\n\n  @HostListener('click')\n  onClick() {\n    if (this.datePicker && typeof this.datePicker.onClick === 'function') {\n      this.datePicker.onClick();\n    }\n  }\n\n  @HostListener('focus')\n  onFocus() {\n    this.datePicker.inputFocused();\n  }\n\n  @HostListener('keydown.enter')\n  onEnter() {\n    if (this.datePicker.componentConfig.closeOnEnter) {\n      this.datePicker.hideCalendar();\n    }\n  }\n\n  markForCheck() {\n    if (this.datePicker) {\n      this.datePicker.cd.markForCheck();\n    }\n  }\n\n  private updateDatepickerConfig() {\n    if (this.datePicker) {\n      this.datePicker.minDate = this.minDate;\n      this.datePicker.maxDate = this.maxDate;\n      this.datePicker.minTime = this.minTime;\n      this.datePicker.maxTime = this.maxTime;\n      this.datePicker.mode = this.mode || 'day';\n      this.datePicker.displayDate = this.displayDate;\n      this.datePicker.config = this.config;\n      this.datePicker.open = this.open;\n      this.datePicker.close = this.close;\n      this.datePicker.onChange = this.onChange;\n      this.datePicker.onGoToCurrent = this.onGoToCurrent;\n      this.datePicker.onLeftNav = this.onLeftNav;\n      this.datePicker.onRightNav = this.onRightNav;\n      this.datePicker.onSelect = this.onSelect;\n\n      this.datePicker.init();\n\n      if (this.datePicker.componentConfig.disableKeypress) {\n        this.elemRef.nativeElement.setAttribute('readonly', true);\n      } else {\n        this.elemRef.nativeElement.removeAttribute('readonly');\n      }\n    }\n  }\n}\n",
            "selector": "[dpDayPicker]",
            "providers": [],
            "exportAs": "dpDayPicker",
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "displayDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 165,
                    "type": "Dayjs | string",
                    "decorators": []
                },
                {
                    "name": "dpDayPicker",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "IDatePickerDirectiveConfig",
                    "decorators": []
                },
                {
                    "name": "maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 117,
                    "type": "SingleCalendarValue",
                    "decorators": []
                },
                {
                    "name": "maxTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 149,
                    "type": "SingleCalendarValue",
                    "decorators": []
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 101,
                    "type": "SingleCalendarValue",
                    "decorators": []
                },
                {
                    "name": "minTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 133,
                    "type": "SingleCalendarValue",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "CalendarMode",
                    "decorators": []
                },
                {
                    "name": "theme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "close",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "EventEmitter"
                },
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter<CalendarValue>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "EventEmitter"
                },
                {
                    "name": "onGoToCurrent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onLeftNav",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "EventEmitter<INavEvent>"
                },
                {
                    "name": "onRightNav",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "EventEmitter<INavEvent>"
                },
                {
                    "name": "onSelect",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "EventEmitter<ISelectionEvent>"
                },
                {
                    "name": "open",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 261
                },
                {
                    "name": "focus",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 268
                },
                {
                    "name": "keydown.enter",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 273
                }
            ],
            "propertiesClass": [
                {
                    "name": "_config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDatePickerDirectiveConfig",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_displayDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dayjs | string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 159,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SingleCalendarValue",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_maxTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SingleCalendarValue",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 143,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SingleCalendarValue",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_minTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SingleCalendarValue",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 127,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_mode",
                    "defaultValue": "'day'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CalendarMode",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "_theme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "api",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDpDayPickerApi",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "componentFactoryResolver",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ComponentFactoryResolver",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "datePicker",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DatePickerComponent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "elemRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgControl",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Optional",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        170,
                        125,
                        148
                    ]
                },
                {
                    "name": "utilsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UtilsService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "viewContainerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "attachModelToDatePicker",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createDatePicker",
                    "args": [],
                    "optional": false,
                    "returnType": "DatePickerComponent",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "markForCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 279,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 261,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "onEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 273,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'keydown.enter'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 268,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'focus'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "updateDatepickerConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 285,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "elemRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elemRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "componentFactoryResolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formControl",
                        "type": "NgControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "config": {
                    "name": "config",
                    "setSignature": {
                        "name": "config",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "config",
                                "type": "IDatePickerDirectiveConfig",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 55,
                        "jsdoctags": [
                            {
                                "name": "config",
                                "type": "IDatePickerDirectiveConfig",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "config",
                        "type": "",
                        "returnType": "IDatePickerDirectiveConfig",
                        "line": 51
                    }
                },
                "theme": {
                    "name": "theme",
                    "setSignature": {
                        "name": "theme",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "theme",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 71,
                        "jsdoctags": [
                            {
                                "name": "theme",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "theme",
                        "type": "string",
                        "returnType": "string",
                        "line": 67
                    }
                },
                "mode": {
                    "name": "mode",
                    "setSignature": {
                        "name": "mode",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "mode",
                                "type": "CalendarMode",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 86,
                        "jsdoctags": [
                            {
                                "name": "mode",
                                "type": "CalendarMode",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "mode",
                        "type": "",
                        "returnType": "CalendarMode",
                        "line": 82
                    }
                },
                "minDate": {
                    "name": "minDate",
                    "setSignature": {
                        "name": "minDate",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "minDate",
                                "type": "SingleCalendarValue",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 101,
                        "jsdoctags": [
                            {
                                "name": "minDate",
                                "type": "SingleCalendarValue",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "minDate",
                        "type": "",
                        "returnType": "SingleCalendarValue",
                        "line": 97
                    }
                },
                "maxDate": {
                    "name": "maxDate",
                    "setSignature": {
                        "name": "maxDate",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "maxDate",
                                "type": "SingleCalendarValue",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 117,
                        "jsdoctags": [
                            {
                                "name": "maxDate",
                                "type": "SingleCalendarValue",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "maxDate",
                        "type": "",
                        "returnType": "SingleCalendarValue",
                        "line": 113
                    }
                },
                "minTime": {
                    "name": "minTime",
                    "setSignature": {
                        "name": "minTime",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "minTime",
                                "type": "SingleCalendarValue",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 133,
                        "jsdoctags": [
                            {
                                "name": "minTime",
                                "type": "SingleCalendarValue",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "minTime",
                        "type": "",
                        "returnType": "SingleCalendarValue",
                        "line": 129
                    }
                },
                "maxTime": {
                    "name": "maxTime",
                    "setSignature": {
                        "name": "maxTime",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "maxTime",
                                "type": "SingleCalendarValue",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 149,
                        "jsdoctags": [
                            {
                                "name": "maxTime",
                                "type": "SingleCalendarValue",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "maxTime",
                        "type": "",
                        "returnType": "SingleCalendarValue",
                        "line": 145
                    }
                },
                "displayDate": {
                    "name": "displayDate",
                    "setSignature": {
                        "name": "displayDate",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "displayDate",
                                "type": "Dayjs | string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 165,
                        "jsdoctags": [
                            {
                                "name": "displayDate",
                                "type": "Dayjs | string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "displayDate",
                        "type": "",
                        "returnType": "Dayjs | string",
                        "line": 161
                    }
                }
            }
        },
        {
            "name": "DynamicClassDirective",
            "id": "directive-DynamicClassDirective-8649d48ef5b550a2f31ed5555c0de99772e0b230cf056e6048ed697d86d7ef611880a7e19076a109185db3d73af24aaee0a39ce241ecbfb9676681c6b509b070",
            "file": "src/app/directives/dynamic-class.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  Directive,\r\n  ElementRef,\r\n  Renderer2,\r\n  Input,\r\n  OnChanges,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appDynamicClass]',\r\n})\r\nexport class DynamicClassDirective implements OnChanges {\r\n  @Input('appDynamicClass') classNames: string = '';\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes['classNames']) {\r\n      this.setClass();\r\n    }\r\n  }\r\n\r\n  private setClass() {\r\n    const classList = this.classNames.split(' ');\r\n    classList.forEach((className) => {\r\n      this.renderer.addClass(this.el.nativeElement, className);\r\n    });\r\n  }\r\n}\r\n",
            "selector": "[appDynamicClass]",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [
                {
                    "name": "appDynamicClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setClass",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "DynamicStyleDirective",
            "id": "directive-DynamicStyleDirective-eb406e3f099e106b86d1f03a3d247d14766fbe256388be41977caa0d82a519f67e183eabd880a5e135bb8945c8fa84c3219a62e0018608d1126f9526778ff18a",
            "file": "src/app/directives/dynamic-style.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  Directive,\r\n  ElementRef,\r\n  Renderer2,\r\n  Input,\r\n  OnChanges,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appDynamicStyle]',\r\n})\r\nexport class DynamicStyleDirective implements OnChanges {\r\n  @Input('appDynamicStyle') styleConfig: { [key: string]: string } = {};\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes['styleConfig']) {\r\n      this.setStyle();\r\n    }\r\n  }\r\n\r\n  private setStyle() {\r\n    for (const [key, value] of Object.entries(this.styleConfig)) {\r\n      this.renderer.setStyle(\r\n        this.el.nativeElement,\r\n        this.toKebabCase(key),\r\n        value\r\n      );\r\n    }\r\n  }\r\n\r\n  private toKebabCase(str: string): string {\r\n    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\r\n  }\r\n}\r\n",
            "selector": "[appDynamicStyle]",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [
                {
                    "name": "appDynamicStyle",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "literal type",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setStyle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "toKebabCase",
                    "args": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "str",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "StopAccordionToggleDirective",
            "id": "directive-StopAccordionToggleDirective-b086d0c0fa813aeed62b0442bf95b4a511d2a595441127169a1af21a03e888fa23e80cb7c0681942597fe2811a6b3c4e49489250e9183c4f5e9ffc5c9b9a8577",
            "file": "src/app/components/accordion/accordion-2.component.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Component, Input, ContentChildren, QueryList, AfterContentInit, Output, EventEmitter, Directive, HostListener } from '@angular/core';\r\n\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Directive({selector: 'button[stopAccordionToggle]', standalone: true})\r\nexport class StopAccordionToggleDirective {\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: Event) {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'app-accordion-2',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <div [ngStyle]=\"{ 'margin-left': getMargin(level) }\">\r\n      <div class=\"accordion-2-header\" (click)=\"toggle()\">\r\n        <span class=\"accordion-2-chevron\" [style.transform]=\"expanded ? 'rotate(90deg)' : 'rotate(0deg)'\" style=\"display:inline-flex;align-items:center;margin-right:0.5rem;transition:transform 0.2s;\">\r\n          <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M6 12L10 8L6 4\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n          </svg>\r\n        </span>\r\n        <ng-content select=\"[accordion-2-title]\"></ng-content>\r\n      </div>\r\n      <div class=\"accordion-2-content\" *ngIf=\"expanded\">\r\n        <div\r\n          class=\"accordion-2-child-content\"\r\n          [class.accordion-2-child-active]=\"childActive\"\r\n        >\r\n          <ng-content></ng-content>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./accordion-2.component.css']\r\n})\r\nexport class Accordion2Component implements AfterContentInit {\r\n  @Input() level = 1;\r\n  expanded = false;\r\n\r\n  @ContentChildren(Accordion2Component) children!: QueryList<Accordion2Component>;\r\n\r\n  ngAfterContentInit() {\r\n    this.children.forEach(child => child.level = this.level + 1);\r\n  }\r\n\r\n  toggle() {\r\n    this.expanded = !this.expanded;\r\n  }\r\n\r\n  getMargin(level: number): string {\r\n    if (level === 1) return '1rem';\r\n    if (level === 2) return '1.5rem';\r\n    return '2rem';\r\n  }\r\n}\r\n",
            "selector": "button[stopAccordionToggle]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": []
        }
    ],
    "components": [
        {
            "name": "Accordion2Component",
            "id": "component-Accordion2Component-b086d0c0fa813aeed62b0442bf95b4a511d2a595441127169a1af21a03e888fa23e80cb7c0681942597fe2811a6b3c4e49489250e9183c4f5e9ffc5c9b9a8577",
            "file": "src/app/components/accordion/accordion-2.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-accordion-2",
            "styleUrls": [
                "./accordion-2.component.css"
            ],
            "styles": [],
            "template": "<div [ngStyle]=\"{ 'margin-left': getMargin(level) }\">\n  <div class=\"accordion-2-header\" (click)=\"toggle()\">\n    <span class=\"accordion-2-chevron\" [style.transform]=\"expanded ? 'rotate(90deg)' : 'rotate(0deg)'\" style=\"display:inline-flex;align-items:center;margin-right:0.5rem;transition:transform 0.2s;\">\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M6 12L10 8L6 4\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n      </svg>\n    </span>\n    <ng-content select=\"[accordion-2-title]\"></ng-content>\n  </div>\n  <div class=\"accordion-2-content\" *ngIf=\"expanded\">\n    <div\n      class=\"accordion-2-child-content\"\n      [class.accordion-2-child-active]=\"childActive\"\n    >\n      <ng-content></ng-content>\n    </div>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "level",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<Accordion2Component>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "Accordion2Component"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "expanded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "methodsClass": [
                {
                    "name": "getMargin",
                    "args": [
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ContentChildren, QueryList, AfterContentInit, Output, EventEmitter, Directive, HostListener } from '@angular/core';\r\n\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Directive({selector: 'button[stopAccordionToggle]', standalone: true})\r\nexport class StopAccordionToggleDirective {\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: Event) {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'app-accordion-2',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: `\r\n    <div [ngStyle]=\"{ 'margin-left': getMargin(level) }\">\r\n      <div class=\"accordion-2-header\" (click)=\"toggle()\">\r\n        <span class=\"accordion-2-chevron\" [style.transform]=\"expanded ? 'rotate(90deg)' : 'rotate(0deg)'\" style=\"display:inline-flex;align-items:center;margin-right:0.5rem;transition:transform 0.2s;\">\r\n          <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M6 12L10 8L6 4\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n          </svg>\r\n        </span>\r\n        <ng-content select=\"[accordion-2-title]\"></ng-content>\r\n      </div>\r\n      <div class=\"accordion-2-content\" *ngIf=\"expanded\">\r\n        <div\r\n          class=\"accordion-2-child-content\"\r\n          [class.accordion-2-child-active]=\"childActive\"\r\n        >\r\n          <ng-content></ng-content>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./accordion-2.component.css']\r\n})\r\nexport class Accordion2Component implements AfterContentInit {\r\n  @Input() level = 1;\r\n  expanded = false;\r\n\r\n  @ContentChildren(Accordion2Component) children!: QueryList<Accordion2Component>;\r\n\r\n  ngAfterContentInit() {\r\n    this.children.forEach(child => child.level = this.level + 1);\r\n  }\r\n\r\n  toggle() {\r\n    this.expanded = !this.expanded;\r\n  }\r\n\r\n  getMargin(level: number): string {\r\n    if (level === 1) return '1rem';\r\n    if (level === 2) return '1.5rem';\r\n    return '2rem';\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".accordion-2-header {\r\n  cursor: pointer;\r\n  font-weight: bold;\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n",
                    "styleUrl": "./accordion-2.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "AfterContentInit"
            ]
        },
        {
            "name": "AccordionComponent",
            "id": "component-AccordionComponent-942f02e8ce4c5f7814253f20f05809097085bff22f7a453fdfaf358e19e08e03c8b5bb62a6125444758eb1ea1bba776f075d96e1d28bc134582144e36d5467b7",
            "file": "src/app/components/accordion/accordion.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-accordion",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./accordion.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "AccordionItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onToggle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "required": false
                }
            ],
            "propertiesClass": [
                {
                    "name": "onToggle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "required": false
                }
            ],
            "methodsClass": [
                {
                    "name": "toggle",
                    "args": [
                        {
                            "name": "item",
                            "type": "AccordionItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "AccordionItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, output, Output } from '@angular/core';\r\nimport { AccordionItem } from './models/accordion.interface';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-accordion',\r\n  standalone: true,\r\n  templateUrl: './accordion.component.html',\r\n  styleUrl: './accordion.component.css',\r\n  imports: [CommonModule],\r\n})\r\nexport class AccordionComponent {\r\n  @Input() items: AccordionItem[] = [];\r\n\r\n  onToggle = output<AccordionItem>();\r\n\r\n  toggle(item: AccordionItem) {\r\n    item.isOpen = !item.isOpen;\r\n    this.onToggle.emit(item);\r\n  }\r\n}\r\n",
            "styleUrl": "./accordion.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div\r\n  (click)=\"toggle(item)\"\r\n  class=\"divider\"\r\n  *ngFor=\"let item of items; let i = index\"\r\n  [class.active]=\"item.isOpen\"\r\n>\r\n  <div class=\"item\">\r\n    <h3 data-testid=\"accordion-header\">{{ item.title }}</h3>\r\n    <span\r\n      data-testid=\"icon\"\r\n      [class.rotate-down]=\"item.isOpen\"\r\n      [class.rotate-up]=\"!item.isOpen\"\r\n    >\r\n      <svg\r\n        width=\"16\"\r\n        height=\"16\"\r\n        viewBox=\"0 0 24 24\"\r\n        version=\"1.1\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <g>\r\n          <polygon\r\n            fill=\"currentColor\"\r\n            points=\"17.3033009 19.7781746 15.8890873 21.1923882 6.69669914 12 15.8890873 2.80761184 17.3033009 4.22182541 9.52512627 12\"\r\n          ></polygon>\r\n        </g>\r\n      </svg>\r\n    </span>\r\n  </div>\r\n  <div class=\"pb-2\">\r\n    <p>{{ item.content }}</p>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "AddressFormComponent",
            "id": "component-AddressFormComponent-a48b2d3835741fca0aaa7bb4a8df854526c5c31c541bb751d59cdee5fa6cced02ce7f736ff8af6f60af315e5ee6f058ccdf5085d40e0f3b00be46fa9b5749b34",
            "file": "src/app/components/address-form/address-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-address-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./address-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "FormGroup",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormGroup,\r\n  Validators,\r\n  ReactiveFormsModule,\r\n} from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-address-form',\r\n  templateUrl: './address-form.component.html',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule],\r\n})\r\nexport class AddressFormComponent implements OnInit {\r\n  @Input() form!: FormGroup;\r\n\r\n  constructor(private fb: FormBuilder) {}\r\n\r\n  ngOnInit() {\r\n    this.form.addControl('address', this.fb.control('', Validators.required));\r\n    this.form.addControl('state', this.fb.control('', Validators.required));\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [formGroup]=\"form\" class=\"form-group\">\r\n  <label for=\"address\">Address</label>\r\n  <input\r\n    type=\"text\"\r\n    formControlName=\"address\"\r\n    id=\"address\"\r\n    class=\"form-control\"\r\n  />\r\n  <div *ngIf=\"form.get('address')?.invalid && form.get('address')?.touched\">\r\n    <small *ngIf=\"form.get('address').errors.required\"\r\n      >Address is required</small\r\n    >\r\n  </div>\r\n\r\n  <label for=\"state\">State</label>\r\n  <input type=\"text\" formControlName=\"state\" id=\"state\" class=\"form-control\" />\r\n  <div *ngIf=\"form.get('state')?.invalid && form.get('state')?.touched\">\r\n    <small class=\"text-danger\" *ngIf=\"form.get('state').errors.required\"\r\n      >State is required</small\r\n    >\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "AlertComponent",
            "id": "component-AlertComponent-967e9a6c16f36273a43639644f4a8e131bdc6c358744292ec57e23a69d32e54cc0c2583098197df0755b9e233524f75169f6cf3003eda8ed166c2eb201b3baf6",
            "file": "src/app/components/alert/alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-alert",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"alert alert-{{ type }}\" role=\"alert\">\n  @if (icon) {\n  <i class=\"bi {{ icon }}\"></i>\n  } {{ title }}\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "\"bi-airplane-fill\" | \"bi-arrow-left\" | \"bi-brightness-high\" | \"bi-cake2-fill\"",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "'title input'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ninput title\n",
                    "description": "<p>input title</p>\n",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "\"primary\" | \"secondary\" | \"success\" | \"danger\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-alert',\r\n  standalone: true,\r\n  template: `\r\n    <div class=\"alert alert-{{ type }}\" role=\"alert\">\r\n      @if (icon) {\r\n      <i class=\"bi {{ icon }}\"></i>\r\n      } {{ title }}\r\n    </div>\r\n  `,\r\n})\r\nexport default class AlertComponent {\r\n  /**\r\n   * input title\r\n   */\r\n  @Input() title: string = 'title input';\r\n\r\n  @Input() icon!:\r\n    | 'bi-airplane-fill'\r\n    | 'bi-arrow-left'\r\n    | 'bi-brightness-high'\r\n    | 'bi-cake2-fill';\r\n\r\n  @Input() type: 'primary' | 'secondary' | 'success' | 'danger' = 'primary';\r\n\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-3232cc5f4040ffdbe3bd316f40dd86a80d21bf91535d582e617201456282041272b48fda043ed015f16d35e5506feb9393cec4d6a7993d3fb0661fcfe708a524",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'taskbox'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-root',\r\n    templateUrl: './app.component.html',\r\n    styleUrls: ['./app.component.css'],\r\n    standalone: false\r\n})\r\nexport class AppComponent {\r\n  title = 'taskbox';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div>root appp</div>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-da22cdf6e18082277be7aa40c3ee7c1956c54eec75ef50daaa217ef92d08fb810c51856142491694139305806477f104e5837ee90fe6bff578c2bf6fee4219f4",
            "file": "src/app/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 845,
                            "end": 859,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 846,
                                "end": 854,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 35,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 49,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  imports: [CommonModule],\r\n  standalone: true,\r\n  template: ` <button\r\n    type=\"button\"\r\n    (click)=\"onClick.emit($event)\"\r\n    [ngClass]=\"classes\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    {{ label }}\r\n  </button>`,\r\n  styleUrls: ['./button.css'],\r\n})\r\nexport default class ButtonComponent {\r\n  /**\r\n   * Is this the principal call to action on the page?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary\r\n      ? 'storybook-button--primary'\r\n      : 'storybook-button--secondary';\r\n\r\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\r\n  font-family: \"Nunito Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\r\n  font-weight: 700;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  line-height: 1;\r\n}\r\n.storybook-button--primary {\r\n  color: white;\r\n  background-color: #1ea7fd;\r\n}\r\n.storybook-button--secondary {\r\n  color: #333;\r\n  background-color: transparent;\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n}\r\n.storybook-button--small {\r\n  font-size: 12px;\r\n  padding: 10px 16px;\r\n}\r\n.storybook-button--medium {\r\n  font-size: 14px;\r\n  padding: 11px 20px;\r\n}\r\n.storybook-button--large {\r\n  font-size: 16px;\r\n  padding: 12px 24px;\r\n}\r\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 51
                    }
                }
            }
        },
        {
            "name": "CalendarNavComponent",
            "id": "component-CalendarNavComponent-244e192580c4ff08b56bb5fc7a22fa75ba6cca3394a0f805f12cfeb43b793aa454b57c0d761dc15986d84201f0c4c883a15cddbde3c7ea56fca1c83879f4e039",
            "file": "src/app/components/ng2datepickercopy/lib/calendar-nav/calendar-nav.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "dp-calendar-nav",
            "styleUrls": [
                "./calendar-nav.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "./calendar-nav.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isLabelClickable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "leftNavDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "leftSecondaryNavDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "rightNavDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "rightSecondaryNavDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showGoToCurrent",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showLeftNav",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showLeftSecondaryNav",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showRightNav",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showRightSecondaryNav",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showYearButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "theme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "yearLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChooseYearClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "EventEmitter<>"
                },
                {
                    "name": "onGoToCurrent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "EventEmitter<>"
                },
                {
                    "name": "onLabelClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "EventEmitter<>"
                },
                {
                    "name": "onLeftNav",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "EventEmitter<>"
                },
                {
                    "name": "onLeftSecondaryNav",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "EventEmitter<>"
                },
                {
                    "name": "onRightNav",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "EventEmitter<>"
                },
                {
                    "name": "onRightSecondaryNav",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "EventEmitter<>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "chooseYearClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getYearFromLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "labelClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "leftNavClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "leftSecondaryNavClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "rightNavClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "rightSecondaryNavClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'dp-calendar-nav',\r\n    templateUrl: './calendar-nav.component.html',\r\n    styleUrls: ['./calendar-nav.component.less'],\r\n    imports: [CommonModule],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    standalone: true\r\n})\r\nexport class CalendarNavComponent {\r\n  constructor(private cd: ChangeDetectorRef) {}\r\n\r\n  @Input() label!: string;\r\n  @Input() yearLabel!: string;\r\n  @Input() isLabelClickable: boolean = false;\r\n  @Input() showLeftNav: boolean = true;\r\n  @Input() showLeftSecondaryNav: boolean = false;\r\n  @Input() showRightNav: boolean = true;\r\n  @Input() showRightSecondaryNav: boolean = false;\r\n  @Input() leftNavDisabled: boolean = false;\r\n  @Input() leftSecondaryNavDisabled: boolean = false;\r\n  @Input() rightNavDisabled: boolean = false;\r\n  @Input() rightSecondaryNavDisabled: boolean = false;\r\n  @Input() showGoToCurrent: boolean = true;\r\n  @Input() showYearButton: boolean = true;\r\n  @HostBinding('class') @Input() theme!: string;\r\n\r\n  @Output() onLeftNav: EventEmitter<null> = new EventEmitter();\r\n  @Output() onLeftSecondaryNav: EventEmitter<null> = new EventEmitter();\r\n  @Output() onRightNav: EventEmitter<null> = new EventEmitter();\r\n  @Output() onRightSecondaryNav: EventEmitter<null> = new EventEmitter();\r\n  @Output() onLabelClick: EventEmitter<null> = new EventEmitter();\r\n  @Output() onGoToCurrent: EventEmitter<null> = new EventEmitter();\r\n  @Output() onChooseYearClick: EventEmitter<null> = new EventEmitter();\r\n\r\n  leftNavClicked() {\r\n    this.onLeftNav.emit();\r\n  }\r\n\r\n  leftSecondaryNavClicked() {\r\n    this.onLeftSecondaryNav.emit();\r\n  }\r\n\r\n  rightNavClicked() {\r\n    this.onRightNav.emit();\r\n  }\r\n\r\n  rightSecondaryNavClicked() {\r\n    this.onRightSecondaryNav.emit();\r\n  }\r\n\r\n  labelClicked() {\r\n    this.onLabelClick.emit();\r\n    this.showYearButton = false;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  chooseYearClicked() {\r\n    this.onChooseYearClick.emit();\r\n  }\r\n\r\n  getYearFromLabel(): string {\r\n    if (!this.label) return '';\r\n    \r\n    try {\r\n      // Essaie de parser le label comme une date\r\n      const date = new Date(this.label);\r\n      \r\n      // Vérifie si c'est une date valide\r\n      if (!isNaN(date.getTime())) {\r\n        return date.getFullYear().toString();\r\n      }\r\n      \r\n      // Si ce n'est pas une date, essaie d'extraire l'année avec une regex\r\n      const yearMatch = this.label.match(/\\b(19|20)\\d{2}\\b/);\r\n      return yearMatch ? yearMatch[0] : '';\r\n    } catch (error) {\r\n      // En cas d'erreur, essaie d'extraire l'année avec une regex\r\n      const yearMatch = this.label.match(/\\b(19|20)\\d{2}\\b/);\r\n      return yearMatch ? yearMatch[0] : '';\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../common/styles/variables';\n\n& {\n\n  dp-calendar-nav {\n    @navHeight: 25px;\n\n    .dp-calendar-nav-container {\n      position: relative;\n      box-sizing: border-box;\n      height: @navHeight;\n      border: 1px solid @c-black;\n      border-bottom: none;\n    }\n\n    .dp-nav-date-btn {\n      box-sizing: border-box;\n      height: 25px;\n      border: 1px solid @c-black;\n      border-bottom: none;\n    }\n\n    .dp-nav-btns-container {\n      position: absolute;\n      top: 50%;\n      transform: translateY(-50%);\n      right: 5px;\n      display: inline-block;\n    }\n\n    .dp-calendar-nav-container-left, .dp-calendar-nav-container-right {\n      display: inline-block;\n    }\n\n    .dp-calendar-nav-left,\n    .dp-calendar-nav-right,\n    .dp-calendar-secondary-nav-left,\n    .dp-calendar-secondary-nav-right {\n      position: relative;\n      width: 16px;\n      cursor: pointer;\n    }\n\n    .dp-calendar-nav-left, .dp-calendar-nav-right {\n      line-height: 0;\n      .arrow(45deg);\n    }\n\n    .dp-calendar-secondary-nav-left, .dp-calendar-secondary-nav-right {\n      .double-arrow(45deg);\n      padding: 0;\n    }\n\n    .dp-calendar-secondary-nav-right {\n      left: initial;\n      right: 5px;\n    }\n\n    .dp-calendar-nav-left {\n      .arrow(-135deg);\n    }\n\n    .dp-calendar-secondary-nav-left {\n      .double-arrow(-135deg);\n    }\n\n    .dp-nav-header {\n      position: absolute;\n      top: 50%;\n      transform: translateY(-50%);\n      left: 5px;\n      display: inline-block;\n      font-size: 13px;\n    }\n\n    .dp-nav-header-btn {\n      cursor: pointer;\n    }\n\n    .dp-current-location-btn {\n      position: relative;\n      top: -1px;\n      height: 16px;\n      width: 16px;\n      vertical-align: middle;\n      background: fade(@c-black, 60);\n      border: 1px solid fade(@c-black, 60);\n      outline: none;\n      border-radius: 50%;\n      box-shadow: inset 0 0 0 3px @c-white;\n      cursor: pointer;\n\n      &:hover {\n        background: @c-black;\n      }\n    }\n\n    &.dp-material {\n      .dp-calendar-nav-container {\n        height: @basic-height;\n        border: 1px solid @c-light-gray;\n      }\n\n      .dp-calendar-nav-left,\n      .dp-calendar-nav-right,\n      .dp-calendar-secondary-nav-left,\n      .dp-calendar-secondary-nav-right {\n        border: none;\n        background: @c-white;\n        outline: none;\n        font-size: 16px;\n        padding: 0;\n      }\n\n      .dp-calendar-secondary-nav-left,\n      .dp-calendar-secondary-nav-right {\n        width: 20px;\n      }\n\n      .dp-nav-header-btn {\n        height: 20px;\n        width: 80px;\n        border: none;\n        background: @c-white;\n        outline: none;\n\n        &:hover {\n          background: fade(@c-black, 5);\n        }\n\n        &:active {\n          background: fade(@c-black, 10);\n        }\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./calendar-nav.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"dp-calendar-nav-container\" dir=\"ltr\">\r\n  <div class=\"dp-nav-header\">\r\n    <!-- <span [attr.data-hidden]=\"isLabelClickable\"\r\n          [hidden]=\"isLabelClickable\"\r\n          [innerText]=\"label\">\r\n    </span> -->\r\n    <button (click)=\"labelClicked();\"\r\n            *ngIf=\"label\"\r\n            [attr.data-hidden]=\"!isLabelClickable\"\r\n            [hidden]=\"!isLabelClickable\"\r\n            [innerText]=\"label\"\r\n            class=\"dp-nav-header-btn\"\r\n            type=\"button\">\r\n    </button>\r\n    <button (click)=\"chooseYearClicked()\"\r\n            class=\"dp-nav-header-btn\"\r\n            *ngIf=\"showYearButton\"\r\n            type=\"button\">\r\n       {{getYearFromLabel() || label}}\r\n    </button>\r\n  </div>\r\n\r\n  <div class=\"dp-nav-btns-container\">\r\n    <div class=\"dp-calendar-nav-container-left\">\r\n      <button (click)=\"leftSecondaryNavClicked()\"\r\n              *ngIf=\"showLeftSecondaryNav\"\r\n              [disabled]=\"leftSecondaryNavDisabled\"\r\n              class=\"dp-calendar-secondary-nav-left\"\r\n              type=\"button\">\r\n      </button>\r\n      <button (click)=\"leftNavClicked()\"\r\n              [attr.data-hidden]=\"!showLeftNav\"\r\n              [disabled]=\"leftNavDisabled\"\r\n              [hidden]=\"!showLeftNav\"\r\n              class=\"dp-calendar-nav-left\"\r\n              type=\"button\">\r\n      </button>\r\n    </div>\r\n    <button (click)=\"onGoToCurrent.emit()\"\r\n            *ngIf=\"showGoToCurrent\"\r\n            class=\"dp-current-location-btn\"\r\n            type=\"button\">\r\n    </button>\r\n    <div class=\"dp-calendar-nav-container-right\">\r\n      <button (click)=\"rightNavClicked()\"\r\n              [attr.data-hidden]=\"!showRightNav\"\r\n              [disabled]=\"rightNavDisabled\"\r\n              [hidden]=\"!showRightNav\"\r\n              class=\"dp-calendar-nav-right\"\r\n              type=\"button\">\r\n      </button>\r\n      <button (click)=\"rightSecondaryNavClicked()\"\r\n              *ngIf=\"showRightSecondaryNav\"\r\n              [disabled]=\"rightSecondaryNavDisabled\"\r\n              class=\"dp-calendar-secondary-nav-right\"\r\n              type=\"button\">\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-14a0a15cc49e6f3e6b4a1bd2e467c010d08828fd12014b7602f1479a0066e06cb6744d825735c17003fbc60178a848974236351f77c52971de98aaf72850aa22",
            "file": "src/app/components/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "classNames",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-card',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './card.component.html',\r\n  styleUrl: './card.component.scss',\r\n})\r\nexport class CardComponent {\r\n  @Input()\r\n  classNames!: string;\r\n}\r\n",
            "styleUrl": "./card.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div data-testid=\"card\" class=\"card {{classNames}}\">\r\n  <div class=\"card-body\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-af2c32f9df73125b3d620e6b07e4ac43955a867e2de439d5bf56256c8d273172b2fd8ff62d45b918dc2a23eef614000e5773d1f7f844baeff3d8a4cd5a771de6",
            "file": "src/app/components/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-checkbox",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "template": "<label>\n  <input\n    data-testid=\"checkbox\"\n    type=\"checkbox\"\n    [checked]=\"checked\"\n    (click)=\"onCheckboxChange($event)\"\n  />\n  {{ label }}\n</label>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "checkedChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onCheckboxChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-checkbox',\r\n  standalone: true,\r\n  template: `\r\n    <label>\r\n      <input\r\n        data-testid=\"checkbox\"\r\n        type=\"checkbox\"\r\n        [checked]=\"checked\"\r\n        (click)=\"onCheckboxChange($event)\"\r\n      />\r\n      {{ label }}\r\n    </label>\r\n  `,\r\n  styleUrls: ['./checkbox.component.scss'],\r\n})\r\nexport class CheckboxComponent {\r\n  @Input() checked = false;\r\n  @Input() label = '';\r\n  @Output() checkedChange = new EventEmitter<boolean>();\r\n\r\n  onCheckboxChange(event: Event): void {\r\n    const input = event.target as HTMLInputElement;\r\n    this.checkedChange.emit(input.checked);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "label {\r\n  display: flex;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n  color: #333;\r\n}\r\n\r\ninput[type=\"checkbox\"] {\r\n  margin-right: 8px;\r\n  width: 20px;\r\n  height: 20px;\r\n  cursor: pointer;\r\n  accent-color: #5AA454;\r\n}\r\n\r\ninput[type=\"checkbox\"]:checked {\r\n  background-color: #5AA454;\r\n  border-color: #5AA454;\r\n}\r\n\r\ninput[type=\"checkbox\"]:focus {\r\n  outline: none;\r\n  box-shadow: 0 0 0 2px rgba(90, 164, 84, 0.5);\r\n}\r\n\r\n\r\n\r\n",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "CsDatePickerComponent",
            "id": "component-CsDatePickerComponent-2ccd7d5490bd479dd504373c2b871dab321ba804a3ec72cc4157142110b93169ab34d4c964df5b1ae7a5e504ef66516f330c68422fd8a029ec0728f410a8f4d5",
            "file": "src/app/components/cs-date-picker/cs-date-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "DatePipe",
                    "type": "pipe"
                }
            ],
            "selector": "cs-date-picker",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./cs-date-picker.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "dateOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "DateOptions",
                    "decorators": []
                },
                {
                    "name": "isSelectionDayAfterCurrentDayEnable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isStepperYearShown",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "offsetYearsMenu",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "dateObject",
                    "defaultValue": "new EventEmitter<Object>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "abbreviatedMonth",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "currentDate",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "currentDay",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "dateDisplayed",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "dateFormat",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "dateTosubmit",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "days",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "(Date | undefined)[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "disabledWeekends",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "disableRangePciker",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "endDate",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "isDatePickerClicked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "isDayselected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "isRightChervronEnable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "months",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "radioButtonDate",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "selectedEndDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "selectedStartDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "selectedStartDateTMP",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "showDropdownWithEmptyContent",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "tabBtnActive",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "today",
                    "defaultValue": "new Date().toLocaleDateString()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "toggleDate",
                    "defaultValue": "new Date()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "toggleMonthChoice",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "toggleYearChoice",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "yearchose",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "years",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [
                {
                    "name": "checkIsRightChervronEnable",
                    "args": [
                        {
                            "name": "offset",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "offset",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeDropDown",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 324,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createDateObject",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 406,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dateDisplayedChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 412,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitDateToParent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 317,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDaysOfWeekInAbreviateAndLocaleFormat",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 383,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMonthAbreviated",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSelectedDay",
                    "args": [
                        {
                            "name": "day",
                            "type": "Date | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "day",
                            "type": "Date | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSelectedMonth",
                    "args": [
                        {
                            "name": "month",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "month",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSelectedStartDate",
                    "args": [
                        {
                            "name": "day",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 361,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "day",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isSelectedStartOrEndDate",
                    "args": [
                        {
                            "name": "day",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 352,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "day",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "leavePicker",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 258,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "moveToMonthOffset",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "offset",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "offset",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveToYearOffset",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "offset",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "offset",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openDropDown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 344,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "renderCalendar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setDateOptions",
                    "args": [
                        {
                            "name": "dateOptions",
                            "type": "DateOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 277,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dateOptions",
                            "type": "DateOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setMonthMenuToChoose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setSelectionDate",
                    "args": [
                        {
                            "name": "numberOfDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "activeBtnIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 263,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "numberOfDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "activeBtnIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTabBtnActive",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 348,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setYearsMenuToChoose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateDateDisplay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 368,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { CommonModule, DatePipe } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nexport interface DateOptions {\r\n  dateFormat?: string;\r\n  selectedEndDate?: Date;\r\n  selectedStartDate?: Date;\r\n  disabledWeekends?: boolean;\r\n  disableRangePciker?: boolean;\r\n  isStepperYearShown?: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'cs-date-picker',\r\n  standalone: true,\r\n  templateUrl: './cs-date-picker.component.html',\r\n  styleUrl: './cs-date-picker.component.scss',\r\n  imports: [CommonModule, FormsModule],\r\n  providers: [DatePipe],\r\n})\r\nexport class CsDatePickerComponent {\r\n  @Output() dateObject = new EventEmitter<Object>();\r\n  isRightChervronEnable = false;\r\n\r\n  @Input()\r\n  set dateOptions(dateOptions: DateOptions) {\r\n    if (dateOptions) {\r\n      this.setDateOptions(dateOptions);\r\n    }\r\n  }\r\n\r\n  disabledWeekends = true;\r\n  disableRangePciker = false;\r\n  @Input() isStepperYearShown = true;\r\n  dateFormat = '';\r\n\r\n  showDropdownWithEmptyContent = false;\r\n  days: (Date | undefined)[] = [];\r\n  years: number[] = [];\r\n  months: Date[] = [];\r\n  @Input() offsetYearsMenu = 5;\r\n  @Input() isSelectionDayAfterCurrentDayEnable = true;\r\n  isDayselected = false;\r\n  isDatePickerClicked = false;\r\n  radioButtonDate = new Date();\r\n  dateTosubmit = '';\r\n  tabBtnActive: number = -1;\r\n\r\n  currentDate: Date = new Date();\r\n  endDate: Date = new Date();\r\n\r\n  selectedStartDate: Date | undefined;\r\n  selectedStartDateTMP: Date | undefined;\r\n  selectedEndDate: Date | undefined;\r\n\r\n  dateDisplayed: string = '';\r\n  today = new Date().toLocaleDateString();\r\n  currentDay = new Date();\r\n  toggleYearChoice = false;\r\n  toggleMonthChoice = false;\r\n  yearchose = 0;\r\n  toggleDate = new Date();\r\n  abbreviatedMonth: string[] = [];\r\n  ngOnInit(): void {\r\n    this.renderCalendar();\r\n    this.setYearsMenuToChoose();\r\n    this.getMonthAbreviated();\r\n  }\r\n\r\n  constructor(private datePipe: DatePipe) {}\r\n\r\n  //to populate the calendar\r\n  renderCalendar() {\r\n    this.days = [];\r\n    this.currentDate.setDate(1);\r\n    this.currentDate.setHours(0, 0, 0, 0);\r\n\r\n    this.endDate = new Date(this.currentDate);\r\n    this.endDate.setMonth(this.endDate.getMonth() + 1);\r\n    this.endDate.setDate(0);\r\n\r\n    let dayFromNextMonthToDisplay = this.endDate.getDay()\r\n      ? 7 - this.endDate.getDay()\r\n      : 0;\r\n\r\n    for (\r\n      let indexDay = this.currentDate.getDate();\r\n      indexDay <= this.endDate.getDate() + dayFromNextMonthToDisplay;\r\n      indexDay++\r\n    ) {\r\n      let dateAtIndex: Date = new Date(this.currentDate);\r\n      dateAtIndex.setDate(indexDay);\r\n\r\n      if (indexDay === this.currentDate.getDate()) {\r\n        let spliceNumberElement = this.currentDate.getDay() || 7;\r\n\r\n        for (let i = 1; i < spliceNumberElement; i++) {\r\n          this.days.splice(0, 0, undefined);\r\n        }\r\n      }\r\n      this.days.push(dateAtIndex);\r\n    }\r\n  }\r\n\r\n  setYearsMenuToChoose() {\r\n    // offset number of years before current year\r\n    // ex: this.offsetYearsMenu = 5\r\n\r\n    //get current year - offset\r\n    // ex: initialYearMenu = 2017\r\n\r\n    let initialYearMenu = this.currentDate.getFullYear() - this.offsetYearsMenu;\r\n    console.log(this.currentDate.getFullYear());\r\n\r\n    // for loop initialYearMenu untill current year\r\n    // initialYearMenu++\r\n    for (\r\n      let index = initialYearMenu;\r\n      index <= this.currentDate.getFullYear();\r\n      index++\r\n    ) {\r\n      this.years.push(index);\r\n    }\r\n  }\r\n\r\n  getMonthAbreviated() {\r\n    let locale = 'en-GB';\r\n    let objDate = new Date();\r\n    for (let index = 0; index <= 11; index++) {\r\n      this.abbreviatedMonth.push(\r\n        new Date(objDate.setMonth(index)).toLocaleString(locale, {\r\n          month: 'short',\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n  setMonthMenuToChoose() {\r\n    this.toggleMonthChoice = true;\r\n\r\n    let res = [];\r\n    let yearChosen = this.toggleDate.getFullYear();\r\n    let monthChoice =\r\n      yearChosen === new Date().getFullYear() ? new Date().getMonth() : 11;\r\n    const endDate = new Date(yearChosen, monthChoice, 1);\r\n    const startDate = new Date(endDate.setFullYear(endDate.getFullYear()));\r\n    startDate.setDate(1);\r\n    startDate.setMonth(0);\r\n    for (let index = 0; index <= endDate.getMonth(); index++) {\r\n      let tempDate = new Date(startDate.setMonth(index));\r\n      res.push(tempDate);\r\n    }\r\n    this.months = res;\r\n  }\r\n\r\n  getSelectedMonth(month: Date): void {\r\n    this.currentDate = new Date(month);\r\n    this.toggleDate = this.currentDate;\r\n    this.toggleMonthChoice = false;\r\n    this.checkIsRightChervronEnable(0);\r\n    this.renderCalendar();\r\n  }\r\n\r\n  checkIsRightChervronEnable(offset: number) {\r\n    this.currentDate = new Date(\r\n      this.currentDate.setMonth(this.currentDate.getMonth() + offset)\r\n    );\r\n    let monthOffset = new Date();\r\n    monthOffset.setMonth(monthOffset.getMonth() - 1);\r\n    this.isRightChervronEnable = this.currentDate < monthOffset;\r\n  }\r\n\r\n  moveToMonthOffset(event: any, offset: number) {\r\n    event.stopPropagation();\r\n    this.checkIsRightChervronEnable(offset);\r\n\r\n    this.toggleDate = this.currentDate;\r\n    this.renderCalendar();\r\n  }\r\n\r\n  moveToYearOffset(event: any, offset: number) {\r\n    event.stopPropagation();\r\n    const target = Number((event.target as HTMLElement)?.textContent);\r\n    console.log(target);\r\n\r\n    let calculateOffset = this.years.length - (offset + 1);\r\n    this.toggleDate = new Date(\r\n      this.toggleDate.setFullYear(target, this.toggleDate.getMonth())\r\n    );\r\n    this.currentDate = new Date(\r\n      this.currentDate.setFullYear(new Date().getFullYear() - calculateOffset)\r\n    );\r\n    this.checkIsRightChervronEnable(0);\r\n    this.setTabBtnActive(offset);\r\n    this.renderCalendar();\r\n    this.toggleYearChoice = false;\r\n    this.setMonthMenuToChoose();\r\n  }\r\n\r\n  getSelectedDay(day: Date | undefined, e: any): void {\r\n    if (day === undefined) return;\r\n\r\n    if (e.type === 'click' || e.type === 'change') {\r\n      e.stopPropagation();\r\n      this.setTabBtnActive(-1);\r\n\r\n      let weekendDay = new Date(day).getDay();\r\n      if (this.disabledWeekends && (weekendDay === 6 || weekendDay === 0))\r\n        return;\r\n\r\n      // disable current day + 1 selection if needed\r\n      this.currentDay = new Date();\r\n      if (day > this.currentDay && !this.isSelectionDayAfterCurrentDayEnable)\r\n        return;\r\n\r\n      if (this.disableRangePciker) {\r\n        this.selectedStartDate = new Date(day);\r\n        this.selectedEndDate = new Date(day);\r\n      } else {\r\n        if (\r\n          this.selectedStartDate === undefined ||\r\n          day < this.selectedStartDate ||\r\n          (day !== this.selectedStartDate && this.isDatePickerClicked === false)\r\n        ) {\r\n          this.selectedStartDate = new Date(day);\r\n          this.isDatePickerClicked = true;\r\n          // reseting endate to make sure it look like DD/MM/YYYY\r\n          this.selectedEndDate = undefined;\r\n        } else if (this.selectedStartDate && this.isDatePickerClicked) {\r\n          this.selectedEndDate = new Date(day);\r\n          this.isDatePickerClicked = false;\r\n        } else {\r\n          this.selectedStartDate = new Date(day);\r\n          this.selectedEndDate = undefined;\r\n          this.isDatePickerClicked = true;\r\n        }\r\n      }\r\n\r\n      this.updateDateDisplay();\r\n      if (\r\n        (this.selectedStartDate !== undefined &&\r\n          this.selectedEndDate !== undefined) ||\r\n        this.disableRangePciker\r\n      )\r\n        this.emitDateToParent();\r\n    }\r\n\r\n    if (\r\n      e.type === 'mouseenter' &&\r\n      this.isDatePickerClicked &&\r\n      !this.disableRangePciker\r\n    ) {\r\n      this.selectedEndDate = new Date(day);\r\n    }\r\n  }\r\n\r\n  leavePicker() {\r\n    if (this.isDatePickerClicked && this.selectedStartDate)\r\n      this.selectedEndDate = new Date(this.selectedStartDate);\r\n  }\r\n\r\n  setSelectionDate(numberOfDays: number, activeBtnIndex: number) {\r\n    let endDate = new Date();\r\n    endDate.setHours(0, 0, 0, 0);\r\n    this.selectedEndDate = new Date(endDate);\r\n    let startDate = new Date(this.selectedEndDate);\r\n    startDate.setDate(this.selectedEndDate.getDate() - numberOfDays);\r\n    this.selectedStartDate = new Date(startDate);\r\n    this.currentDate = new Date();\r\n    this.setTabBtnActive(activeBtnIndex);\r\n    this.updateDateDisplay();\r\n    this.renderCalendar();\r\n    this.emitDateToParent();\r\n  }\r\n\r\n  setDateOptions(dateOptions: DateOptions) {\r\n    this.disabledWeekends =\r\n      dateOptions.disabledWeekends !== undefined\r\n        ? dateOptions.disabledWeekends\r\n        : true;\r\n    this.disableRangePciker =\r\n      dateOptions.disableRangePciker !== undefined\r\n        ? dateOptions.disableRangePciker\r\n        : false;\r\n    this.isStepperYearShown =\r\n      dateOptions.isStepperYearShown !== undefined\r\n        ? dateOptions.isStepperYearShown\r\n        : true;\r\n\r\n    this.dateFormat = dateOptions.dateFormat || 'dd/MM/yyyy';\r\n\r\n    this.selectedEndDate = dateOptions.selectedEndDate\r\n      ? new Date(dateOptions.selectedEndDate)\r\n      : undefined;\r\n    this.selectedStartDate = dateOptions.selectedStartDate\r\n      ? new Date(dateOptions.selectedStartDate)\r\n      : undefined;\r\n    this.selectedStartDate = dateOptions.selectedStartDate\r\n      ? new Date(dateOptions.selectedStartDate)\r\n      : undefined;\r\n    this.currentDate = new Date();\r\n\r\n    if (this.selectedEndDate) {\r\n      this.selectedEndDate.setHours(0, 0, 0, 0);\r\n    }\r\n\r\n    if (this.selectedStartDate) {\r\n      this.selectedStartDate.setHours(0, 0, 0, 0);\r\n    }\r\n\r\n    this.updateDateDisplay();\r\n    this.renderCalendar();\r\n    this.emitDateToParent();\r\n  }\r\n\r\n  emitDateToParent() {\r\n    this.dateObject.emit({\r\n      startDate: this.selectedStartDate,\r\n      todate: this.selectedEndDate,\r\n    });\r\n  }\r\n\r\n  closeDropDown(e: any) {\r\n    e.stopPropagation();\r\n    if (e.relatedTarget === null && e.type === 'blur') {\r\n      this.showDropdownWithEmptyContent = false;\r\n    }\r\n    if (e.relatedTarget === null && e.type === 'focusout') {\r\n      this.showDropdownWithEmptyContent = false;\r\n    }\r\n\r\n    if (\r\n      this.isDatePickerClicked &&\r\n      !this.toggleYearChoice &&\r\n      !this.toggleMonthChoice\r\n    ) {\r\n      this.selectedEndDate = this.selectedStartDate;\r\n      // this.isDatePickerClicked = false;\r\n      // console.log('ici');\r\n    }\r\n  }\r\n\r\n  openDropDown() {\r\n    this.showDropdownWithEmptyContent = !this.showDropdownWithEmptyContent;\r\n  }\r\n\r\n  setTabBtnActive(index: number) {\r\n    this.tabBtnActive = index;\r\n  }\r\n\r\n  isSelectedStartOrEndDate(day: Date): boolean {\r\n    return (\r\n      (this.selectedStartDate !== undefined &&\r\n        this.selectedStartDate.getTime() === day.getTime()) ||\r\n      (this.selectedEndDate !== undefined &&\r\n        this.selectedEndDate.getTime() === day.getTime())\r\n    );\r\n  }\r\n\r\n  isSelectedStartDate(day: Date): boolean {\r\n    return (\r\n      this.selectedStartDate !== undefined &&\r\n      this.selectedStartDate.getTime() === day.getTime()\r\n    );\r\n  }\r\n\r\n  updateDateDisplay() {\r\n    if (this.selectedStartDate) {\r\n      this.dateDisplayed =\r\n        this.datePipe.transform(this.selectedStartDate, this.dateFormat) || '';\r\n      if (!this.disableRangePciker) {\r\n        this.dateDisplayed += this.selectedEndDate\r\n          ? ' - ' +\r\n            this.datePipe.transform(this.selectedEndDate, this.dateFormat)\r\n          : ' - ' + this.dateFormat.toUpperCase();\r\n      }\r\n    } else {\r\n      this.dateDisplayed = '';\r\n    }\r\n  }\r\n\r\n  getDaysOfWeekInAbreviateAndLocaleFormat() {\r\n    const weekdayDateMap: any = {\r\n      Mon: new Date('2020-01-06T00:00:00.000Z'),\r\n      Tue: new Date('2020-01-07T00:00:00.000Z'),\r\n      Wed: new Date('2020-01-08T00:00:00.000Z'),\r\n      Thu: new Date('2020-01-09T00:00:00.000Z'),\r\n      Fri: new Date('2020-01-10T00:00:00.000Z'),\r\n      Sat: new Date('2020-01-11T00:00:00.000Z'),\r\n      Sun: new Date('2020-01-12T00:00:00.000Z'),\r\n    };\r\n    const shortWeekdays = Object.keys(weekdayDateMap);\r\n\r\n    const getDayOfWeek = (shortName: any, locale = 'en-US', length = 'short') =>\r\n      new Intl.DateTimeFormat(locale, { weekday: 'narrow' }).format(\r\n        weekdayDateMap[shortName]\r\n      );\r\n\r\n    const getDaysOfWeek = (locale = 'en-US', length = 'short') =>\r\n      shortWeekdays.map((shortName) => getDayOfWeek(shortName, locale, length));\r\n\r\n    return getDaysOfWeek();\r\n  }\r\n\r\n  createDateObject(value: any) {\r\n    const date = new Date(value.split('/').reverse().join('/'));\r\n    return date.toString() == 'Invalid Date' ? null : date;\r\n  }\r\n\r\n  // TODO in the future\r\n  dateDisplayedChange(event: any) {\r\n    // add in the input\r\n    // (change)=\"dateDisplayedChange($event.target.value)\"\r\n    let dateChangeArray = event.target.value.replace(/\\s/g, '').split('-');\r\n    console.log(event);\r\n\r\n    let startDate = this.createDateObject(dateChangeArray[0]);\r\n\r\n    let endDate = this.createDateObject(dateChangeArray[1]);\r\n\r\n    if (startDate && endDate && startDate <= endDate) {\r\n      this.getSelectedDay(startDate, event);\r\n      this.getSelectedDay(endDate, event);\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./cs-date-picker.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 69,
                "jsdoctags": [
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "dateOptions": {
                    "name": "dateOptions",
                    "setSignature": {
                        "name": "dateOptions",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "dateOptions",
                                "type": "DateOptions",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 27,
                        "jsdoctags": [
                            {
                                "name": "dateOptions",
                                "type": "DateOptions",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"date-picker-wrapper\">\r\n  <div class=\"pb-md-0 pb-2\">\r\n    <div class=\"tk-dropdown\">\r\n      <div\r\n        class=\"tk-form-control-icon rem\"\r\n        tabindex=\"0\"\r\n        (click)=\"openDropDown()\"\r\n        (focusout)=\"closeDropDown($event)\"\r\n      >\r\n        <input\r\n          type=\"text\"\r\n          data-e2e=\"regular-input-right-icon\"\r\n          name=\"regular-input-right-icon\"\r\n          class=\"tk-form-control cursor-pointer tk-date-picker-input pb-0\"\r\n          placeholder=\"{{\r\n            dateFormat.toUpperCase() +\r\n              (disableRangePciker ? '' : ' - ' + dateFormat.toUpperCase())\r\n          }}\"\r\n          [(ngModel)]=\"dateDisplayed\"\r\n          (change)=\"dateDisplayedChange($event)\"\r\n        />\r\n        <!-- <div class=\"tk-form-control-right-icon\">\r\n          <i\r\n            class=\"icon bi\"\r\n            aria-hidden=\"true\"\r\n            [class.bi-chevron-down]=\"!showDropdownWithEmptyContent\"\r\n            [class.bi-chevron-up]=\"showDropdownWithEmptyContent\"\r\n          >\r\n          </i>\r\n        </div> -->\r\n      </div>\r\n      <ul\r\n        tabindex=\"0\"\r\n        *ngIf=\"showDropdownWithEmptyContent\"\r\n        (click)=\"closeDropDown($event)\"\r\n        (focusout)=\"closeDropDown($event)\"\r\n        class=\"tk-dropdown-content mt-0 pl-0 shadow-md\"\r\n        style=\"z-index: 999999\"\r\n      >\r\n        <li>\r\n          <div>\r\n            <div class=\"calendar p-3\">\r\n              <ng-content></ng-content>\r\n              <div\r\n                class=\"d-flex align-items-center justify-content-between my-3\"\r\n              >\r\n                <div\r\n                  class=\"d-flex align-items-center pointer hover-gray-5\"\r\n                  (click)=\"\r\n                    years.length > 1\r\n                      ? (toggleYearChoice = !toggleYearChoice)\r\n                      : toggleYearChoice;\r\n                    toggleMonthChoice = false\r\n                  \"\r\n                >\r\n                  <p class=\"font-family-csePRoman m-0\">\r\n                    {{ toggleDate | date : \"MMMM yyyy\" }}\r\n                  </p>\r\n                  <i\r\n                    aria-hidden=\"true\"\r\n                    class=\"bi ms-2\"\r\n                    [class.is-toggle]=\"toggleYearChoice\"\r\n                    [class.bi-chevron-down]=\"years.length > 1\"\r\n                  >\r\n                  </i>\r\n                </div>\r\n                <div\r\n                  *ngIf=\"!toggleYearChoice && !toggleMonthChoice\"\r\n                  class=\"px-0\"\r\n                >\r\n                  <i\r\n                    aria-hidden=\"true\"\r\n                    (click)=\"moveToMonthOffset($event, -1)\"\r\n                    class=\"bi bi-chevron-left hover-gray-5 pointer\"\r\n                  ></i>\r\n                  <i\r\n                    aria-hidden=\"true\"\r\n                    (click)=\"moveToMonthOffset($event, 1)\"\r\n                    [class.tk-picker-disabled]=\"!isRightChervronEnable\"\r\n                    [class.hover-gray-5]=\"isRightChervronEnable\"\r\n                    [class.pointer]=\"isRightChervronEnable\"\r\n                    class=\"bi bi-chevron-right ml-4 pointer\"\r\n                  ></i>\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <div class=\"d-flex flex-wrap\" *ngIf=\"toggleYearChoice\">\r\n                  <div\r\n                    *ngFor=\"let year of years; let i = index\"\r\n                    class=\"col-4 col-4 tk-btn border-0 h-auto py-2 tk-btn\"\r\n                    (click)=\"moveToYearOffset($event, i)\"\r\n                  >\r\n                    {{ year }}\r\n                  </div>\r\n                </div>\r\n                <div class=\"d-flex flex-wrap\" *ngIf=\"toggleMonthChoice\">\r\n                  <div\r\n                    *ngFor=\"let month of months; let i = index\"\r\n                    class=\"col-4 col-4 tk-btn border-0 h-auto py-2 tk-btn\"\r\n                    (click)=\"getSelectedMonth(month)\"\r\n                  >\r\n                    {{ abbreviatedMonth[i] }}\r\n                  </div>\r\n                </div>\r\n                <div *ngIf=\"!toggleYearChoice && !toggleMonthChoice\">\r\n                  <div class=\"weekdays px-0\">\r\n                    <div\r\n                      *ngFor=\"\r\n                        let dayOfWeekAbreviate of getDaysOfWeekInAbreviateAndLocaleFormat()\r\n                      \"\r\n                    >\r\n                      {{ dayOfWeekAbreviate }}\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"days px-0\" (mouseleave)=\"leavePicker()\">\r\n                    <div\r\n                      (mouseenter)=\"getSelectedDay(day, $event)\"\r\n                      (click)=\"getSelectedDay(day, $event)\"\r\n                      *ngFor=\"let day of days; let i = index\"\r\n                    >\r\n                      <div\r\n                        [ngClass]=\"{\r\n                          'outline-next-day':\r\n                            day > endDate ||\r\n                            (disabledWeekends &&\r\n                              (day.getDay() === 0 || day.getDay() === 6)) ||\r\n                            (day > currentDay &&\r\n                              !isSelectionDayAfterCurrentDayEnable)\r\n                        }\"\r\n                        [class.bg-gray-2]=\"\r\n                          day > selectedStartDate &&\r\n                          day < selectedEndDate &&\r\n                          !this.disableRangePciker\r\n                        \"\r\n                        [style.background-color]=\"\r\n                          isSelectedStartOrEndDate(day) ? 'black' : ''\r\n                        \"\r\n                        [style.color]=\"\r\n                          isSelectedStartOrEndDate(day) ? 'white' : ''\r\n                        \"\r\n                        [style.border-bottom]=\"\r\n                          isSelectedStartOrEndDate(day) ? '1px white solid' : ''\r\n                        \"\r\n                        class=\"position-relative\"\r\n                        *ngIf=\"day\"\r\n                      >\r\n                        <span>\r\n                          {{ day | date : \"d\" }}\r\n                        </span>\r\n                        <span\r\n                          [class.square-picker]=\"\r\n                            (day | date : 'M/d/yyyy') == today\r\n                          \"\r\n                          [style.background-color]=\"\r\n                            isSelectedStartOrEndDate(day) ? 'white' : 'black'\r\n                          \"\r\n                          [style.color]=\"\r\n                            isSelectedStartOrEndDate(day) ? 'white' : 'black'\r\n                          \"\r\n                        >\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "DatePickerComponent",
            "id": "component-DatePickerComponent-a4691a24d4c373e1f69e34b8f20920cf6065736377e2a6d9cf20de3f2e901fc0ee4dce108d247720833987b47d9ab0108f506441f70f305db6d8251910e1e8b1",
            "file": "src/app/components/date-picker/date-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-date-picker",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./date-picker.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "controlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "MatNativeDateModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, Input, OnInit } from '@angular/core';\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  Validators,\r\n  ReactiveFormsModule,\r\n} from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport { MatInputModule } from '@angular/material/input';\r\n\r\n@Component({\r\n  selector: 'app-date-picker',\r\n  templateUrl: './date-picker.component.html',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatInputModule,\r\n  ],\r\n})\r\nexport class DatePickerComponent implements OnInit {\r\n  @Input() form!: FormGroup;\r\n  @Input() controlName!: string;\r\n  @Input() label!: string;\r\n\r\n  constructor(private fb: FormBuilder) {}\r\n\r\n  ngOnInit() {\r\n    if (this.form && this.controlName) {\r\n      this.form.addControl(\r\n        this.controlName,\r\n        this.fb.control('', Validators.required)\r\n      );\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [formGroup]=\"form\" class=\"form-group\">\r\n  <!-- <label [for]=\"controlName\">{{ label }}</label> -->\r\n  <div class=\"input-group mt-2\">\r\n    <input\r\n      matInput\r\n      [matDatepicker]=\"picker\"\r\n      [formControlName]=\"controlName\"\r\n      [id]=\"controlName\"\r\n      class=\"form-control\"\r\n      (focus)=\"picker.open()\"\r\n      (click)=\"picker.open()\"\r\n    />\r\n  </div>\r\n  <mat-datepicker #picker>\r\n    <mat-datepicker-actions>\r\n      <button mat-button matDatepickerCancel>Cancel</button>\r\n      <button mat-raised-button matDatepickerApply>Apply</button>\r\n    </mat-datepicker-actions>\r\n  </mat-datepicker>\r\n  <div\r\n    *ngIf=\"\r\n      form && form.get(controlName)?.invalid && form.get(controlName)?.touched\r\n    \"\r\n  >\r\n    <small class=\"text-danger\">{{ label || controlName }} is required</small>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "DatePickerComponent",
            "id": "component-DatePickerComponent-d9ed6b8aedd4b9d104630a864f8b4c7e9724b097e77d524df5b89ae7231763ed157eb4c57b655cf09317f03ec07f793188b19f36f6443643858792af30d7d72a-1",
            "file": "src/app/components/ng2datepickercopy/lib/date-picker/date-picker.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "DatePickerService",
                    "type": "injectable"
                },
                {
                    "name": "DayTimeCalendarService",
                    "type": "injectable"
                },
                {
                    "name": "DayCalendarService",
                    "type": "injectable"
                },
                {
                    "name": "TimeSelectService",
                    "type": "injectable"
                },
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => DatePickerComponent), multi: true\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => DatePickerComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "dp-date-picker",
            "styleUrls": [
                "date-picker.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "date-picker.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 104,
                    "type": "IDatePickerConfig",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 107,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "displayDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 108,
                    "type": "Dayjs | string",
                    "decorators": []
                },
                {
                    "name": "maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 111,
                    "type": "SingleCalendarValue",
                    "decorators": []
                },
                {
                    "name": "maxTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 113,
                    "type": "SingleCalendarValue",
                    "decorators": []
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 110,
                    "type": "SingleCalendarValue",
                    "decorators": []
                },
                {
                    "name": "minTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 112,
                    "type": "SingleCalendarValue",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 105,
                    "type": "CalendarMode",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 106,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "theme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 109,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "close",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 115,
                    "type": "EventEmitter"
                },
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter<CalendarValue>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 116,
                    "type": "EventEmitter"
                },
                {
                    "name": "onGoToCurrent",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 117,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLeftNav",
                    "defaultValue": "new EventEmitter<INavEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 118,
                    "type": "EventEmitter"
                },
                {
                    "name": "onRightNav",
                    "defaultValue": "new EventEmitter<INavEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 119,
                    "type": "EventEmitter"
                },
                {
                    "name": "onSelect",
                    "defaultValue": "new EventEmitter<ISelectionEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 120,
                    "type": "EventEmitter"
                },
                {
                    "name": "open",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 114,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_currentDateView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dayjs",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 182
                },
                {
                    "name": "_selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dayjs[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 166
                },
                {
                    "name": "api",
                    "defaultValue": "{\r\n    open: this.showCalendars.bind(this),\r\n    close: this.hideCalendar.bind(this),\r\n    moveCalendarTo: this.moveCalendarTo.bind(this)\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDpDayPickerApi",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 140
                },
                {
                    "name": "appendToElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 136
                },
                {
                    "name": "areCalendarsShown",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 164
                },
                {
                    "name": "calendarContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 121,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'container'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "calendarWrapper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 135
                },
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 153,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "componentConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDatePickerConfigInternal",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 127
                },
                {
                    "name": "dayCalendarConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDayCalendarConfig",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 128
                },
                {
                    "name": "dayCalendarRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DayCalendarComponent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 122,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dayCalendar'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "dayTimeCalendarConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDayTimeCalendarConfig",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 130
                },
                {
                    "name": "dayTimeCalendarRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DayTimeCalendarComponent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 124,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'daytimeCalendar'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "globalListenersUnlisteners",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 138
                },
                {
                    "name": "handleInnerElementClickUnlisteners",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 137
                },
                {
                    "name": "inputElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLInputElement>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 126,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'inputElement'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "inputElementValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 134
                },
                {
                    "name": "inputValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CalendarValue",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 132
                },
                {
                    "name": "isFocusedTrigger",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 133
                },
                {
                    "name": "isInitialized",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "monthCalendarRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MonthCalendarComponent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 123,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'monthCalendar'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "onOpenDelayTimeoutHandler",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 147,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "origin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef | HTMLElement",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 146
                },
                {
                    "name": "overlayPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConnectionPositionPair[] | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 183
                },
                {
                    "name": "selectEvent",
                    "defaultValue": "SelectEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 145
                },
                {
                    "name": "timeSelectConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITimeSelectConfig",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 131
                },
                {
                    "name": "timeSelectRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TimeSelectComponent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 125,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'timeSelect'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "validateFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateValidator",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 139
                },
                {
                    "name": "yearCalendarConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IYearCalendarConfig",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 129
                }
            ],
            "methodsClass": [
                {
                    "name": "dateSelected",
                    "args": [
                        {
                            "name": "date",
                            "type": "IDate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "granularity",
                            "type": "UnitType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "SelectEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ignoreClose",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 393,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "IDate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "granularity",
                            "type": "UnitType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "SelectEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ignoreClose",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goToCurrent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 458,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hideCalendar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 356,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 302,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initValidators",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 274,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "inputBlurred",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 339,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "inputFocused",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 322,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "moveCalendarTo",
                    "args": [
                        {
                            "name": "date",
                            "type": "SingleCalendarValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 423,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "SingleCalendarValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 291,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 450,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 286,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBodyClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 220,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChangeCallback",
                    "args": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "__",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 248,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "__",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "onDateClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 407,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onKeyPress",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 413,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLeftNavClick",
                    "args": [
                        {
                            "name": "change",
                            "type": "INavEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 427,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "change",
                            "type": "INavEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRightNavClick",
                    "args": [
                        {
                            "name": "change",
                            "type": "INavEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 432,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "change",
                            "type": "INavEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTouchedCallback",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 255,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onViewDateChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "CalendarValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 368,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "CalendarValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "processOnChangeCallback",
                    "args": [
                        {
                            "name": "selected",
                            "type": "Dayjs[] | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "CalendarValue",
                    "typeParameters": [],
                    "line": 262,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "Dayjs[] | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 244,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 251,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 297,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showCalendars",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 344,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startGlobalListeners",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 437,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "stopGlobalListeners",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 445,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "formControl",
                            "type": "UntypedFormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors",
                    "typeParameters": [],
                    "line": 258,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formControl",
                            "type": "UntypedFormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "CalendarValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 230,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "CalendarValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 208
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "DayCalendarComponent",
                    "type": "component"
                },
                {
                    "name": "MonthCalendarComponent",
                    "type": "component"
                },
                {
                    "name": "TimeSelectComponent",
                    "type": "component"
                },
                {
                    "name": "DayTimeCalendarComponent",
                    "type": "component"
                },
                {
                    "name": "YearCalendarComponent",
                    "type": "component"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "OverlayModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {IDate} from '../common/models/date.model';\r\nimport {UtilsService} from '../common/services/utils/utils.service';\r\nimport {CalendarMode} from '../common/types/calendar-mode';\r\nimport {ECalendarMode} from '../common/types/calendar-mode-enum';\r\nimport {CalendarValue} from '../common/types/calendar-value';\r\nimport {ECalendarValue} from '../common/types/calendar-value-enum';\r\nimport {SingleCalendarValue} from '../common/types/single-calendar-value';\r\nimport {IDayCalendarConfig} from '../day-calendar/day-calendar-config.model';\r\nimport {DayCalendarComponent} from '../day-calendar/day-calendar.component';\r\nimport {DayCalendarService} from '../day-calendar/day-calendar.service';\r\nimport {IDayTimeCalendarConfig} from '../day-time-calendar/day-time-calendar-config.model';\r\nimport {DayTimeCalendarService} from '../day-time-calendar/day-time-calendar.service';\r\nimport {ITimeSelectConfig} from '../time-select/time-select-config.model';\r\nimport {TimeSelectComponent} from '../time-select/time-select.component';\r\nimport {TimeSelectService} from '../time-select/time-select.service';\r\nimport {IDatePickerConfig, IDatePickerConfigInternal} from './date-picker-config.model';\r\nimport {IDpDayPickerApi} from './date-picker.api';\r\nimport {DatePickerService} from './date-picker.service';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  Renderer2,\r\n  SimpleChanges,\r\n  ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {\r\n  ControlValueAccessor,\r\n  UntypedFormControl,\r\n  NG_VALIDATORS,\r\n  NG_VALUE_ACCESSOR,\r\n  ValidationErrors,\r\n  Validator,\r\n  FormsModule\r\n} from '@angular/forms';\r\n\r\nimport {DateValidator} from '../common/types/validator.type';\r\nimport {MonthCalendarComponent} from '../month-calendar/month-calendar.component';\r\nimport {DayTimeCalendarComponent} from '../day-time-calendar/day-time-calendar.component';\r\nimport {INavEvent} from '../common/models/navigation-event.model';\r\nimport {SelectEvent} from '../common/types/selection-event.enum';\r\nimport {ISelectionEvent} from '../common/types/selection-event.model';\r\nimport {Dayjs, UnitType} from 'dayjs';\r\nimport {dayjsRef} from '../common/dayjs/dayjs.ref';\r\nimport {ConnectionPositionPair} from '@angular/cdk/overlay';\r\nimport { DatePickerDirective } from './date-picker.directive';\r\nimport { CalendarNavComponent } from '../calendar-nav/calendar-nav.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { OverlayModule } from '@angular/cdk/overlay';\r\nimport { YearCalendarComponent } from '../year-calendar/year-calendar.component';\r\nimport { IYearCalendarConfig } from '../year-calendar/year-calendar-config';\r\n\r\n@Component({\r\n    selector: 'dp-date-picker',\r\n    templateUrl: 'date-picker.component.html',\r\n    styleUrls: ['date-picker.component.less'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    imports: [\r\n          DayCalendarComponent,\r\n          MonthCalendarComponent,\r\n          TimeSelectComponent,\r\n          DayTimeCalendarComponent,\r\n          YearCalendarComponent,\r\n          FormsModule,\r\n          CommonModule,\r\n          OverlayModule\r\n    ],\r\n    providers: [\r\n        DatePickerService,\r\n        DayTimeCalendarService,\r\n        DayCalendarService,\r\n        TimeSelectService,\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef(() => DatePickerComponent),\r\n            multi: true\r\n        },\r\n        {\r\n            provide: NG_VALIDATORS,\r\n            useExisting: forwardRef(() => DatePickerComponent),\r\n            multi: true\r\n        }\r\n    ],\r\n    standalone: true\r\n})\r\nexport class DatePickerComponent implements OnChanges,\r\n                                            OnInit,\r\n                                            ControlValueAccessor,\r\n                                            Validator,\r\n                                            OnDestroy {\r\n  isInitialized: boolean = false;\r\n  @Input() config!: IDatePickerConfig;\r\n  @Input() mode!: CalendarMode;\r\n  @Input() placeholder!: string;\r\n  @Input() disabled!: boolean;\r\n  @Input() displayDate!: Dayjs | string;\r\n  @HostBinding('class') @Input() theme!: string;\r\n  @Input() minDate!: SingleCalendarValue;\r\n  @Input() maxDate!: SingleCalendarValue;\r\n  @Input() minTime!: SingleCalendarValue;\r\n  @Input() maxTime!: SingleCalendarValue;\r\n  @Output() open = new EventEmitter<void>();\r\n  @Output() close = new EventEmitter<void>();\r\n  @Output() onChange = new EventEmitter<CalendarValue>();\r\n  @Output() onGoToCurrent = new EventEmitter<void>();\r\n  @Output() onLeftNav = new EventEmitter<INavEvent>();\r\n  @Output() onRightNav = new EventEmitter<INavEvent>();\r\n  @Output() onSelect = new EventEmitter<ISelectionEvent>();\r\n  @ViewChild('container') calendarContainer!: ElementRef;\r\n  @ViewChild('dayCalendar') dayCalendarRef!: DayCalendarComponent;\r\n  @ViewChild('monthCalendar') monthCalendarRef!: MonthCalendarComponent;\r\n  @ViewChild('daytimeCalendar') dayTimeCalendarRef!: DayTimeCalendarComponent;\r\n  @ViewChild('timeSelect') timeSelectRef!: TimeSelectComponent;\r\n  @ViewChild('inputElement') inputElement!: ElementRef<HTMLInputElement>;\r\n  componentConfig!: IDatePickerConfigInternal;\r\n  dayCalendarConfig!: IDayCalendarConfig;\r\n  yearCalendarConfig!: IYearCalendarConfig;\r\n  dayTimeCalendarConfig!: IDayTimeCalendarConfig;\r\n  timeSelectConfig!: ITimeSelectConfig;\r\n  inputValue!: CalendarValue;\r\n  isFocusedTrigger = false;\r\n  inputElementValue!: string;\r\n  calendarWrapper!: HTMLElement;\r\n  appendToElement!: HTMLElement;\r\n  handleInnerElementClickUnlisteners!: Function[];\r\n  globalListenersUnlisteners: Function[] = [];\r\n  validateFn!: DateValidator;\r\n  api: IDpDayPickerApi = {\r\n    open: this.showCalendars.bind(this),\r\n    close: this.hideCalendar.bind(this),\r\n    moveCalendarTo: this.moveCalendarTo.bind(this)\r\n  };\r\n  selectEvent = SelectEvent;\r\n  origin!: ElementRef | HTMLElement;\r\n  private onOpenDelayTimeoutHandler: any;\r\n\r\n  constructor(private readonly dayPickerService: DatePickerService,\r\n              private readonly elemRef: ElementRef,\r\n              private readonly renderer: Renderer2,\r\n              private readonly utilsService: UtilsService,\r\n              public readonly cd: ChangeDetectorRef) {\r\n  }\r\n\r\n  get openOnFocus(): boolean {\r\n    return this.componentConfig.openOnFocus ?? false;\r\n  }\r\n\r\n  get openOnClick(): boolean {\r\n    return this.componentConfig.openOnClick ?? false;\r\n  }\r\n\r\n  areCalendarsShown: boolean = false;\r\n\r\n  _selected!: Dayjs[];\r\n\r\n  get selected(): Dayjs[] {\r\n    return this._selected;\r\n  }\r\n\r\n  set selected(selected: Dayjs[]) {\r\n    this._selected = selected;\r\n    this.inputElementValue = (<string[]>this.utilsService\r\n      .convertFromDayjsArray(this.componentConfig.format ?? '', selected, ECalendarValue.StringArr))\r\n      .join(' | ');\r\n    const val = this.processOnChangeCallback(selected);\r\n    this.onChangeCallback(val, false);\r\n    this.onChange.emit(val);\r\n  }\r\n\r\n  _currentDateView!: Dayjs;\r\n  overlayPosition!: ConnectionPositionPair[] | undefined;\r\n\r\n  get currentDateView(): Dayjs {\r\n    return this._currentDateView;\r\n  }\r\n\r\n  set currentDateView(date: Dayjs) {\r\n    this._currentDateView = date;\r\n\r\n    if (this.dayCalendarRef) {\r\n      this.dayCalendarRef.moveCalendarTo(date);\r\n    }\r\n\r\n    if (this.monthCalendarRef) {\r\n      this.monthCalendarRef.moveCalendarTo(date);\r\n    }\r\n\r\n    if (this.dayTimeCalendarRef) {\r\n      this.dayTimeCalendarRef.moveCalendarTo(date);\r\n    }\r\n\r\n    this.displayDate = date;\r\n  }\r\n\r\n  @HostListener('click')\r\n  onClick(): void {\r\n    if (!this.openOnClick) {\r\n      return;\r\n    }\r\n\r\n    if (!this.isFocusedTrigger && !this.disabled) {\r\n      if (!this.areCalendarsShown) {\r\n        this.showCalendars();\r\n      }\r\n    }\r\n  }\r\n\r\n  onBodyClick(event: MouseEvent) {\r\n    if (this.inputElement.nativeElement === event.target) {\r\n      return;\r\n    }\r\n\r\n    if (this.componentConfig.hideOnOutsideClick) {\r\n      this.hideCalendar();\r\n    }\r\n  }\r\n\r\n  writeValue(value: CalendarValue): void {\r\n    this.inputValue = value;\r\n\r\n    if (value || value === '') {\r\n      this.selected = this.utilsService\r\n        .convertToDayjsArray(value, this.componentConfig);\r\n      this.init();\r\n    } else {\r\n      this.selected = [];\r\n    }\r\n\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onChangeCallback = fn;\r\n  }\r\n\r\n  onChangeCallback(_: any, __: boolean) {\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouchedCallback = fn;\r\n  }\r\n\r\n  onTouchedCallback() {\r\n  }\r\n\r\n  validate(formControl: UntypedFormControl): ValidationErrors {\r\n    return this.validateFn(formControl.value);\r\n  }\r\n\r\n  processOnChangeCallback(selected: Dayjs[] | string): CalendarValue {\r\n    if (typeof selected === 'string') {\r\n      return selected;\r\n    } else {\r\n      return this.utilsService.convertFromDayjsArray(\r\n        this.componentConfig.format ?? '',\r\n        selected,\r\n        this.componentConfig.returnedValueType || this.utilsService.getInputType(this.inputValue, this.componentConfig.allowMultiSelect ?? false)\r\n      );\r\n    }\r\n  }\r\n\r\n  initValidators(): void {\r\n    this.validateFn = this.utilsService.createValidator(\r\n      {\r\n        minDate: this.minDate,\r\n        maxDate: this.maxDate,\r\n        minTime: this.minTime,\r\n        maxTime: this.maxTime\r\n      }, this.componentConfig.format ?? '', this.mode);\r\n\r\n    this.onChangeCallback(this.processOnChangeCallback(this.selected), false);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.isInitialized = true;\r\n    this.init();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (this.isInitialized) {\r\n      this.init();\r\n    }\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  init(): void {\r\n    this.componentConfig = this.dayPickerService.getConfig(this.config, this.mode);\r\n    this.currentDateView = this.displayDate\r\n      ? this.utilsService.convertToDayjs(this.displayDate, this.componentConfig.format ?? '')\r\n      : this.utilsService\r\n        .getDefaultDisplayDate(\r\n          this.currentDateView,\r\n          this.selected,\r\n          this.componentConfig.allowMultiSelect ?? false,\r\n          this.componentConfig.min ?? dayjsRef()\r\n        );\r\n    this.dayCalendarConfig = this.dayPickerService.getDayConfigService(this.componentConfig);\r\n    this.yearCalendarConfig = this.dayPickerService.getYearConfigService(this.componentConfig);\r\n    this.dayTimeCalendarConfig = this.dayPickerService.getDayTimeConfig(this.componentConfig);\r\n    this.timeSelectConfig = this.dayPickerService.getTimeConfig(this.componentConfig);\r\n    this.initValidators();\r\n    this.overlayPosition = this.dayPickerService.getOverlayPosition(this.componentConfig);\r\n    this.origin = this.utilsService.getNativeElement(this.componentConfig.inputElementContainer ?? this.elemRef) ?? this.elemRef;\r\n  }\r\n\r\n  inputFocused(): void {\r\n    if (!this.openOnFocus) {\r\n      return;\r\n    }\r\n\r\n    clearTimeout(this.onOpenDelayTimeoutHandler);\r\n    this.isFocusedTrigger = true;\r\n    this.onOpenDelayTimeoutHandler = setTimeout(() => {\r\n      if (!this.areCalendarsShown) {\r\n        this.showCalendars();\r\n      }\r\n\r\n      this.isFocusedTrigger = false;\r\n      this.cd.markForCheck();\r\n    }, this.componentConfig.onOpenDelay);\r\n  }\r\n\r\n  inputBlurred(): void {\r\n    clearTimeout(this.onOpenDelayTimeoutHandler);\r\n    this.onTouchedCallback();\r\n  }\r\n\r\n  showCalendars(): void {\r\n    this.areCalendarsShown = true;\r\n    this.startGlobalListeners();\r\n\r\n    if (this.timeSelectRef) {\r\n      this.timeSelectRef.api.triggerChange();\r\n    }\r\n\r\n    this.open.emit();\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  hideCalendar(): void {\r\n    this.areCalendarsShown = false;\r\n\r\n    if (this.dayCalendarRef) {\r\n      this.dayCalendarRef.api.toggleCalendarMode(ECalendarMode.Day);\r\n    }\r\n    this.stopGlobalListeners();\r\n\r\n    this.close.emit();\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  onViewDateChange(value: CalendarValue): void {\r\n    const strVal = value ? this.utilsService.convertToString(value, this.componentConfig.format ?? '') : '';\r\n    if (this.dayPickerService.isValidInputDateValue(strVal, this.componentConfig)) {\r\n      this.selected = this.dayPickerService.convertInputValueToDayjsArray(strVal, this.componentConfig);\r\n      this.currentDateView = this.selected.length\r\n        ? this.utilsService.getDefaultDisplayDate(\r\n          dayjsRef(),\r\n          this.selected,\r\n          this.componentConfig.allowMultiSelect ?? false,\r\n          this.componentConfig.min ?? dayjsRef()\r\n        )\r\n        : this.currentDateView;\r\n\r\n      this.onSelect.emit({\r\n        date: strVal,\r\n        type: SelectEvent.INPUT,\r\n        granularity: 'day'\r\n      })\r\n    } else {\r\n      this._selected = this.utilsService\r\n        .getValidDayjsArray(strVal, this.componentConfig.format ?? '');\r\n      this.onChangeCallback(this.processOnChangeCallback(strVal), true);\r\n    }\r\n  }\r\n\r\n  dateSelected(date: IDate, granularity: UnitType, type: SelectEvent, ignoreClose?: boolean): void {\r\n    this.selected = this.utilsService\r\n      .updateSelected(this.componentConfig.allowMultiSelect ?? false, this.selected, date, granularity);\r\n    if (!ignoreClose) {\r\n      this.onDateClick();\r\n    }\r\n\r\n    this.onSelect.emit({\r\n      date: date.date,\r\n      granularity,\r\n      type\r\n    });\r\n  }\r\n\r\n  onDateClick(): void {\r\n    if (this.componentConfig.closeOnSelect) {\r\n      setTimeout(this.hideCalendar.bind(this), this.componentConfig.closeOnSelectDelay);\r\n    }\r\n  }\r\n\r\n  onKeyPress(event: KeyboardEvent): void {\r\n    switch (event.key) {\r\n      case ('Escape'):\r\n      case ('Esc'):\r\n      case ('Tab'):\r\n        this.hideCalendar();\r\n        break;\r\n    }\r\n  }\r\n\r\n  moveCalendarTo(date: SingleCalendarValue): void {\r\n    this.currentDateView = this.utilsService.convertToDayjs(date, this.componentConfig.format ?? '');\r\n  }\r\n\r\n  onLeftNavClick(change: INavEvent): void {\r\n    this.displayDate = change.to;\r\n    this.onLeftNav.emit(change);\r\n  }\r\n\r\n  onRightNavClick(change: INavEvent): void {\r\n    this.displayDate = change.to;\r\n    this.onRightNav.emit(change);\r\n  }\r\n\r\n  startGlobalListeners(): void {\r\n    this.globalListenersUnlisteners.push(\r\n      this.renderer.listen(document, 'keydown', (e: KeyboardEvent) => {\r\n        this.onKeyPress(e);\r\n      })\r\n    );\r\n  }\r\n\r\n  stopGlobalListeners(): void {\r\n    this.globalListenersUnlisteners.forEach((ul) => ul());\r\n    this.globalListenersUnlisteners = [];\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.handleInnerElementClickUnlisteners.forEach(ul => ul());\r\n\r\n    if (this.appendToElement) {\r\n      this.appendToElement.removeChild(this.calendarWrapper);\r\n    }\r\n  }\r\n\r\n  goToCurrent(): void {\r\n    this.currentDateView = dayjsRef();\r\n    this.onGoToCurrent.emit()\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../common/styles/variables';\n\n& {\n  dp-date-picker {\n    display: inline-block;\n\n    &.dp-material {\n      .dp-picker-input {\n        box-sizing: border-box;\n        height: @basic-height;\n        width: (@basic-height * 7) + 3px;\n        font-size: 13px;\n        outline: none;\n      }\n    }\n\n    .dp-input-container {\n      position: relative;\n    }\n\n    .dp-selected {\n      background: @c-primary;\n      color: @c-white;\n    }\n  }\n\n  .dp-popup {\n    position: relative;\n    display: inline-block;\n    background: @c-white;\n    box-shadow: 1px 1px 5px 0 fade(@c-black, 10);\n    border-left: 1px solid fade(@c-black, 10);\n    border-right: 1px solid fade(@c-black, 10);\n    border-bottom: 1px solid fade(@c-black, 10);\n    white-space: nowrap;\n  }\n}\n",
                    "styleUrl": "date-picker.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dayPickerService",
                        "type": "DatePickerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "elemRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 147,
                "jsdoctags": [
                    {
                        "name": "dayPickerService",
                        "type": "DatePickerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "elemRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnChanges",
                "OnInit",
                "ControlValueAccessor",
                "Validator",
                "OnDestroy"
            ],
            "accessors": {
                "openOnFocus": {
                    "name": "openOnFocus",
                    "getSignature": {
                        "name": "openOnFocus",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 156
                    }
                },
                "openOnClick": {
                    "name": "openOnClick",
                    "getSignature": {
                        "name": "openOnClick",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 160
                    }
                },
                "selected": {
                    "name": "selected",
                    "setSignature": {
                        "name": "selected",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "selected",
                                "type": "Dayjs[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 172,
                        "jsdoctags": [
                            {
                                "name": "selected",
                                "type": "Dayjs[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "selected",
                        "type": "[]",
                        "returnType": "Dayjs[]",
                        "line": 168
                    }
                },
                "currentDateView": {
                    "name": "currentDateView",
                    "setSignature": {
                        "name": "currentDateView",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "date",
                                "type": "Dayjs",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 189,
                        "jsdoctags": [
                            {
                                "name": "date",
                                "type": "Dayjs",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "currentDateView",
                        "type": "",
                        "returnType": "Dayjs",
                        "line": 185
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "DatePickerComponent-1",
            "templateData": "<div [ngClass]=\"{'dp-open': areCalendarsShown}\" dir=\"ltr\" #trigger>\r\n  <div [attr.data-hidden]=\"componentConfig.hideInputContainer\"\r\n       [hidden]=\"componentConfig.hideInputContainer\"\r\n       class=\"dp-input-container\">\r\n    <input #inputElement\r\n           (blur)=\"inputBlurred()\"\r\n           (focus)=\"inputFocused()\"\r\n           (keydown.enter)=\"componentConfig.closeOnEnter && hideCalendar()\"\r\n           (ngModelChange)=\"onViewDateChange($event)\"\r\n           [disabled]=\"disabled\"\r\n           [ngModel]=\"inputElementValue\"\r\n           [placeholder]=\"placeholder\"\r\n           [readonly]=\"componentConfig.disableKeypress\"\r\n           class=\"dp-picker-input\"\r\n           type=\"text\"/>\r\n  </div>\r\n  <ng-template cdkConnectedOverlay\r\n               [cdkConnectedOverlayPositions]=\"overlayPosition\"\r\n               [cdkConnectedOverlayOrigin]=\"origin || trigger\"\r\n               [cdkConnectedOverlayOpen]=\"areCalendarsShown\"\r\n               [cdkConnectedOverlayHasBackdrop]=\"false\"\r\n               (overlayOutsideClick)=\"onBodyClick($event)\">\r\n    <div #container>\r\n      <div [attr.data-hidden]=\"!areCalendarsShown\"\r\n           [ngSwitch]=\"mode\"\r\n           class=\"dp-popup {{theme}}\">\r\n        <dp-day-calendar #dayCalendar\r\n                         (onGoToCurrent)=\"goToCurrent()\"\r\n                         (onLeftNav)=\"onLeftNavClick($event)\"\r\n                         (onRightNav)=\"onRightNavClick($event)\"\r\n                         (onSelect)=\"dateSelected($event, 'day', selectEvent.SELECTION, false)\"\r\n                         *ngSwitchCase=\"'day'\"\r\n                         [config]=\"dayCalendarConfig\"\r\n                         [displayDate]=\"displayDate\"\r\n                         [ngModel]=\"_selected\"\r\n                         [theme]=\"theme\">\r\n        </dp-day-calendar>\r\n\r\n        <dp-month-calendar #monthCalendar\r\n                           (onGoToCurrent)=\"goToCurrent()\"\r\n                           (onLeftNav)=\"onLeftNavClick($event)\"\r\n                           (onRightNav)=\"onRightNavClick($event)\"\r\n                           (onSelect)=\"dateSelected($event, 'month', selectEvent.SELECTION, false)\"\r\n                           *ngSwitchCase=\"'month'\"\r\n                           [config]=\"dayCalendarConfig\"\r\n                           [displayDate]=\"displayDate\"\r\n                           [ngModel]=\"_selected\"\r\n                           [theme]=\"theme\">\r\n        </dp-month-calendar>\r\n\r\n        <dp-time-select #timeSelect\r\n                        (onChange)=\"dateSelected($event, 'second', selectEvent.SELECTION, true)\"\r\n                        *ngSwitchCase=\"'time'\"\r\n                        [config]=\"timeSelectConfig\"\r\n                        [ngModel]=\"_selected && _selected[0]\"\r\n                        [theme]=\"theme\">\r\n        </dp-time-select>\r\n\r\n        <dp-day-time-calendar #daytimeCalendar\r\n                              (onChange)=\"dateSelected($event, 'second', selectEvent.SELECTION, true)\"\r\n                              (onGoToCurrent)=\"goToCurrent()\"\r\n                              (onLeftNav)=\"onLeftNavClick($event)\"\r\n                              (onRightNav)=\"onRightNavClick($event)\"\r\n                              *ngSwitchCase=\"'daytime'\"\r\n                              [config]=\"dayTimeCalendarConfig\"\r\n                              [displayDate]=\"displayDate\"\r\n                              [ngModel]=\"_selected && _selected[0]\"\r\n                              [theme]=\"theme\">\r\n        </dp-day-time-calendar>\r\n\r\n        <dp-year-calendar #yearCalendar\r\n          (onLeftNav)=\"onLeftNavClick($event)\"\r\n          (onRightNav)=\"onRightNavClick($event)\"\r\n          (onSelect)=\"dateSelected($event, 'year', selectEvent.SELECTION, false)\"\r\n          [config]=\"yearCalendarConfig\"\r\n          [displayDate]=\"displayDate\"\r\n          [ngModel]=\"_selected\"\r\n          *ngSwitchCase=\"'year'\"\r\n          [theme]=\"theme\">\r\n        </dp-year-calendar>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n</div>"
        },
        {
            "name": "DayCalendarComponent",
            "id": "component-DayCalendarComponent-b0f01a6af5900f01445de89ff792613be87c56e4cb11deb5f23327285ac7ffc687124ba762d79eeb0d222593a18ed94cc2c7884445edf5c286a3a9e5c1218f57",
            "file": "src/app/components/ng2datepickercopy/lib/day-calendar/day-calendar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "DayCalendarService",
                    "type": "injectable"
                },
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => DayCalendarComponent), multi: true\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => DayCalendarComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "dp-day-calendar",
            "styleUrls": [
                "day-calendar.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "day-calendar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "IDayCalendarConfig",
                    "decorators": []
                },
                {
                    "name": "displayDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "SingleCalendarValue",
                    "decorators": []
                },
                {
                    "name": "maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "Dayjs",
                    "decorators": []
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "Dayjs",
                    "decorators": []
                },
                {
                    "name": "theme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onGoToCurrent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onLeftNav",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter<INavEvent>"
                },
                {
                    "name": "onMonthSelect",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter<IMonth>"
                },
                {
                    "name": "onNavHeaderBtnClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "EventEmitter<ECalendarMode>"
                },
                {
                    "name": "onRightNav",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "EventEmitter<INavEvent>"
                },
                {
                    "name": "onSelect",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter<IDay>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_currentDateView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dayjs | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "_selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dayjs[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 105
                },
                {
                    "name": "_shouldShowCurrent",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 90
                },
                {
                    "name": "api",
                    "defaultValue": "{\r\n    moveCalendarsBy: this.moveCalendarsBy.bind(this),\r\n    moveCalendarTo: this.moveCalendarTo.bind(this),\r\n    toggleCalendarMode: this.toggleCalendarMode.bind(this)\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "CalendarMode",
                    "defaultValue": "ECalendarMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "componentConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDayCalendarConfigInternal",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "currentCalendarMode",
                    "defaultValue": "ECalendarMode.Day",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ECalendarMode",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "dayCalendarService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DayCalendarService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 100,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "inputValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CalendarValue",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "inputValueType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ECalendarValue",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "isInited",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "monthCalendarConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMonthCalendarConfig",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "navLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "showLeftNav",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "showRightNav",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "utilsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UtilsService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 101,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "validateFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateValidator",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "weekdays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dayjs[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "weeks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDay[][]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 83
                }
            ],
            "methodsClass": [
                {
                    "name": "dayClicked",
                    "args": [
                        {
                            "name": "day",
                            "type": "IDay",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 223,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "day",
                            "type": "IDay",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDayBtnCssClass",
                    "args": [
                        {
                            "name": "day",
                            "type": "IDay",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "day",
                            "type": "IDay",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDayBtnText",
                    "args": [
                        {
                            "name": "day",
                            "type": "IDay",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 235,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "day",
                            "type": "IDay",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getWeekdayName",
                    "args": [
                        {
                            "name": "weekday",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 293,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "weekday",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goToCurrent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 344,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleConfigChange",
                    "args": [
                        {
                            "name": "config",
                            "type": "SimpleChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 349,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "SimpleChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initValidators",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "monthSelected",
                    "args": [
                        {
                            "name": "month",
                            "type": "IMonth",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 310,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "month",
                            "type": "IMonth",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveCalendarsBy",
                    "args": [
                        {
                            "name": "current",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "amount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "granularity",
                            "type": "ManipulateType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'month'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 322,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "current",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "amount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "granularity",
                            "type": "ManipulateType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'month'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveCalendarTo",
                    "args": [
                        {
                            "name": "to",
                            "type": "SingleCalendarValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 327,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "to",
                            "type": "SingleCalendarValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangeCallback",
                    "args": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLeftNavClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 255,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onMonthCalendarLeftClick",
                    "args": [
                        {
                            "name": "change",
                            "type": "INavEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 269,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "change",
                            "type": "INavEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMonthCalendarRightClick",
                    "args": [
                        {
                            "name": "change",
                            "type": "INavEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 277,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "change",
                            "type": "INavEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMonthCalendarSecondaryLeftClick",
                    "args": [
                        {
                            "name": "change",
                            "type": "INavEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 285,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "change",
                            "type": "INavEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMonthCalendarSecondaryRightClick",
                    "args": [
                        {
                            "name": "change",
                            "type": "INavEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 289,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "change",
                            "type": "INavEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRightNavClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 262,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onYearCalendarLeftClick",
                    "args": [
                        {
                            "name": "change",
                            "type": "INavEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 273,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "change",
                            "type": "INavEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onYearCalendarRightClick",
                    "args": [
                        {
                            "name": "change",
                            "type": "INavEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 281,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "change",
                            "type": "INavEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "processOnChangeCallback",
                    "args": [
                        {
                            "name": "value",
                            "type": "Dayjs[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "CalendarValue",
                    "typeParameters": [],
                    "line": 205,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Dayjs[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldShowCurrent",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 335,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleCalendarMode",
                    "args": [
                        {
                            "name": "mode",
                            "type": "ECalendarMode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 301,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mode",
                            "type": "ECalendarMode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "formControl",
                            "type": "UntypedFormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | any",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formControl",
                            "type": "UntypedFormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "CalendarValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "CalendarValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "yearSelected",
                    "args": [
                        {
                            "name": "year",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 316,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "year",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MonthCalendarComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "CalendarNavComponent",
                    "type": "component"
                },
                {
                    "name": "YearCalendarComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ECalendarValue} from '../common/types/calendar-value-enum';\r\nimport {SingleCalendarValue} from '../common/types/single-calendar-value';\r\nimport {ECalendarMode} from '../common/types/calendar-mode-enum';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  HostBinding,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Output,\r\n  SimpleChange,\r\n  SimpleChanges,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {DayCalendarService} from './day-calendar.service';\r\n\r\nimport dayjs, {Dayjs, ManipulateType} from 'dayjs';\r\nimport {IDayCalendarConfig, IDayCalendarConfigInternal} from './day-calendar-config.model';\r\nimport {IDay} from './day.model';\r\nimport {\r\n  ControlValueAccessor,\r\n  UntypedFormControl,\r\n  NG_VALIDATORS,\r\n  NG_VALUE_ACCESSOR,\r\n  ValidationErrors,\r\n  Validator,\r\n  FormsModule\r\n} from '@angular/forms';\r\nimport {CalendarValue} from '../common/types/calendar-value';\r\nimport {UtilsService} from '../common/services/utils/utils.service';\r\nimport {IMonthCalendarConfig} from '../month-calendar/month-calendar-config';\r\nimport {IMonth} from '../month-calendar/month.model';\r\nimport {DateValidator} from '../common/types/validator.type';\r\nimport {INavEvent} from '../common/models/navigation-event.model';\r\nimport {dayjsRef} from '../common/dayjs/dayjs.ref';\r\nimport { MonthCalendarComponent } from '../month-calendar/month-calendar.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { CalendarNavComponent } from '../calendar-nav/calendar-nav.component';\r\nimport { YearCalendarComponent } from '../year-calendar/year-calendar.component';\r\n\r\n@Component({\r\n    selector: 'dp-day-calendar',\r\n    templateUrl: 'day-calendar.component.html',\r\n    styleUrls: ['day-calendar.component.less'],\r\n    imports: [MonthCalendarComponent, CommonModule, FormsModule, CalendarNavComponent, YearCalendarComponent],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [\r\n        DayCalendarService,\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef(() => DayCalendarComponent),\r\n            multi: true\r\n        },\r\n        {\r\n            provide: NG_VALIDATORS,\r\n            useExisting: forwardRef(() => DayCalendarComponent),\r\n            multi: true\r\n        }\r\n    ],\r\n    standalone: true\r\n})\r\nexport class DayCalendarComponent implements OnInit, OnChanges, ControlValueAccessor, Validator {\r\n\r\n  @Input() config!: IDayCalendarConfig;\r\n  @Input() displayDate!: SingleCalendarValue;\r\n  @Input() minDate!: Dayjs;\r\n  @Input() maxDate!: Dayjs;\r\n  @HostBinding('class') @Input() theme!: string;\r\n  @Output() onSelect: EventEmitter<IDay> = new EventEmitter();\r\n  @Output() onMonthSelect: EventEmitter<IMonth> = new EventEmitter();\r\n  @Output() onNavHeaderBtnClick: EventEmitter<ECalendarMode> = new EventEmitter();\r\n  @Output() onGoToCurrent: EventEmitter<void> = new EventEmitter();\r\n  @Output() onLeftNav: EventEmitter<INavEvent> = new EventEmitter();\r\n  @Output() onRightNav: EventEmitter<INavEvent> = new EventEmitter();\r\n  CalendarMode = ECalendarMode;\r\n  isInited: boolean = false;\r\n  componentConfig!: IDayCalendarConfigInternal;\r\n  weeks!: IDay[][];\r\n  weekdays!: Dayjs[];\r\n  inputValue!: CalendarValue;\r\n  inputValueType!: ECalendarValue;\r\n  validateFn!: DateValidator;\r\n  currentCalendarMode: ECalendarMode = ECalendarMode.Day;\r\n  monthCalendarConfig!: IMonthCalendarConfig;\r\n  _shouldShowCurrent: boolean = true;\r\n  navLabel!: string;\r\n  showLeftNav!: boolean;\r\n  showRightNav!: boolean;\r\n  api = {\r\n    moveCalendarsBy: this.moveCalendarsBy.bind(this),\r\n    moveCalendarTo: this.moveCalendarTo.bind(this),\r\n    toggleCalendarMode: this.toggleCalendarMode.bind(this)\r\n  };\r\n\r\n  constructor(public readonly dayCalendarService: DayCalendarService,\r\n              public readonly utilsService: UtilsService,\r\n              public readonly cd: ChangeDetectorRef) {\r\n  }\r\n\r\n  _selected!: Dayjs[];\r\n\r\n  get selected(): Dayjs[] {\r\n    return this._selected;\r\n  }\r\n\r\n  set selected(selected: Dayjs[]) {\r\n    this._selected = selected;\r\n    this.onChangeCallback(this.processOnChangeCallback(selected));\r\n  }\r\n\r\n  _currentDateView!: Dayjs | null;\r\n\r\n  get currentDateView(): Dayjs {\r\n    return this._currentDateView || dayjsRef();\r\n  }\r\n\r\n  set currentDateView(current: Dayjs) {\r\n    this._currentDateView = dayjsRef(current.toDate());\r\n    this.weeks = this.dayCalendarService\r\n      .generateMonthArray(this.componentConfig, this._currentDateView, this.selected);\r\n    this.navLabel = this.dayCalendarService.getHeaderLabel(this.componentConfig, this._currentDateView);\r\n    this.showLeftNav = true; //this.dayCalendarService.shouldShowLeft(this.componentConfig.min ?? dayjsRef(), this.currentDateView);\r\n    this.showRightNav = true; //this.dayCalendarService.shouldShowRight(this.componentConfig.max ?? dayjsRef(), this.currentDateView);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.isInited = true;\r\n    this.init();\r\n    this.initValidators();\r\n  }\r\n\r\n  init() {\r\n    this.componentConfig = this.dayCalendarService.getConfig(this.config);\r\n    this.selected = this.selected || [];\r\n    this.currentDateView = this.displayDate\r\n      ? this.utilsService.convertToDayjs(this.displayDate, this.componentConfig.format ?? '')\r\n      : this.utilsService\r\n        .getDefaultDisplayDate(\r\n          this.currentDateView,\r\n          this.selected,\r\n          this.componentConfig.allowMultiSelect ?? false,\r\n          this.componentConfig.min ?? dayjsRef()\r\n        );\r\n    this.weekdays = this.dayCalendarService\r\n      .generateWeekdays(this.componentConfig.firstDayOfWeek ?? 'su');\r\n    this.inputValueType = this.utilsService.getInputType(this.inputValue, this.componentConfig.allowMultiSelect ?? false);\r\n    this.monthCalendarConfig = this.dayCalendarService.getMonthCalendarConfig(this.componentConfig);\r\n    this._shouldShowCurrent = this.shouldShowCurrent();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (this.isInited) {\r\n      const {minDate, maxDate, config} = changes;\r\n\r\n      this.handleConfigChange(config);\r\n      this.init();\r\n\r\n      if (minDate || maxDate) {\r\n        this.initValidators();\r\n      }\r\n    }\r\n  }\r\n\r\n  writeValue(value: CalendarValue): void {\r\n    this.inputValue = value;\r\n\r\n    if (value) {\r\n      this.selected = this.utilsService\r\n        .convertToDayjsArray(value, this.componentConfig);\r\n      this.inputValueType = this.utilsService\r\n        .getInputType(this.inputValue, this.componentConfig.allowMultiSelect ?? false);\r\n    } else {\r\n      this.selected = [];\r\n    }\r\n\r\n    this.weeks = this.dayCalendarService\r\n      .generateMonthArray(this.componentConfig, this.currentDateView, this.selected);\r\n\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onChangeCallback = fn;\r\n  }\r\n\r\n  onChangeCallback(_: any) {\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n  }\r\n\r\n  validate(formControl: UntypedFormControl): ValidationErrors | any {\r\n    if (this.minDate || this.maxDate) {\r\n      return this.validateFn(formControl.value);\r\n    } else {\r\n      return () => null;\r\n    }\r\n  }\r\n\r\n  processOnChangeCallback(value: Dayjs[]): CalendarValue {\r\n    return this.utilsService.convertFromDayjsArray(\r\n      this.componentConfig.format ?? '',\r\n      value,\r\n      this.componentConfig.returnedValueType || this.inputValueType\r\n    );\r\n  }\r\n\r\n  initValidators() {\r\n    this.validateFn = this.utilsService.createValidator(\r\n      {minDate: this.minDate, maxDate: this.maxDate},\r\n      this.componentConfig.format ?? '',\r\n      'day'\r\n    );\r\n\r\n    this.onChangeCallback(this.processOnChangeCallback(this.selected));\r\n  }\r\n\r\n  dayClicked(day: IDay) {\r\n    if (day.selected && !this.componentConfig.unSelectOnClick) {\r\n      return;\r\n    }\r\n\r\n    this.selected = this.utilsService\r\n      .updateSelected(this.componentConfig.allowMultiSelect ?? false, this.selected, day);\r\n    this.weeks = this.dayCalendarService\r\n      .generateMonthArray(this.componentConfig, this.currentDateView, this.selected);\r\n    this.onSelect.emit(day);\r\n  }\r\n\r\n  getDayBtnText(day: IDay): string {\r\n    return this.dayCalendarService.getDayBtnText(this.componentConfig, day.date);\r\n  }\r\n\r\n  getDayBtnCssClass(day: IDay): { [klass: string]: boolean } {\r\n    const cssClasses: { [klass: string]: boolean } = {\r\n      'dp-selected': day.selected,\r\n      'dp-current-month': !!day.currentMonth,\r\n      'dp-prev-month': !!day.prevMonth,\r\n      'dp-next-month': !!day.nextMonth,\r\n      'dp-current-day': !!day.currentDay\r\n    };\r\n    const customCssClass: string = this.dayCalendarService.getDayBtnCssClass(this.componentConfig, day.date);\r\n    if (customCssClass) {\r\n      cssClasses[customCssClass] = true;\r\n    }\r\n\r\n    return cssClasses;\r\n  }\r\n\r\n  onLeftNavClick() {\r\n    const from = dayjsRef(this.currentDateView.toDate());\r\n    this.moveCalendarsBy(this.currentDateView, -1, 'month');\r\n    const to = dayjsRef(this.currentDateView.toDate());\r\n    this.onLeftNav.emit({from, to});\r\n  }\r\n\r\n  onRightNavClick() {\r\n    const from = dayjsRef(this.currentDateView.toDate());\r\n    this.moveCalendarsBy(this.currentDateView, 1, 'month');\r\n    const to = dayjsRef(this.currentDateView.toDate());\r\n    this.onRightNav.emit({from, to});\r\n  }\r\n\r\n  onMonthCalendarLeftClick(change: INavEvent) {\r\n    this.onLeftNav.emit(change);\r\n  }\r\n\r\n  onYearCalendarLeftClick(change: INavEvent) {\r\n    this.onLeftNav.emit(change);\r\n  }\r\n\r\n  onMonthCalendarRightClick(change: INavEvent) {\r\n    this.onRightNav.emit(change);\r\n  }\r\n\r\n  onYearCalendarRightClick (change: INavEvent) {\r\n    this.onRightNav.emit(change);\r\n  }\r\n\r\n  onMonthCalendarSecondaryLeftClick(change: INavEvent) {\r\n    this.onRightNav.emit(change);\r\n  }\r\n\r\n  onMonthCalendarSecondaryRightClick(change: INavEvent) {\r\n    this.onLeftNav.emit(change);\r\n  }\r\n\r\n  getWeekdayName(weekday: Dayjs): string {\r\n    if (this.componentConfig.weekDayFormatter) {\r\n      return this.componentConfig.weekDayFormatter(weekday.day());\r\n    }\r\n\r\n    return weekday.format(this.componentConfig.weekDayFormat);\r\n  }\r\n\r\n  toggleCalendarMode(mode: ECalendarMode) {\r\n    if (this.currentCalendarMode !== mode) {\r\n      this.currentCalendarMode = mode;\r\n      this.onNavHeaderBtnClick.emit(mode);\r\n    }\r\n\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  monthSelected(month: IMonth) {\r\n    this.currentDateView = dayjsRef(month.date.toDate());\r\n    this.currentCalendarMode = ECalendarMode.Day;\r\n    this.onMonthSelect.emit(month);\r\n  }\r\n\r\n    yearSelected(year: { date: Dayjs }) {\r\n    this.currentDateView = dayjsRef(year.date.toDate());\r\n    this.currentCalendarMode = ECalendarMode.Month;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  moveCalendarsBy(current: Dayjs, amount: number, granularity: ManipulateType = 'month') {\r\n    this.currentDateView = dayjsRef(current.toDate()).add(amount, granularity);\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  moveCalendarTo(to: SingleCalendarValue) {\r\n    if (to) {\r\n      this.currentDateView = this.utilsService.convertToDayjs(to, this.componentConfig.format ?? '');\r\n    }\r\n\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  shouldShowCurrent(): boolean {\r\n    return this.utilsService.shouldShowCurrent(\r\n      this.componentConfig.showGoToCurrent ?? false,\r\n      'day',\r\n      this.componentConfig.min ?? dayjsRef(),\r\n      this.componentConfig.max ?? dayjsRef()\r\n    );\r\n  }\r\n\r\n  goToCurrent() {\r\n    this.currentDateView = dayjsRef();\r\n    this.onGoToCurrent.emit();\r\n  }\r\n\r\n  handleConfigChange(config: SimpleChange): void {\r\n    if (config) {\r\n      const prevConf: IDayCalendarConfigInternal = this.dayCalendarService.getConfig(config.previousValue);\r\n      const currentConf: IDayCalendarConfigInternal = this.dayCalendarService.getConfig(config.currentValue);\r\n\r\n      if (this.utilsService.shouldResetCurrentView(prevConf, currentConf)) {\r\n        this._currentDateView = null;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../common/styles/variables';\n\n& {\n  dp-day-calendar {\n    display: inline-block;\n\n    .dp-day-calendar-container {\n      background: @c-white;\n    }\n\n    .dp-calendar-wrapper {\n      box-sizing: border-box;\n      border: 1px solid @c-black;\n\n      .dp-calendar-weekday:first-child {\n        border-left: none;\n      }\n    }\n\n    .dp-weekdays {\n      font-size: 15px;\n      margin-bottom: 5px;\n    }\n\n    .dp-calendar-weekday {\n      box-sizing: border-box;\n      display: inline-block;\n      width: @basic-height;\n      text-align: center;\n      border-left: 1px solid @c-black;\n      border-bottom: 1px solid @c-black;\n    }\n\n    .dp-calendar-day {\n      box-sizing: border-box;\n      width: @basic-height;\n      height: @basic-height;\n      cursor: pointer;\n    }\n\n    .dp-selected {\n      background: @c-primary;\n      color: @c-white;\n    }\n\n    .dp-prev-month, .dp-next-month {\n      opacity: 0.5;\n    }\n\n    .dp-hide-near-month {\n      .dp-prev-month, .dp-next-month {\n        visibility: hidden;\n      }\n    }\n\n    .dp-week-number {\n      position: absolute;\n      font-size: 9px;\n    }\n\n    &.dp-material {\n\n      .dp-calendar-weekday {\n        height: @basic-height - 5px;\n        width: @basic-height;\n        line-height: @basic-height - 5px;\n        color: darken(@c-light-gray, 40%);\n        border: none;\n      }\n\n      .dp-calendar-wrapper {\n        border: 1px solid @c-light-gray;\n      }\n\n      .dp-calendar-month,\n      .dp-calendar-day {\n        box-sizing: border-box;\n        background: @c-white;\n        border-radius: 50%;\n        border: none;\n        outline: none;\n\n        &:hover {\n          background: @c-light-gray;\n        }\n      }\n\n      .dp-selected {\n        background: @c-primary;\n        color: @c-white;\n\n        &:hover {\n          background: @c-primary;\n        }\n      }\n\n      .dp-current-day {\n        border: 1px solid @c-primary;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "day-calendar.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dayCalendarService",
                        "type": "DayCalendarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 98,
                "jsdoctags": [
                    {
                        "name": "dayCalendarService",
                        "type": "DayCalendarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnChanges",
                "ControlValueAccessor",
                "Validator"
            ],
            "accessors": {
                "selected": {
                    "name": "selected",
                    "setSignature": {
                        "name": "selected",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "selected",
                                "type": "Dayjs[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 111,
                        "jsdoctags": [
                            {
                                "name": "selected",
                                "type": "Dayjs[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "selected",
                        "type": "[]",
                        "returnType": "Dayjs[]",
                        "line": 107
                    }
                },
                "currentDateView": {
                    "name": "currentDateView",
                    "setSignature": {
                        "name": "currentDateView",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "current",
                                "type": "Dayjs",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 122,
                        "jsdoctags": [
                            {
                                "name": "current",
                                "type": "Dayjs",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "currentDateView",
                        "type": "",
                        "returnType": "Dayjs",
                        "line": 118
                    }
                }
            },
            "templateData": "<div *ngIf=\"currentCalendarMode ===  CalendarMode.Day\" class=\"dp-day-calendar-container\" dir=\"ltr\">\r\n  <dp-calendar-nav\r\n      (onGoToCurrent)=\"goToCurrent()\"\r\n      (onLabelClick)=\"toggleCalendarMode(CalendarMode.Year)\"\r\n      (onChooseYearClick)=\"toggleCalendarMode(CalendarMode.Year)\"\r\n      (onLeftNav)=\"onLeftNavClick()\"\r\n      (onRightNav)=\"onRightNavClick()\"\r\n      [isLabelClickable]=\"componentConfig.enableMonthSelector\"\r\n      [label]=\"navLabel\"\r\n      [showGoToCurrent]=\"_shouldShowCurrent\"\r\n      [showLeftNav]=\"showLeftNav\"\r\n      [showYearButton]=\"false\"\r\n      [showRightNav]=\"showRightNav\"\r\n      [theme]=\"theme\">\r\n  </dp-calendar-nav>\r\n\r\n  <div [ngClass]=\"{'dp-hide-near-month': !componentConfig.showNearMonthDays}\"\r\n       class=\"dp-calendar-wrapper\">\r\n    <div class=\"dp-weekdays\">\r\n      <span *ngFor=\"let weekday of weekdays\"\r\n            [innerText]=\"getWeekdayName(weekday)\"\r\n            class=\"dp-calendar-weekday\">\r\n      </span>\r\n    </div>\r\n    <div *ngFor=\"let week of weeks\" class=\"dp-calendar-week\">\r\n      <span *ngIf=\"componentConfig.showWeekNumbers\"\r\n            [innerText]=\"week[0].date.isoWeek()\"\r\n            class=\"dp-week-number\">\r\n      </span>\r\n      <button (click)=\"dayClicked(day)\"\r\n              *ngFor=\"let day of week\"\r\n              [attr.data-date]=\"day.date.format(componentConfig.format)\"\r\n              [disabled]=\"day.disabled\"\r\n              [innerText]=\"getDayBtnText(day)\"\r\n              [ngClass]=\"getDayBtnCssClass(day)\"\r\n              class=\"dp-calendar-day\"\r\n              type=\"button\">\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<dp-month-calendar\r\n    (onLeftNav)=\"onMonthCalendarLeftClick($event)\"\r\n    (onLeftSecondaryNav)=\"onMonthCalendarSecondaryLeftClick($event)\"\r\n    (onNavHeaderBtnClick)=\"toggleCalendarMode(CalendarMode.Day)\"\r\n    (onRightNav)=\"onMonthCalendarRightClick($event)\"\r\n    (onRightSecondaryNav)=\"onMonthCalendarSecondaryRightClick($event)\"\r\n    (onSelect)=\"monthSelected($event)\"\r\n    *ngIf=\"currentCalendarMode ===  CalendarMode.Month\"\r\n    [config]=\"monthCalendarConfig\"\r\n    [displayDate]=\"_currentDateView\"\r\n    [ngModel]=\"_selected\"\r\n    [theme]=\"theme\">\r\n</dp-month-calendar>\r\n\r\n<dp-year-calendar\r\n    (onLeftNav)=\"onYearCalendarLeftClick($event)\"\r\n    (onLeftSecondaryNav)=\"onYearCalendarSecondaryLeftClick($event)\"\r\n    (chooseYearClicked)=\"toggleCalendarMode(CalendarMode.Day)\"\r\n    (onNavHeaderBtnClick)=\"toggleCalendarMode(CalendarMode.Day)\"\r\n    (onRightNav)=\"onYearCalendarRightClick($event)\"\r\n    (onRightSecondaryNav)=\"onYearCalendarSecondaryRightClick($event)\"\r\n    (onSelect)=\"yearSelected($event)\"\r\n    *ngIf=\"currentCalendarMode ===  CalendarMode.Year\"\r\n    [config]=\"yearCalendarConfig\"\r\n    [displayDate]=\"_currentDateView\"\r\n    [ngModel]=\"_selected\"\r\n    [theme]=\"theme\">\r\n</dp-year-calendar>"
        },
        {
            "name": "DayTimeCalendarComponent",
            "id": "component-DayTimeCalendarComponent-b0ddf2f8382091290906f4b963da62045317d2dd5cdeb4b46e30c17b7c6da28feb011c5821e07736d810b6e343ad40a5eeabeae063ee7fe1c30080322165d468",
            "file": "src/app/components/ng2datepickercopy/lib/day-time-calendar/day-time-calendar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "DayTimeCalendarService",
                    "type": "injectable"
                },
                {
                    "name": "DayCalendarService",
                    "type": "injectable"
                },
                {
                    "name": "TimeSelectService",
                    "type": "injectable"
                },
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => DayTimeCalendarComponent), multi: true\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => DayTimeCalendarComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "dp-day-time-calendar",
            "styleUrls": [
                "day-time-calendar.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "day-time-calendar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "IDayTimeCalendarConfig",
                    "decorators": []
                },
                {
                    "name": "displayDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "SingleCalendarValue",
                    "decorators": []
                },
                {
                    "name": "maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "SingleCalendarValue",
                    "decorators": []
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "SingleCalendarValue",
                    "decorators": []
                },
                {
                    "name": "theme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter<IDate>"
                },
                {
                    "name": "onGoToCurrent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onLeftNav",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter<INavEvent>"
                },
                {
                    "name": "onRightNav",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter<INavEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dayjs | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "api",
                    "defaultValue": "{\n    moveCalendarTo: this.moveCalendarTo.bind(this)\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "componentConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDayTimeCalendarConfigInternal",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "dayCalendarRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DayCalendarComponent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dayCalendar'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "dayTimeCalendarService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DayTimeCalendarService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "inputValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CalendarValue",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "inputValueType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ECalendarValue",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "isInited",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "utilsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UtilsService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "validateFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateValidator",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 81
                }
            ],
            "methodsClass": [
                {
                    "name": "dateSelected",
                    "args": [
                        {
                            "name": "day",
                            "type": "IDate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "day",
                            "type": "IDate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initValidators",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "moveCalendarTo",
                    "args": [
                        {
                            "name": "to",
                            "type": "SingleCalendarValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "to",
                            "type": "SingleCalendarValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangeCallback",
                    "args": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLeftNavClick",
                    "args": [
                        {
                            "name": "change",
                            "type": "INavEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "change",
                            "type": "INavEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRightNavClick",
                    "args": [
                        {
                            "name": "change",
                            "type": "INavEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "change",
                            "type": "INavEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "processOnChangeCallback",
                    "args": [
                        {
                            "name": "value",
                            "type": "Dayjs | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "CalendarValue",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Dayjs | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "timeChange",
                    "args": [
                        {
                            "name": "time",
                            "type": "IDate",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "time",
                            "type": "IDate",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "formControl",
                            "type": "UntypedFormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | any",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formControl",
                            "type": "UntypedFormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "CalendarValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "CalendarValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "DayCalendarComponent",
                    "type": "component"
                },
                {
                    "name": "TimeSelectComponent",
                    "type": "component"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ECalendarValue} from '../common/types/calendar-value-enum';\nimport {SingleCalendarValue} from '../common/types/single-calendar-value';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  HostBinding,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  UntypedFormControl,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  FormsModule\n} from '@angular/forms';\nimport {Dayjs} from 'dayjs';\nimport {CalendarValue} from '../common/types/calendar-value';\nimport {UtilsService} from '../common/services/utils/utils.service';\nimport {IDate} from '../common/models/date.model';\nimport {DayCalendarService} from '../day-calendar/day-calendar.service';\nimport {TimeSelectService} from '../time-select/time-select.service';\nimport {IDayTimeCalendarConfig, IDayTimeCalendarConfigInternal} from './day-time-calendar-config.model';\nimport {DayTimeCalendarService} from './day-time-calendar.service';\nimport {DateValidator} from '../common/types/validator.type';\nimport {DayCalendarComponent} from '../day-calendar/day-calendar.component';\nimport {INavEvent} from '../common/models/navigation-event.model';\nimport { TimeSelectComponent } from '../time-select/time-select.component';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n    selector: 'dp-day-time-calendar',\n    templateUrl: 'day-time-calendar.component.html',\n    styleUrls: ['day-time-calendar.component.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    imports: [CommonModule, DayCalendarComponent, TimeSelectComponent, FormsModule],\n    providers: [\n        DayTimeCalendarService,\n        DayCalendarService,\n        TimeSelectService,\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => DayTimeCalendarComponent),\n            multi: true\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => DayTimeCalendarComponent),\n            multi: true\n        }\n    ],\n    standalone: true\n})\nexport class DayTimeCalendarComponent implements OnInit, OnChanges, ControlValueAccessor, Validator {\n\n  @Input() config!: IDayTimeCalendarConfig;\n  @Input() displayDate!: SingleCalendarValue;\n  @Input() minDate!: SingleCalendarValue;\n  @Input() maxDate!: SingleCalendarValue;\n  @HostBinding('class') @Input() theme!: string;\n  @Output() onChange: EventEmitter<IDate> = new EventEmitter();\n  @Output() onGoToCurrent: EventEmitter<void> = new EventEmitter();\n  @Output() onLeftNav: EventEmitter<INavEvent> = new EventEmitter();\n  @Output() onRightNav: EventEmitter<INavEvent> = new EventEmitter();\n  @ViewChild('dayCalendar') dayCalendarRef!: DayCalendarComponent;\n  isInited: boolean = false;\n  componentConfig!: IDayTimeCalendarConfigInternal;\n  inputValue!: CalendarValue;\n  inputValueType!: ECalendarValue;\n  validateFn!: DateValidator;\n  api = {\n    moveCalendarTo: this.moveCalendarTo.bind(this)\n  };\n\n  constructor(public dayTimeCalendarService: DayTimeCalendarService,\n              public utilsService: UtilsService,\n              public cd: ChangeDetectorRef) {\n  }\n\n  _selected!: Dayjs | null;\n\n  get selected(): Dayjs | null {\n    return this._selected;\n  }\n\n  set selected(selected: Dayjs | null) {\n    this._selected = selected;\n    this.onChangeCallback(this.processOnChangeCallback(selected));\n  }\n  ;\n\n  ngOnInit() {\n    this.isInited = true;\n    this.init();\n    this.initValidators();\n  }\n\n  init() {\n    this.componentConfig = this.dayTimeCalendarService.getConfig(this.config);\n    this.inputValueType = this.utilsService.getInputType(this.inputValue, false);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this.isInited) {\n      const {minDate, maxDate} = changes;\n      this.init();\n\n      if (minDate || maxDate) {\n        this.initValidators();\n      }\n    }\n  }\n\n  writeValue(value: CalendarValue): void {\n    this.inputValue = value;\n\n    if (value) {\n      this.selected = this.utilsService\n        .convertToDayjsArray(value, {\n          format: this.componentConfig.format,\n          allowMultiSelect: false\n        })[0];\n      this.inputValueType = this.utilsService\n        .getInputType(this.inputValue, false);\n    } else {\n      this.selected = null;\n    }\n\n    this.cd.markForCheck();\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChangeCallback = fn;\n  }\n\n  onChangeCallback(_: any) {\n  }\n\n  registerOnTouched(fn: any): void {\n  }\n\n  validate(formControl: UntypedFormControl): ValidationErrors | any {\n    if (this.minDate || this.maxDate) {\n      return this.validateFn(formControl.value);\n    } else {\n      return () => null;\n    }\n  }\n\n  processOnChangeCallback(value: Dayjs | null): CalendarValue {\n    if (value == null) {\n      return '';\n    }\n    return this.utilsService.convertFromDayjsArray(\n      this.componentConfig.format ?? '',\n      [value],\n      this.componentConfig.returnedValueType || this.inputValueType\n    );\n  }\n\n  initValidators() {\n    this.validateFn = this.utilsService.createValidator(\n      {\n        minDate: this.minDate,\n        maxDate: this.maxDate\n      }, this.componentConfig.format ?? '', 'daytime');\n\n    this.onChangeCallback(this.processOnChangeCallback(this.selected));\n  }\n\n  dateSelected(day: IDate) {\n    this.selected = this.dayTimeCalendarService.updateDay(this.selected ?? day.date, day.date, this.componentConfig);\n    this.emitChange();\n  }\n\n  timeChange(time: IDate) {\n    this.selected = this.dayTimeCalendarService.updateTime(this.selected ?? time.date, time.date);\n    this.emitChange();\n  }\n\n  emitChange() {\n    if (this.selected) {\n      this.onChange.emit({date: this.selected, selected: false});\n    }\n  }\n\n  moveCalendarTo(to: SingleCalendarValue) {\n    if (to) {\n      this.dayCalendarRef.moveCalendarTo(to);\n    }\n  }\n\n  onLeftNavClick(change: INavEvent) {\n    this.onLeftNav.emit(change);\n  }\n\n  onRightNavClick(change: INavEvent) {\n    this.onRightNav.emit(change);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../common/styles/variables';\n\n& {\n  dp-day-time-calendar {\n    display: inline-block;\n\n    dp-time-select {\n      display: block;\n      border: 1px solid @c-black;\n      border-top: 0;\n    }\n\n    &.dp-material {\n      dp-time-select {\n        border: 1px solid @c-light-gray;\n        border-top: 0;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "day-time-calendar.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dayTimeCalendarService",
                        "type": "DayTimeCalendarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 84,
                "jsdoctags": [
                    {
                        "name": "dayTimeCalendarService",
                        "type": "DayTimeCalendarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnChanges",
                "ControlValueAccessor",
                "Validator"
            ],
            "accessors": {
                "selected": {
                    "name": "selected",
                    "setSignature": {
                        "name": "selected",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "selected",
                                "type": "Dayjs | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 97,
                        "jsdoctags": [
                            {
                                "name": "selected",
                                "type": "Dayjs | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "selected",
                        "type": "",
                        "returnType": "Dayjs | null",
                        "line": 93
                    }
                }
            },
            "templateData": "<dp-day-calendar #dayCalendar\n                 (onGoToCurrent)=\"onGoToCurrent.emit()\"\n                 (onLeftNav)=\"onLeftNavClick($event)\"\n                 (onRightNav)=\"onRightNavClick($event)\"\n                 (onSelect)=\"dateSelected($event)\"\n                 [config]=\"componentConfig\"\n                 [displayDate]=\"displayDate\"\n                 [ngModel]=\"_selected\"\n                 [theme]=\"theme\">\n</dp-day-calendar>\n<dp-time-select #timeSelect\n                (onChange)=\"timeChange($event)\"\n                [config]=\"componentConfig\"\n                [ngModel]=\"_selected\"\n                [theme]=\"theme\">\n</dp-time-select>\n"
        },
        {
            "name": "FetchDataComponent",
            "id": "component-FetchDataComponent-8b14352500ea1e94e1a86e6611dd3efa3b617c55072d784650166ca41358c88f028da408ab404210a03d99393073f831e08adc7da647e636cc922df7b7551d3e",
            "file": "src/app/components/fetch-data/fetch-data.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-fetch-data",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./fetch-data.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "pokemonService",
                    "defaultValue": "inject(PokemonService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "fetchPokemons",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPokemonDetails",
                    "args": [
                        {
                            "name": "pokemon",
                            "type": "Pokemon",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pokemon",
                            "type": "Pokemon",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goBackToPokemonsList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PokemonService } from './pokemon.service';\r\n\r\ninterface Pokemon {\r\n  name: string;\r\n  sprites?: {\r\n    front_default: string;\r\n  };\r\n  image: string;\r\n  id: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-fetch-data',\r\n  templateUrl: './fetch-data.component.html',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n})\r\nexport class FetchDataComponent implements OnInit {\r\n  pokemonService = inject(PokemonService);\r\n\r\n  ngOnInit() {\r\n    this.fetchPokemons();\r\n  }\r\n\r\n  fetchPokemons() {\r\n    this.pokemonService.setPokemonsLoadingState();\r\n\r\n    this.pokemonService.getPokemons().subscribe({\r\n      next: (response) => {\r\n        this.pokemonService.setPokemonsSuccessState(response.results);\r\n      },\r\n      error: (error) => {\r\n        this.pokemonService.setPokemonsErrorState(error);\r\n      },\r\n    });\r\n  }\r\n\r\n  getPokemonDetails(pokemon: Pokemon) {\r\n    this.pokemonService.setPokemonsSuccessState([]);\r\n    this.pokemonService.setPokemonDetailLoadingState();\r\n\r\n    this.pokemonService.getPokemonDetails(pokemon).subscribe({\r\n      next: (response) => {\r\n        if (response.results) {\r\n          this.pokemonService.setPokemonDetailSuccessState(response.results);\r\n        } else {\r\n          this.pokemonService.setPokemonDetailErrorState(\r\n            new Error('Pokemon details not found')\r\n          );\r\n        }\r\n      },\r\n      error: (err) => {\r\n        this.pokemonService.setPokemonDetailErrorState(err);\r\n      },\r\n    });\r\n  }\r\n\r\n  goBackToPokemonsList() {\r\n    this.pokemonService.pokemonDetail.set({\r\n      results: null,\r\n      error: undefined,\r\n      isLoading: false,\r\n    });\r\n    this.fetchPokemons();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container mt-4\">\r\n  <h5 class=\"mb-4\">\r\n    This example fetches a list of Pokémons and their details, then displays\r\n    their names and images.\r\n  </h5>\r\n  <div *ngIf=\"pokemonService.pokemons().isLoading\">Loading...</div>\r\n  <div *ngIf=\"pokemonService.pokemons().error\">\r\n    <div class=\"alert alert-danger\" role=\"alert\">\r\n      {{ pokemonService.pokemons()?.error || error }}\r\n    </div>\r\n  </div>\r\n  <div *ngIf=\"pokemonService.pokemons().results.length > 0\">\r\n    <div class=\"row\">\r\n      @for (pokemon of pokemonService.pokemons().results; track pokemon; let\r\n      index = $index) {\r\n      <div class=\"col-md-4\">\r\n        <div\r\n          class=\"card cursor-pointer mb-4 shadow-sm\"\r\n          (click)=\"getPokemonDetails(pokemon)\"\r\n        >\r\n          <img\r\n            [src]=\"pokemon.image\"\r\n            class=\"card-img-top\"\r\n            alt=\"{{ pokemon.name }}\"\r\n          />\r\n          <div class=\"card-body\">\r\n            <h5 class=\"card-title\">{{ pokemon.name }}</h5>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      }\r\n    </div>\r\n  </div>\r\n\r\n  <div *ngIf=\"pokemonService.pokemonDetail().isLoading\">Loading...</div>\r\n  <div *ngIf=\"pokemonService.pokemonDetail().error\">\r\n    <div class=\"alert alert-danger\" role=\"alert\">\r\n      {{ pokemonService.pokemonDetail()?.error || error }}\r\n    </div>\r\n  </div>\r\n  <div *ngIf=\"pokemonService.pokemonDetail().results\" class=\"col-md-4\">\r\n    <button class=\"btn btn-primary mb-4\" (click)=\"goBackToPokemonsList()\">\r\n      Back to List\r\n    </button>\r\n    <div class=\"card mb-4 shadow-sm\">\r\n      <img\r\n        [src]=\"pokemonService.pokemonDetail().results.image\"\r\n        class=\"card-img-top\"\r\n        alt=\"{{ pokemonService.pokemonDetail().results.name }}\"\r\n      />\r\n      <div class=\"card-body\">\r\n        <h5 class=\"card-title\">\r\n          {{ pokemonService.pokemonDetail().results.name }}\r\n        </h5>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "FormComponent",
            "id": "component-FormComponent-34f7b59f0156be292c29d34272583843c62a89a41d42a78462937a33bcaffc7d464bf8c7a5a0a3f0896f039906c4e7517713e4ff78a541402e8fce0171ecc78e",
            "file": "src/app/components/form/form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-form",
            "styleUrls": [
                "./form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "formSubmit",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "formConfig",
                    "defaultValue": "[\r\n    {\r\n      name: 'name',\r\n      label: 'Name',\r\n      type: 'text',\r\n      value: '',\r\n      validators: [Validators.required],\r\n      classConfig: 'form-control mt-2',\r\n    },\r\n    {\r\n      name: 'email',\r\n      label: 'Email',\r\n      type: 'email',\r\n      value: '',\r\n      validators: [Validators.required, Validators.email],\r\n      classConfig: 'form-control mt-2',\r\n    },\r\n    {\r\n      name: 'dob',\r\n      label: 'Date of Birth',\r\n      type: 'date',\r\n      value: '',\r\n      validators: [Validators.required],\r\n      classConfig: 'mt-3',\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "FormFieldComponent",
                    "type": "component"
                },
                {
                    "name": "AddressFormComponent",
                    "type": "component"
                },
                {
                    "name": "DatePickerComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormGroup,\r\n  Validators,\r\n  ReactiveFormsModule,\r\n} from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormFieldComponent } from '../form-field/form-field.component';\r\nimport { AddressFormComponent } from '../address-form/address-form.component';\r\nimport { DatePickerComponent } from '../date-picker/date-picker.component';\r\n\r\n@Component({\r\n  selector: 'app-form',\r\n  templateUrl: './form.component.html',\r\n  styleUrls: ['./form.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    FormFieldComponent,\r\n    AddressFormComponent,\r\n    DatePickerComponent,\r\n  ],\r\n})\r\nexport class FormComponent implements OnInit {\r\n  formConfig = [\r\n    {\r\n      name: 'name',\r\n      label: 'Name',\r\n      type: 'text',\r\n      value: '',\r\n      validators: [Validators.required],\r\n      classConfig: 'form-control mt-2',\r\n    },\r\n    {\r\n      name: 'email',\r\n      label: 'Email',\r\n      type: 'email',\r\n      value: '',\r\n      validators: [Validators.required, Validators.email],\r\n      classConfig: 'form-control mt-2',\r\n    },\r\n    {\r\n      name: 'dob',\r\n      label: 'Date of Birth',\r\n      type: 'date',\r\n      value: '',\r\n      validators: [Validators.required],\r\n      classConfig: 'mt-3',\r\n    },\r\n  ];\r\n  @Output() formSubmit = new EventEmitter<any>();\r\n  form: FormGroup;\r\n\r\n  constructor(private fb: FormBuilder) {\r\n    this.form = this.fb.group({});\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.formConfig.forEach((control) => {\r\n      this.form.addControl(\r\n        control.name,\r\n        this.fb.control(control.value, control.validators)\r\n      );\r\n    });\r\n  }\r\n\r\n  submit() {\r\n    this.formSubmit.emit(this.form.value);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "form {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\nlabel {\r\n  margin-top: 10px;\r\n}\r\n\r\ninput, textarea {\r\n  margin-bottom: 10px;\r\n}\r\n\r\nbutton {\r\n  margin-top: 20px;\r\n}",
                    "styleUrl": "./form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\r\n  <app-form-field [inputOneConfig]=\"formConfig[0]\"></app-form-field>\r\n  <app-form-field [inputOneConfig]=\"formConfig[1]\"></app-form-field>\r\n  <app-form-field [inputOneConfig]=\"formConfig[2]\"></app-form-field>\r\n  <app-address-form [form]=\"form\"></app-address-form>\r\n  <!-- <app-date-picker [form]=\"form\" controlName=\"dateOfBirth\" label=\"Date of Birth\"></app-date-picker> -->\r\n  <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\">\r\n    Submit\r\n  </button>\r\n</form>\r\n"
        },
        {
            "name": "FormFieldComponent",
            "id": "component-FormFieldComponent-1d6d4fed975d229a95d176b2361b2956a95e50edfacb47a3da9e2ac66c427171fdad089889553185fa325a005c32e9e209e7c130b630da6e83c6aa1a735de411",
            "file": "src/app/components/form-field/form-field.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-form-field",
            "styleUrls": [
                "./form-field.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./form-field.component.html"
            ],
            "viewProviders": [
                {
                    "name": "{ provide: ControlContainer, useExisting: ControlContainer }"
                }
            ],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "inputOneConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "DynamicClassDirective",
                    "type": "directive"
                },
                {
                    "name": "DatePickerComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, Optional, SkipSelf } from '@angular/core';\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  Validators,\r\n  ReactiveFormsModule,\r\n  ControlContainer,\r\n} from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DynamicClassDirective } from 'src/app/directives/dynamic-class.directive';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { DatePickerComponent } from '../date-picker/date-picker.component';\r\n\r\n@Component({\r\n  selector: 'app-form-field',\r\n  templateUrl: './form-field.component.html',\r\n  styleUrls: ['./form-field.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    DynamicClassDirective,\r\n    DatePickerComponent,\r\n  ],\r\n  viewProviders: [{ provide: ControlContainer, useExisting: ControlContainer }],\r\n})\r\nexport class FormFieldComponent implements OnInit {\r\n  @Input() inputOneConfig: any;\r\n  form!: FormGroup;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    @Optional() @SkipSelf() private controlContainer: ControlContainer\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.form = this.controlContainer?.control as FormGroup;\r\n    if (this.inputOneConfig && this.form) {\r\n      if (this.inputOneConfig.type === 'daterange') {\r\n        this.form.addControl(\r\n          this.inputOneConfig.name,\r\n          this.fb.group({\r\n            start: [\r\n              this.inputOneConfig.value.start,\r\n              this.inputOneConfig.validators,\r\n            ],\r\n            end: [\r\n              this.inputOneConfig.value.end,\r\n              this.inputOneConfig.validators,\r\n            ],\r\n          })\r\n        );\r\n      } else {\r\n        this.form.addControl(\r\n          this.inputOneConfig.name,\r\n          this.fb.control(\r\n            this.inputOneConfig.value,\r\n            this.inputOneConfig.validators\r\n          )\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./form-field.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "controlContainer",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "controlContainer",
                        "type": "ControlContainer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [formGroup]=\"form\" class=\"form-group\">\r\n  <label [for]=\"inputOneConfig.name\">{{ inputOneConfig.label }}</label>\r\n  <input\r\n    *ngIf=\"inputOneConfig.type !== 'textarea' && inputOneConfig.type !== 'date'\"\r\n    [type]=\"inputOneConfig.type\"\r\n    [formControlName]=\"inputOneConfig.name\"\r\n    [id]=\"inputOneConfig.name\"\r\n    [appDynamicClass]=\"inputOneConfig.classConfig\"\r\n  />\r\n  <textarea\r\n    *ngIf=\"inputOneConfig.type === 'textarea'\"\r\n    [formControlName]=\"inputOneConfig.name\"\r\n    [id]=\"inputOneConfig.name\"\r\n    [appDynamicClass]=\"inputOneConfig.classConfig\"\r\n  ></textarea>\r\n  <app-date-picker\r\n    *ngIf=\"inputOneConfig.type === 'date'\"\r\n    [form]=\"form\"\r\n    [controlName]=\"inputOneConfig.name\"\r\n    [appDynamicClass]=\"inputOneConfig.classConfig\"\r\n  ></app-date-picker>\r\n  <div\r\n    *ngIf=\"\r\n      form.get(inputOneConfig.name)?.invalid &&\r\n      form.get(inputOneConfig.name)?.touched\r\n    \"\r\n  >\r\n    <small *ngIf=\"form.get(inputOneConfig.name).errors.required\"\r\n      >{{ inputOneConfig.label }} is required</small\r\n    >\r\n    <small *ngIf=\"form.get(inputOneConfig.name).errors.email\"\r\n      >Invalid email format</small\r\n    >\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "HistogramComponent",
            "id": "component-HistogramComponent-537294adf7d559e40b5917f709bdefcacfe65cac720f7daf1fa7581f908d00a3d412b618e8e577fa0d345906e28d5a696a34ccf329e1f6e625adde5136b17cca",
            "file": "src/app/components/histogram/histogram.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-histogram",
            "styleUrls": [
                "./histogram.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./histogram.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "colorScheme",
                    "defaultValue": "{\r\n    domain: ['#5AA454', '#A10A28', '#C7B42C', '#AAAAAA'],\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "{ domain: {}; }",
                    "decorators": []
                },
                {
                    "name": "gradient",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showLegend",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showXAxis",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showXAxisLabel",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showYAxis",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showYAxisLabel",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "single",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "view",
                    "defaultValue": "[700, 400]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "xAxisLabel",
                    "defaultValue": "'Country'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "yAxisLabel",
                    "defaultValue": "'Population'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "NgxChartsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { NgxChartsModule } from '@swimlane/ngx-charts';\r\n\r\n@Component({\r\n  selector: 'app-histogram',\r\n  standalone: true,\r\n  templateUrl: './histogram.component.html',\r\n  styleUrls: ['./histogram.component.css'],\r\n  // providedAnimation async\r\n\r\n  imports: [NgxChartsModule],\r\n})\r\nexport class HistogramComponent implements OnInit {\r\n  @Input() single: any[] = [];\r\n  @Input() view: any[] = [700, 400];\r\n  @Input() showXAxis: boolean = true;\r\n  @Input() showYAxis: boolean = true;\r\n  @Input() gradient: boolean = false;\r\n  @Input() showLegend: boolean = true;\r\n  @Input() showXAxisLabel: boolean = true;\r\n  @Input() xAxisLabel: string = 'Country';\r\n  @Input() showYAxisLabel: boolean = true;\r\n  @Input() yAxisLabel: string = 'Population';\r\n  @Input() colorScheme = {\r\n    domain: ['#5AA454', '#A10A28', '#C7B42C', '#AAAAAA'],\r\n  };\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./histogram.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 26
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<ngx-charts-bar-vertical\r\n  [view]=\"view\"\r\n  [scheme]=\"colorScheme\"\r\n  [results]=\"single\"\r\n  [gradient]=\"gradient\"\r\n  [xAxis]=\"showXAxis\"\r\n  [yAxis]=\"showYAxis\"\r\n  [legend]=\"showLegend\"\r\n  [showXAxisLabel]=\"showXAxisLabel\"\r\n  [showYAxisLabel]=\"showYAxisLabel\"\r\n  [xAxisLabel]=\"xAxisLabel\"\r\n  [yAxisLabel]=\"yAxisLabel\">\r\n</ngx-charts-bar-vertical>\r\n"
        },
        {
            "name": "ListComponent",
            "id": "component-ListComponent-1b58a7f5eafd70bd45fcd6ed03b9256b67c301b97501361da47323a5408c550ee62f36117ef084b3f362506c3422ead302addd91295fc16f1691dd390d57c20e",
            "file": "src/app/components/list/list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-list",
            "styleUrls": [
                "./list.component.css"
            ],
            "styles": [],
            "template": "<ul class=\"custom-list\">\n  <ng-content></ng-content>\n</ul>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Output, EventEmitter, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-list',\r\n  standalone: true,\r\n  template: `\r\n    <ul class=\"custom-list\">\r\n      <ng-content></ng-content>\r\n    </ul>\r\n  `,\r\n  styleUrls: ['./list.component.css']\r\n})\r\nexport class ListComponent {}\r\n\r\n@Component({\r\n  selector: 'app-list-item',\r\n  standalone: true,\r\n  template: `\r\n    <li class=\"custom-list-item\" [class.active]=\"active\" (click)=\"handleClick($event)\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" tabindex=\"0\">\r\n      <ng-content></ng-content>\r\n    </li>\r\n  `,\r\n  styleUrls: ['./list.component.css']\r\n})\r\nexport class ListItemComponent {\r\n  @Output() itemClick = new EventEmitter<Event>();\r\n  active = false;\r\n\r\n  handleClick(event: Event) {\r\n    this.active = true;\r\n    this.itemClick.emit(event);\r\n  }\r\n\r\n  onFocus() {\r\n    this.active = true;\r\n  }\r\n\r\n  onBlur() {\r\n    this.active = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".custom-list {\r\n  list-style: none;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n.custom-list-item {\r\n  padding: 0.75rem 1rem;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  transition: background 0.2s, border-left 0.2s;\r\n  border-left: 4px solid transparent;\r\n}\r\n.custom-list-item.active {\r\n  border-left: 4px solid #1976d2;\r\n  background: #e3f0ff;\r\n}\r\n.custom-list-item:hover {\r\n  background: #f0f6ff;\r\n}\r\n",
                    "styleUrl": "./list.component.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ListItemComponent",
            "id": "component-ListItemComponent-1b58a7f5eafd70bd45fcd6ed03b9256b67c301b97501361da47323a5408c550ee62f36117ef084b3f362506c3422ead302addd91295fc16f1691dd390d57c20e",
            "file": "src/app/components/list/list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-list-item",
            "styleUrls": [
                "./list.component.css"
            ],
            "styles": [],
            "template": "<li class=\"custom-list-item\" [class.active]=\"active\" (click)=\"handleClick($event)\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" tabindex=\"0\">\n  <ng-content></ng-content>\n</li>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "itemClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "active",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "handleClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Output, EventEmitter, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-list',\r\n  standalone: true,\r\n  template: `\r\n    <ul class=\"custom-list\">\r\n      <ng-content></ng-content>\r\n    </ul>\r\n  `,\r\n  styleUrls: ['./list.component.css']\r\n})\r\nexport class ListComponent {}\r\n\r\n@Component({\r\n  selector: 'app-list-item',\r\n  standalone: true,\r\n  template: `\r\n    <li class=\"custom-list-item\" [class.active]=\"active\" (click)=\"handleClick($event)\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" tabindex=\"0\">\r\n      <ng-content></ng-content>\r\n    </li>\r\n  `,\r\n  styleUrls: ['./list.component.css']\r\n})\r\nexport class ListItemComponent {\r\n  @Output() itemClick = new EventEmitter<Event>();\r\n  active = false;\r\n\r\n  handleClick(event: Event) {\r\n    this.active = true;\r\n    this.itemClick.emit(event);\r\n  }\r\n\r\n  onFocus() {\r\n    this.active = true;\r\n  }\r\n\r\n  onBlur() {\r\n    this.active = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".custom-list {\r\n  list-style: none;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n.custom-list-item {\r\n  padding: 0.75rem 1rem;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  transition: background 0.2s, border-left 0.2s;\r\n  border-left: 4px solid transparent;\r\n}\r\n.custom-list-item.active {\r\n  border-left: 4px solid #1976d2;\r\n  background: #e3f0ff;\r\n}\r\n.custom-list-item:hover {\r\n  background: #f0f6ff;\r\n}\r\n",
                    "styleUrl": "./list.component.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "MonthCalendarComponent",
            "id": "component-MonthCalendarComponent-e592759b3e4683c0895306732cdc7de0cab6058fb6e237679d748202f2586ed0582edb1c0d7ed266595b2fcc017c4b31aa4243f924de40783c5f7de02f888c34",
            "file": "src/app/components/ng2datepickercopy/lib/month-calendar/month-calendar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "MonthCalendarService",
                    "type": "injectable"
                },
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => MonthCalendarComponent), multi: true\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => MonthCalendarComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "dp-month-calendar",
            "styleUrls": [
                "month-calendar.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "month-calendar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "IMonthCalendarConfig",
                    "decorators": []
                },
                {
                    "name": "displayDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "Dayjs | string",
                    "decorators": []
                },
                {
                    "name": "maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "Dayjs",
                    "decorators": []
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "Dayjs",
                    "decorators": []
                },
                {
                    "name": "theme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onGoToCurrent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onLeftNav",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter<INavEvent>"
                },
                {
                    "name": "onLeftSecondaryNav",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter<INavEvent>"
                },
                {
                    "name": "onNavHeaderBtnClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onRightNav",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter<INavEvent>"
                },
                {
                    "name": "onRightSecondaryNav",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "EventEmitter<INavEvent>"
                },
                {
                    "name": "onSelect",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "EventEmitter<IMonth>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_currentDateView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dayjs | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "_selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dayjs[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "_shouldShowCurrent",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "api",
                    "defaultValue": "{\n    toggleCalendar: this.toggleCalendarMode.bind(this),\n    moveCalendarTo: this.moveCalendarTo.bind(this)\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 96,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "componentConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMonthCalendarConfigInternal",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "inputValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CalendarValue | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "inputValueType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ECalendarValue | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "isInited",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "monthCalendarService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MonthCalendarService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "navLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "showLeftNav",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "showRightNav",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "showSecondaryLeftNav",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "showSecondaryRightNav",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "utilsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UtilsService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "validateFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateValidator | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "yearMonths",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMonth[][] | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 79
                }
            ],
            "methodsClass": [
                {
                    "name": "getMonthBtnCssClass",
                    "args": [
                        {
                            "name": "month",
                            "type": "IMonth",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 276,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "month",
                            "type": "IMonth",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goToCurrent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 299,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleConfigChange",
                    "args": [
                        {
                            "name": "config",
                            "type": "SimpleChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 311,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "SimpleChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initValidators",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 205,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "monthClicked",
                    "args": [
                        {
                            "name": "month",
                            "type": "IMonth",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "month",
                            "type": "IMonth",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveCalendarTo",
                    "args": [
                        {
                            "name": "to",
                            "type": "SingleCalendarValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 304,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "to",
                            "type": "SingleCalendarValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangeCallback",
                    "args": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLeftNavClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLeftSecondaryNavClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 235,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onRightNavClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 250,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onRightSecondaryNavClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 257,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "processOnChangeCallback",
                    "args": [
                        {
                            "name": "value",
                            "type": "Dayjs[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "CalendarValue",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Dayjs[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldShowCurrent",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 290,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleCalendarMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 272,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "formControl",
                            "type": "UntypedFormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | any",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formControl",
                            "type": "UntypedFormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "CalendarValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "CalendarValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CalendarNavComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ECalendarValue} from '../common/types/calendar-value-enum';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  HostBinding,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChange,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\nimport {IMonth} from './month.model';\nimport {MonthCalendarService} from './month-calendar.service';\n\nimport {IMonthCalendarConfig, IMonthCalendarConfigInternal} from './month-calendar-config';\nimport {\n  ControlValueAccessor,\n  UntypedFormControl,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator\n} from '@angular/forms';\nimport {CalendarValue} from '../common/types/calendar-value';\nimport {UtilsService} from '../common/services/utils/utils.service';\nimport {DateValidator} from '../common/types/validator.type';\nimport {SingleCalendarValue} from '../common/types/single-calendar-value';\nimport {INavEvent} from '../common/models/navigation-event.model';\nimport {Dayjs} from 'dayjs';\nimport {dayjsRef} from '../common/dayjs/dayjs.ref';\nimport { CommonModule } from '@angular/common';\nimport { CalendarNavComponent } from '../calendar-nav/calendar-nav.component';\nimport { T } from '@angular/cdk/keycodes';\nimport { TimeSelectComponent } from '../time-select/time-select.component';\n\n@Component({\n    selector: 'dp-month-calendar',\n    templateUrl: 'month-calendar.component.html',\n    styleUrls: ['month-calendar.component.less'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    imports: [CommonModule, CalendarNavComponent],  \n    providers: [\n        MonthCalendarService,\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => MonthCalendarComponent),\n            multi: true\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => MonthCalendarComponent),\n            multi: true\n        }\n    ],\n    standalone: true\n})\nexport class MonthCalendarComponent implements OnInit, OnChanges, ControlValueAccessor, Validator {\n\n  @Input() config!: IMonthCalendarConfig;\n  @Input() displayDate!: Dayjs | string;\n  @Input() minDate!: Dayjs;\n  @Input() maxDate!: Dayjs;\n  @HostBinding('class') @Input() theme!: string;\n  @Output() onSelect: EventEmitter<IMonth> = new EventEmitter();\n  @Output() onNavHeaderBtnClick: EventEmitter<void> = new EventEmitter();\n  @Output() onGoToCurrent: EventEmitter<void> = new EventEmitter();\n  @Output() onLeftNav: EventEmitter<INavEvent> = new EventEmitter();\n  @Output() onRightNav: EventEmitter<INavEvent> = new EventEmitter();\n  @Output() onLeftSecondaryNav: EventEmitter<INavEvent> = new EventEmitter();\n  @Output() onRightSecondaryNav: EventEmitter<INavEvent> = new EventEmitter();\n  isInited: boolean = false;\n  componentConfig!: IMonthCalendarConfigInternal;\n  yearMonths!: IMonth[][] | undefined;\n  inputValue!: CalendarValue | undefined;\n  inputValueType!: ECalendarValue | undefined;\n  validateFn!: DateValidator | undefined;\n  _shouldShowCurrent: boolean = true;\n  navLabel!: string | undefined;\n  showLeftNav!: boolean | undefined;\n  showRightNav!: boolean | undefined;\n  showSecondaryLeftNav!: boolean | undefined;\n  showSecondaryRightNav!: boolean | undefined;\n  api = {\n    toggleCalendar: this.toggleCalendarMode.bind(this),\n    moveCalendarTo: this.moveCalendarTo.bind(this)\n  };\n\n  constructor(public readonly monthCalendarService: MonthCalendarService,\n              public readonly utilsService: UtilsService,\n              public readonly cd: ChangeDetectorRef) {\n  }\n\n  _selected!: Dayjs[];\n\n  get selected(): Dayjs[] {\n    return this._selected;\n  }\n\n  set selected(selected: Dayjs[]) {\n    this._selected = selected;\n    this.onChangeCallback(this.processOnChangeCallback(selected));\n  }\n\n  _currentDateView: Dayjs | undefined;\n\n  get currentDateView(): Dayjs {\n    return this._currentDateView ?? dayjsRef();\n  }\n\n  set currentDateView(current: Dayjs) {\n    this._currentDateView = dayjsRef(current.toDate());\n    this.yearMonths = this.monthCalendarService\n      .generateYear(this.componentConfig, this.currentDateView, this.selected);\n    this.navLabel = this.monthCalendarService.getHeaderLabel(this.componentConfig, this.currentDateView);\n    this.showLeftNav = this.monthCalendarService.shouldShowLeft(this.componentConfig.min ?? dayjsRef(), this.currentDateView);\n    this.showRightNav = this.monthCalendarService.shouldShowRight(this.componentConfig.max ?? dayjsRef(), this.currentDateView);\n    this.showSecondaryLeftNav = this.componentConfig.showMultipleYearsNavigation && this.showLeftNav;\n    this.showSecondaryRightNav = this.componentConfig.showMultipleYearsNavigation && this.showRightNav;\n  }\n\n  ngOnInit(): void {\n    this.isInited = true;\n    this.init();\n    this.initValidators();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.isInited) {\n      const {minDate, maxDate, config} = changes;\n\n      this.handleConfigChange(config);\n      this.init();\n\n      if (minDate || maxDate) {\n        this.initValidators();\n      }\n      this.cd.markForCheck()\n    }\n  }\n\n  init(): void {\n    this.componentConfig = this.monthCalendarService.getConfig(this.config);\n    this.selected = this.selected || [];\n    this.currentDateView = (this.displayDate as Dayjs) ?? this.utilsService\n      .getDefaultDisplayDate(\n        this.currentDateView,\n        this.selected,\n        this.componentConfig.allowMultiSelect ?? false,\n        this.componentConfig.min ?? dayjsRef()\n      );\n  this.inputValueType = this.utilsService.getInputType(this.inputValue ?? '', this.componentConfig.allowMultiSelect ?? false);\n    this._shouldShowCurrent = this.shouldShowCurrent();\n  }\n\n  writeValue(value: CalendarValue): void {\n    this.inputValue = value;\n\n    if (value) {\n      this.selected = this.utilsService\n        .convertToDayjsArray(value, this.componentConfig);\n      this.yearMonths = this.monthCalendarService\n        .generateYear(this.componentConfig, this.currentDateView, this.selected);\n      this.inputValueType = this.utilsService.getInputType(this.inputValue, this.componentConfig.allowMultiSelect ?? false);\n    } else {\n      this.selected = [];\n      this.yearMonths = this.monthCalendarService\n        .generateYear(this.componentConfig, this.currentDateView, this.selected);\n    }\n\n    this.cd.markForCheck();\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChangeCallback = fn;\n  }\n\n  onChangeCallback(_: any): void {\n  }\n\n  registerOnTouched(fn: any): void {\n  }\n\n  validate(formControl: UntypedFormControl): ValidationErrors | any {\n    if (this.minDate || this.maxDate) {\n      return this.validateFn ? this.validateFn(formControl.value) : null;\n    } else {\n      return () => null;\n    }\n  }\n\n  processOnChangeCallback(value: Dayjs[]): CalendarValue {\n    return this.utilsService.convertFromDayjsArray(\n      this.componentConfig.format ?? '',\n      value,\n      this.componentConfig.returnedValueType ?? this.inputValueType ?? ECalendarValue.Dayjs\n    );\n  }\n\n  initValidators(): void {\n    this.validateFn = this.validateFn = this.utilsService.createValidator(\n      {minDate: this.minDate, maxDate: this.maxDate},\n      this.componentConfig.format ?? '',\n      'month'\n    );\n\n    this.onChangeCallback(this.processOnChangeCallback(this.selected));\n  }\n\n  monthClicked(month: IMonth): void {\n    if (month.selected && !this.componentConfig.unSelectOnClick) {\n      return;\n    }\n\n    this.selected = this.utilsService\n      .updateSelected(this.componentConfig.allowMultiSelect ?? false, this.selected, month, 'month');\n    this.yearMonths = this.monthCalendarService\n      .generateYear(this.componentConfig, this.currentDateView, this.selected);\n    this.onSelect.emit(month);\n  }\n\n  onLeftNavClick() {\n    const from = dayjsRef(this.currentDateView.toDate());\n    this.currentDateView = this.currentDateView.subtract(1, 'year');\n    const to = dayjsRef(this.currentDateView.toDate());\n    this.yearMonths = this.monthCalendarService.generateYear(this.componentConfig, this.currentDateView, this.selected);\n    this.onLeftNav.emit({from, to});\n  }\n\n  onLeftSecondaryNavClick(): void {\n    let navigateBy = this.componentConfig.multipleYearsNavigateBy ?? 1;\n    const isOutsideRange = this.componentConfig.min &&\n      this.currentDateView.year() - this.componentConfig.min.year() < navigateBy;\n\n    if (isOutsideRange) {\n      navigateBy = this.componentConfig.min ? this.currentDateView.year() - this.componentConfig.min.year() : navigateBy;\n    }\n\n    const from = dayjsRef(this.currentDateView.toDate());\n    this.currentDateView = this.currentDateView.subtract(navigateBy, 'year');\n    const to = dayjsRef(this.currentDateView.toDate());\n    this.onLeftSecondaryNav.emit({from, to});\n  }\n\n  onRightNavClick(): void {\n    const from = dayjsRef(this.currentDateView.toDate());\n    this.currentDateView = this.currentDateView.add(1, 'year');\n    const to = dayjsRef(this.currentDateView.toDate());\n    this.onRightNav.emit({from, to});\n  }\n\n  onRightSecondaryNavClick(): void {\n    let navigateBy = this.componentConfig.multipleYearsNavigateBy ?? 1;\n    const isOutsideRange = this.componentConfig.max &&\n      this.componentConfig.max.year() - this.currentDateView.year() < navigateBy;\n\n    if (isOutsideRange) {\n      navigateBy = this.componentConfig.max ? this.componentConfig.max.year() - this.currentDateView.year() : navigateBy;\n    }\n\n    const from = dayjsRef(this.currentDateView.toDate());\n    this.currentDateView = this.currentDateView.add(navigateBy, 'year');\n    const to = dayjsRef(this.currentDateView.toDate());\n    this.onRightSecondaryNav.emit({from, to});\n  }\n\n  toggleCalendarMode(): void {\n    this.onNavHeaderBtnClick.emit();\n  }\n\n  getMonthBtnCssClass(month: IMonth): { [klass: string]: boolean } {\n    const cssClass: { [klass: string]: boolean } = {\n      'dp-selected': month.selected,\n      'dp-current-month': month.currentMonth\n    };\n    const customCssClass: string = this.monthCalendarService.getMonthBtnCssClass(this.componentConfig, month.date);\n\n    if (customCssClass) {\n      cssClass[customCssClass] = true;\n    }\n\n    return cssClass;\n  }\n\n  shouldShowCurrent(): boolean {\n    return this.utilsService.shouldShowCurrent(\n      this.componentConfig.showGoToCurrent ?? false,\n      'month',\n      this.componentConfig.min ?? dayjsRef(),\n      this.componentConfig.max ?? dayjsRef()\n    );\n  }\n\n  goToCurrent(): void {\n    this.currentDateView = dayjsRef();\n    this.onGoToCurrent.emit();\n  }\n\n  moveCalendarTo(to: SingleCalendarValue): void {\n    if (to) {\n      this.currentDateView = this.utilsService.convertToDayjs(to, this.componentConfig.format ?? '');\n      this.cd.markForCheck();\n    }\n  }\n\n  handleConfigChange(config: SimpleChange): void {\n    if (config) {\n      const prevConf: IMonthCalendarConfigInternal = this.monthCalendarService.getConfig(config.previousValue);\n      const currentConf: IMonthCalendarConfigInternal = this.monthCalendarService.getConfig(config.currentValue);\n\n      if (this.utilsService.shouldResetCurrentView(prevConf, currentConf)) {\n        this._currentDateView = undefined;\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../common/styles/variables';\n\n& {\n  dp-month-calendar {\n    display: inline-block;\n\n    .dp-month-calendar-container {\n      background: @c-white;\n    }\n\n    .dp-calendar-wrapper {\n      border: 1px solid @c-black;\n    }\n\n    .dp-calendar-month {\n      box-sizing: border-box;\n      width: (@basic-height * 7 / 4);\n      height: (@basic-height * 7 / 4);\n      cursor: pointer;\n\n      &.dp-selected {\n        background: @c-primary;\n        color: @c-white;\n      }\n    }\n\n    &.dp-material {\n      .dp-calendar-weekday {\n        height: @basic-height - 5px;\n        width: @basic-height;\n        line-height: @basic-height - 5px;\n        background: @c-light-gray;\n        border: 1px solid @c-light-gray;\n      }\n\n      .dp-calendar-wrapper {\n        border: 1px solid @c-light-gray;\n      }\n\n      .dp-calendar-month {\n        box-sizing: border-box;\n        background: @c-white;\n        border-radius: 50%;\n        border: none;\n        outline: none;\n\n        &:hover {\n          background: @c-light-gray;\n        }\n      }\n\n      .dp-selected {\n        background: @c-primary;\n        color: @c-white;\n\n        &:hover {\n          background: @c-primary;\n        }\n      }\n\n      .dp-current-month {\n        border: 1px solid @c-primary;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "month-calendar.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "monthCalendarService",
                        "type": "MonthCalendarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 92,
                "jsdoctags": [
                    {
                        "name": "monthCalendarService",
                        "type": "MonthCalendarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnChanges",
                "ControlValueAccessor",
                "Validator"
            ],
            "accessors": {
                "selected": {
                    "name": "selected",
                    "setSignature": {
                        "name": "selected",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "selected",
                                "type": "Dayjs[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 105,
                        "jsdoctags": [
                            {
                                "name": "selected",
                                "type": "Dayjs[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "selected",
                        "type": "[]",
                        "returnType": "Dayjs[]",
                        "line": 101
                    }
                },
                "currentDateView": {
                    "name": "currentDateView",
                    "setSignature": {
                        "name": "currentDateView",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "current",
                                "type": "Dayjs",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 116,
                        "jsdoctags": [
                            {
                                "name": "current",
                                "type": "Dayjs",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "currentDateView",
                        "type": "",
                        "returnType": "Dayjs",
                        "line": 112
                    }
                }
            },
            "templateData": "<div class=\"dp-month-calendar-container\" dir=\"ltr\">\n  <dp-calendar-nav\n      (onGoToCurrent)=\"goToCurrent()\"\n      (onLabelClick)=\"toggleCalendarMode()\"\n      (onLeftNav)=\"onLeftNavClick()\"\n      (onLeftSecondaryNav)=\"onLeftSecondaryNavClick()\"\n      (onRightNav)=\"onRightNavClick()\"\n      (onRightSecondaryNav)=\"onRightSecondaryNavClick()\"\n      [isLabelClickable]=\"componentConfig.isNavHeaderBtnClickable\"\n      [label]=\"navLabel\"\n      [showYearButton]=\"false\"\n      [showGoToCurrent]=\"shouldShowCurrent()\"\n      [showLeftNav]=\"showLeftNav\"\n      [showLeftSecondaryNav]=\"showSecondaryLeftNav\"\n      [showRightNav]=\"showRightNav\"\n      [showRightSecondaryNav]=\"showSecondaryRightNav\"\n      [theme]=\"theme\">\n  </dp-calendar-nav>\n\n  <div class=\"dp-calendar-wrapper\">\n    <div *ngFor=\"let monthRow of yearMonths\" class=\"dp-months-row\">\n      <button (click)=\"monthClicked(month)\"\n              *ngFor=\"let month of monthRow\"\n              [attr.data-date]=\"month.date.format(componentConfig.format)\"\n              [disabled]=\"month.disabled\"\n              [innerText]=\"month.text\"\n              [ngClass]=\"getMonthBtnCssClass(month)\"\n              class=\"dp-calendar-month\"\n              type=\"button\">\n      </button>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "PlaygroundComponent",
            "id": "component-PlaygroundComponent-89a4a2de20a448d731c15bd7b85bf60dd903038b965f9aaeb7cc872786ef021bb73e1673da22dbf1fe5f7639c87010b31af1e1984f16ecdf7742e5416a304e7e",
            "file": "src/app/components/playground/playground.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-playground",
            "styleUrls": [
                "./playground.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./playground.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "checkboxState",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "dateOptions",
                    "defaultValue": "[\r\n    {\r\n      disabledWeekends: true,\r\n      isStepperYearShown: true,\r\n      disableRangePciker: false,\r\n    },\r\n    // {\r\n    //   selectedEndDate: new Date(),\r\n    //   selectedStartDate: new Date(),\r\n    //   disabledWeekends: false,\r\n    // },\r\n    // {\r\n    //   dateFormat: 'dd MM yyyy',\r\n    //   disableRangePciker: true,\r\n    // },\r\n    // {\r\n    //   selectedEndDate: new Date(),\r\n    //   selectedStartDate: new Date(),\r\n    //   disabledWeekends: false,\r\n    //   isStepperYearShown: false,\r\n    // },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateOptions[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 108
                },
                {
                    "name": "histogramData",
                    "defaultValue": "[\r\n    { name: 'A', value: 100 },\r\n    { name: 'B', value: 200 },\r\n    { name: 'C', value: 300 },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "items",
                    "defaultValue": "[\r\n    { title: 'Item 1', content: 'Content 1', isOpen: false },\r\n    { title: 'Item 2', content: 'Content 2', isOpen: false },\r\n    { title: 'Item 3', content: 'Content 3', isOpen: false },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "progress",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "simpletableData",
                    "defaultValue": "[\r\n    {\r\n      Name: 'John',\r\n      Age: 30,\r\n      Occupation: 'Developer',\r\n      lastName: 'Doe',\r\n      link: 'https://www.google.com',\r\n      className: 'text-success',\r\n    },\r\n    {\r\n      Name: 'Jane',\r\n      Age: 25,\r\n      Occupation: 'Designer',\r\n      lastName: 'Bishop',\r\n      link: 'https://www.google.com',\r\n      className: 'text-danger',\r\n    },\r\n    {\r\n      Name: 'Jim',\r\n      Age: 35,\r\n      Occupation: 'Product Manager',\r\n      lastName: 'Doe',\r\n      link: 'https://amazone.com',\r\n      className: 'text-warning',\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "toggleState",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "methodsClass": [
                {
                    "name": "onCheckboxChange",
                    "args": [
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFormSubmit",
                    "args": [
                        {
                            "name": "formData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onToggleChange",
                    "args": [
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "PlTitleComponent",
                    "type": "component"
                },
                {
                    "name": "ToggleComponent",
                    "type": "component"
                },
                {
                    "name": "CardComponent",
                    "type": "component"
                },
                {
                    "name": "CheckboxComponent",
                    "type": "component"
                },
                {
                    "name": "AccordionComponent",
                    "type": "component"
                },
                {
                    "name": "HistogramComponent",
                    "type": "component"
                },
                {
                    "name": "AlertComponent",
                    "type": "component"
                },
                {
                    "name": "ProgressBarComponent",
                    "type": "component"
                },
                {
                    "name": "SimpleTableComponent",
                    "type": "component"
                },
                {
                    "name": "FormComponent",
                    "type": "component"
                },
                {
                    "name": "DynamicClassDirective",
                    "type": "directive"
                },
                {
                    "name": "DatePickerComponent",
                    "type": "component"
                },
                {
                    "name": "CsDatePickerComponent",
                    "type": "component"
                },
                {
                    "name": "FetchDataComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ToggleComponent } from '../toggle/toggle.component';\r\nimport { CardComponent } from '../card/card.component';\r\nimport { CheckboxComponent } from '../checkbox/checkbox.component';\r\nimport { PlTitleComponent } from './components/plg-title/plg-title.component';\r\nimport { AccordionComponent } from '../accordion/accordion.component';\r\nimport { HistogramComponent } from '../histogram/histogram.component';\r\nimport AlertComponent from '../alert/alert.component';\r\nimport { ProgressBarComponent } from '../progress-bar/progress-bar.component';\r\nimport { SimpleTableComponent } from '../simple-table/simple-table.component';\r\nimport { FormComponent } from '../form/form.component';\r\nimport { DynamicClassDirective } from 'src/app/directives/dynamic-class.directive';\r\nimport { DatePickerComponent } from '../date-picker/date-picker.component';\r\nimport { FetchDataComponent } from '../fetch-data/fetch-data.component';\r\nimport {\r\n  CsDatePickerComponent,\r\n  DateOptions,\r\n} from '../cs-date-picker/cs-date-picker.component';\r\n\r\n@Component({\r\n  selector: 'app-playground',\r\n  templateUrl: './playground.component.html',\r\n  styleUrls: ['./playground.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    PlTitleComponent,\r\n    ToggleComponent,\r\n    CardComponent,\r\n    CheckboxComponent,\r\n    AccordionComponent,\r\n    HistogramComponent,\r\n    AlertComponent,\r\n    ProgressBarComponent,\r\n    SimpleTableComponent,\r\n    FormComponent,\r\n    DynamicClassDirective,\r\n    DatePickerComponent,\r\n    CsDatePickerComponent,\r\n    FetchDataComponent,\r\n  ],\r\n})\r\nexport class PlaygroundComponent {\r\n  toggleState = false;\r\n  checkboxState = true;\r\n  progress = 0;\r\n\r\n  onToggleChange(state: boolean): void {\r\n    this.toggleState = state;\r\n  }\r\n  onCheckboxChange(state: boolean): void {\r\n    this.checkboxState = state;\r\n  }\r\n\r\n  // accordion\r\n  items = [\r\n    { title: 'Item 1', content: 'Content 1', isOpen: false },\r\n    { title: 'Item 2', content: 'Content 2', isOpen: false },\r\n    { title: 'Item 3', content: 'Content 3', isOpen: false },\r\n  ];\r\n  // histogram\r\n  histogramData = [\r\n    { name: 'A', value: 100 },\r\n    { name: 'B', value: 200 },\r\n    { name: 'C', value: 300 },\r\n  ];\r\n\r\n  simpletableData: {\r\n    Name: string;\r\n    Age: number;\r\n    Occupation: string;\r\n    lastName: string;\r\n    link: string;\r\n    className?: string;\r\n  }[] = [\r\n    {\r\n      Name: 'John',\r\n      Age: 30,\r\n      Occupation: 'Developer',\r\n      lastName: 'Doe',\r\n      link: 'https://www.google.com',\r\n      className: 'text-success',\r\n    },\r\n    {\r\n      Name: 'Jane',\r\n      Age: 25,\r\n      Occupation: 'Designer',\r\n      lastName: 'Bishop',\r\n      link: 'https://www.google.com',\r\n      className: 'text-danger',\r\n    },\r\n    {\r\n      Name: 'Jim',\r\n      Age: 35,\r\n      Occupation: 'Product Manager',\r\n      lastName: 'Doe',\r\n      link: 'https://amazone.com',\r\n      className: 'text-warning',\r\n    },\r\n  ];\r\n\r\n  onFormSubmit(formData: any): void {\r\n    console.log('Form Data:', formData);\r\n  }\r\n\r\n  // date picker\r\n  dateOptions: DateOptions[] = [\r\n    {\r\n      disabledWeekends: true,\r\n      isStepperYearShown: true,\r\n      disableRangePciker: false,\r\n    },\r\n    // {\r\n    //   selectedEndDate: new Date(),\r\n    //   selectedStartDate: new Date(),\r\n    //   disabledWeekends: false,\r\n    // },\r\n    // {\r\n    //   dateFormat: 'dd MM yyyy',\r\n    //   disableRangePciker: true,\r\n    // },\r\n    // {\r\n    //   selectedEndDate: new Date(),\r\n    //   selectedStartDate: new Date(),\r\n    //   disabledWeekends: false,\r\n    //   isStepperYearShown: false,\r\n    // },\r\n  ];\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".playground {\r\n  padding: 20px;\r\n}\r\n\r\n.component-example {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.border-bottom-black {\r\n  border-bottom: 1px solid black;\r\n}\r\n\r\n// .border-bottom-gray {\r\n//   border-bottom: 1px solid gray;\r\n// }\r\n\r\n.hover-bg-gray:hover {\r\n  background-color: lightgray;\r\n  cursor: pointer;\r\n}",
                    "styleUrl": "./playground.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"bg-light p-3\">\r\n  <h2>Component Playground</h2>\r\n  <div class=\"component-example\">\r\n    <plg-title>\r\n      <a class=\"text-white\" href=\"/?path=/docs/components-accordion--docs\"\r\n        >Accordion Component</a\r\n      >\r\n    </plg-title>\r\n    <app-card [classNames]=\"'shadow-lg'\">\r\n      <app-accordion [items]=\"items\"></app-accordion>\r\n    </app-card>\r\n\r\n    <plg-title>\r\n      <a class=\"text-white\" href=\"/?path=/docs/components-alert--docs\"\r\n        >Alert Component</a\r\n      >\r\n    </plg-title>\r\n    <app-card [classNames]=\"'shadow-lg'\">\r\n      <app-alert [title]=\"'hello world'\"> </app-alert>\r\n      <app-alert [title]=\"'hello danger'\" [type]=\"'danger'\"> </app-alert>\r\n    </app-card>\r\n\r\n    <plg-title>\r\n      <a class=\"text-white\" href=\"/?path=/docs/components-alert--docs\"\r\n        >checkbox</a\r\n      >\r\n    </plg-title>\r\n    <app-card [classNames]=\"'shadow-lg'\">\r\n      <app-checkbox\r\n        [checked]=\"checkboxState\"\r\n        (checkedChange)=\"onCheckboxChange($event)\"\r\n      ></app-checkbox>\r\n      <p>Checkbox State: {{ checkboxState }}</p>\r\n    </app-card>\r\n\r\n    <plg-title>\r\n      <a class=\"text-white\" href=\"/?path=/docs/components-histogram--countries\"\r\n        >Histogram Component</a\r\n      >\r\n    </plg-title>\r\n    <app-card [classNames]=\"'shadow-lg'\">\r\n      <app-histogram [single]=\"histogramData\"></app-histogram>\r\n    </app-card>\r\n\r\n    <plg-title>\r\n      <a class=\"text-white\" href=\"/?path=/docs/components-toggler--docs\"\r\n        >Toggler Component</a\r\n      >\r\n    </plg-title>\r\n    <app-card [classNames]=\"'shadow-lg'\">\r\n      <app-toggle\r\n        [isChecked]=\"toggleState\"\r\n        (toggleChange)=\"onToggleChange($event)\"\r\n      ></app-toggle>\r\n      <p>Toggle State: {{ toggleState }}</p>\r\n    </app-card>\r\n\r\n    <plg-title>\r\n      <a class=\"text-white\" href=\"/?path=/docs/components-progressbar--docs\"\r\n        >Progress Bar Component</a\r\n      >\r\n    </plg-title>\r\n    <app-card [classNames]=\"'shadow-lg'\">\r\n      <app-progress-bar [progress]=\"progress\"></app-progress-bar>\r\n      <p>Progress: {{ progress }}%</p>\r\n      <button class=\"btn btn-primary\" (click)=\"progress = 90\">go to 90%</button>\r\n    </app-card>\r\n\r\n    <plg-title> simple tables </plg-title>\r\n    <app-card [classNames]=\"'shadow-lg'\">\r\n      <app-simple-table [tableData]=\"simpletableData\"> </app-simple-table>\r\n    </app-card>\r\n\r\n    <plg-title>Dynamic Class Directive</plg-title>\r\n    <app-card [classNames]=\"'shadow-lg'\">\r\n      <p>\r\n        This directive is used to add classes to the input element based on the\r\n        object passed to it.\r\n      </p>\r\n      <div>\r\n        <input type=\"text\" [appDynamicClass]=\"'form-control'\" />\r\n      </div>\r\n      <div>\r\n        <input type=\"text\" [appDynamicClass]=\"'form-control is-invalid mt-2'\" />\r\n      </div>\r\n    </app-card>\r\n\r\n    <!-- <plg-title>Date Picker</plg-title>\r\n    <app-card [classNames]=\"'shadow-lg'\">\r\n      <app-date-picker label=\"Date test\"></app-date-picker>\r\n    </app-card> -->\r\n\r\n    <plg-title>Reusable Reactive Form</plg-title>\r\n    <app-card [classNames]=\"'shadow-lg'\">\r\n      <p>\r\n        The `FormComponent` is a reusable component that includes a sub-form for\r\n        addresses (`app-address-form`), which is also reusable. It allows for\r\n        dynamically creating form fields via configurable sub-components\r\n        (`app-form-field`). The form is reactive and can be submitted via the\r\n        `submit` method.\r\n      </p>\r\n      <app-form (formSubmit)=\"onFormSubmit($event)\"></app-form>\r\n    </app-card>\r\n\r\n    <plg-title>Custom date picker</plg-title>\r\n    <app-card [classNames]=\"'shadow-lg'\">\r\n      <hr />\r\n      <h3>Date range picker</h3>\r\n      <div>\r\n        <h4>Available parameters</h4>\r\n        <table class=\"table table-striped\">\r\n          <caption>\r\n            Datepicker parameter inputs\r\n          </caption>\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">Input name</th>\r\n              <th scope=\"col\">Description</th>\r\n              <th scope=\"col\">Available options</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>dateOptions</td>\r\n              <td>\r\n                Input JSON object containing the options related to the date\r\n                picker\r\n              </td>\r\n              <td>\r\n                <ul>\r\n                  <li>dateFormat:string (default 'dd/MM/yyyy')</li>\r\n                  <li>selectedEndDate:Date (default undefined)</li>\r\n                  <li>selectedStartDate:Date (default undefined)</li>\r\n                  <li>disabledWeekends:boolean (default true)</li>\r\n                  <li>disableRangePciker:boolean (default false)</li>\r\n                  <li>isStepperYearShown:boolean (default true)</li>\r\n                  <li>offsetYearsMenu:integer (default 5)</li>\r\n                  <li>\r\n                    isSelectionDayAfterCurrentDayEnable:boolean (default false)\r\n                  </li>\r\n                </ul>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <div class=\"d-flex\">\r\n        <div class=\"ml-5\">\r\n          <cs-date-picker\r\n            #datePickerTwo\r\n            (dateObject)=\"dateObject($event, 0)\"\r\n            [dateOptions]=\"dateOptions[0]\"\r\n            [offsetYearsMenu]=\"20\"\r\n          >\r\n            <div class=\"date-picker-wrapper\">\r\n              <div class=\"d-flex\">\r\n                <button\r\n                  class=\"tk-btn tk-btn-sm col-3 font-family-csePBold p-0\"\r\n                  style=\"font-size: 14px\"\r\n                  [ngClass]=\"\r\n                    datePickerTwo.tabBtnActive === 0\r\n                      ? 'tk-btn-black'\r\n                      : 'tk-btn-secondary'\r\n                  \"\r\n                  (click)=\"datePickerTwo.setSelectionDate(0, 0)\"\r\n                >\r\n                  Today\r\n                </button>\r\n                <button\r\n                  class=\"tk-btn tk-btn-secondary tk-btn-sm col-5 font-family-csePBold p-0 ml-2\"\r\n                  style=\"font-size: 14px\"\r\n                  (click)=\"datePickerTwo.setSelectionDate(14, 1)\"\r\n                  [ngClass]=\"\r\n                    datePickerTwo.tabBtnActive === 1\r\n                      ? 'tk-btn-black'\r\n                      : 'tk-btn-secondary'\r\n                  \"\r\n                >\r\n                  Last 2 weeks\r\n                </button>\r\n              </div>\r\n              <div class=\"d-flex mt-2\">\r\n                <button\r\n                  class=\"tk-btn tk-btn-secondary tk-btn-sm col-5 font-family-csePBold p-0\"\r\n                  style=\"font-size: 14px\"\r\n                  (click)=\"datePickerTwo.setSelectionDate(30, 2)\"\r\n                  [ngClass]=\"\r\n                    datePickerTwo.tabBtnActive === 2\r\n                      ? 'tk-btn-black'\r\n                      : 'tk-btn-secondary'\r\n                  \"\r\n                >\r\n                  Last month\r\n                </button>\r\n                <button\r\n                  class=\"tk-btn tk-btn-secondary tk-btn-sm col-5 font-family-csePBold p-0 ml-2\"\r\n                  style=\"font-size: 14px\"\r\n                  (click)=\"datePickerTwo.setSelectionDate(365, 3)\"\r\n                  [ngClass]=\"\r\n                    datePickerTwo.tabBtnActive === 3\r\n                      ? 'tk-btn-black'\r\n                      : 'tk-btn-secondary'\r\n                  \"\r\n                >\r\n                  Last year\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </cs-date-picker>\r\n        </div>\r\n        <div class=\"d-flex flex-column\">\r\n          <div class=\"d-flex ml-4\" *ngIf=\"date[0]\">\r\n            <div>Picker one</div>\r\n            <div>startDate</div>\r\n            <div>: {{ date[0].startDate }}</div>\r\n          </div>\r\n\r\n          <div class=\"d-flex ml-4\" *ngIf=\"date[0]\">\r\n            <div>todate</div>\r\n            <div>: {{ date[0].todate }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </app-card>\r\n\r\n    <plg-title>ng2 date picker</plg-title>\r\n    <app-card [classNames]=\"'shadow-lg'\">\r\n      <app-ng2-date-picker\r\n        [(selectedDate)]=\"selectedDate\"\r\n        [extraDisabledDates]=\"extraDisabledDates\"\r\n        (selectedDateChange)=\"onSelectedDateChange($event)\"\r\n      >\r\n      </app-ng2-date-picker>\r\n      <p>Date sélectionnée : {{ selectedDate | date : \"dd/MM/yyyy\" }}</p>\r\n    </app-card>\r\n\r\n    <plg-title>Get request</plg-title>\r\n    <app-card [classNames]=\"'shadow-lg'\">\r\n      <p>usage of ajax from rxjs/ajax to get data from api</p>\r\n      <app-fetch-data></app-fetch-data>\r\n    </app-card>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "PlTitleComponent",
            "id": "component-PlTitleComponent-d573187f0773ff5d0d60342c57e659fe273f6fc4601d8788b8d67ee43d127febc735222f817ac2e3f9664c6612e7aefb647158e148a9c2306e2c7b04873687f4",
            "file": "src/app/components/playground/components/plg-title/plg-title.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "plg-title",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./plg-title.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'plg-title',\r\n  templateUrl: './plg-title.component.html',\r\n  standalone: true,\r\n})\r\nexport class PlTitleComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<h4 class=\"bg-primary mb-0 p-2 text-white rounded\">\r\n  <ng-content></ng-content>\r\n</h4>\r\n"
        },
        {
            "name": "ProgressBarComponent",
            "id": "component-ProgressBarComponent-511e41fa7668e4f6025417835f08bd8d37ff33b8dc3666277a70a5a36aad371f86ab81cc16498632a0660b8dee0b021cf9520041c4aeca9922b1f3a3e684afa5",
            "file": "src/app/components/progress-bar/progress-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-progress-bar",
            "styleUrls": [
                "./progress-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./progress-bar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "progress",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-progress-bar',\r\n  templateUrl: './progress-bar.component.html',\r\n  styleUrls: ['./progress-bar.component.scss'],\r\n  standalone: true,\r\n})\r\nexport class ProgressBarComponent {\r\n  @Input() progress = 0;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".progress-bar {\r\n  width: 100%;\r\n  background-color: #e0e0e0;\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n}\r\n\r\n.progress-bar-fill {\r\n  height: 20px;\r\n  background-color: #76c7c0;\r\n  width: 0;\r\n  transition: width 5s ease-in-out;\r\n}",
                    "styleUrl": "./progress-bar.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"progress-bar\">\r\n  <div class=\"progress-bar-fill\" [style.width.%]=\"progress\"></div>\r\n</div>\r\n"
        },
        {
            "name": "SimpleTableComponent",
            "id": "component-SimpleTableComponent-9870004ffdc4104224a689249ee9dd81480f36247700034963ab3c11d7b135ba04c00c052d59709910ef7291ce1758d1a7d757cb29641708de77167879dd99a3",
            "file": "src/app/components/simple-table/simple-table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-simple-table",
            "styleUrls": [
                "./simple-table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./simple-table.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "tableData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "any[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-simple-table',\r\n  templateUrl: './simple-table.component.html',\r\n  styleUrls: ['./simple-table.component.scss'],\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n})\r\nexport class SimpleTableComponent {\r\n  @Input() public tableData: any[] = [];\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./simple-table.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<table class=\"table\" *ngIf=\"tableData && tableData.length\">\r\n  <thead>\r\n    <tr>\r\n      <ng-container *ngFor=\"let header of tableData[0] | keyvalue\">\r\n        <th\r\n          *ngIf=\"header.key !== 'className'\"\r\n          (click)=\"headerSelection(header.key, header.value)\"\r\n        >\r\n          <span>{{ header.key }}</span>\r\n        </th>\r\n      </ng-container>\r\n    </tr>\r\n  </thead>\r\n\r\n  <tbody>\r\n    <tr *ngFor=\"let row of tableData; let i = index\">\r\n      <ng-container *ngFor=\"let data of row | keyvalue\">\r\n        <td *ngIf=\"data.key !== 'className'\">\r\n          <span *ngIf=\"data.key !== 'link'\" [ngClass]=\"row?.className\">{{\r\n            data.value\r\n          }}</span>\r\n          <a *ngIf=\"data.key === 'link'\" [href]=\"data.value\">{{\r\n            data.value\r\n          }}</a>\r\n        </td>\r\n      </ng-container>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n"
        },
        {
            "name": "TaskComponent",
            "id": "component-TaskComponent-35d659ccb3660292168421882d1d80e22ac90d1fe456a030a1b073b2ba21bdc1d4fc312d3dfe9f2efafcf2d57417145e34b0c1973a3b6b578af026ec4fe4c87b",
            "file": "src/app/components/task/task.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"list-item\">\n  <label [attr.aria-label]=\"task.title + ''\" for=\"title\">\n    <input\n      type=\"text\"\n      [value]=\"task.title\"\n      readonly=\"true\"\n      id=\"title\"\n      name=\"title\"\n    />\n  </label>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe shape of the task object\n",
                    "description": "<p>The shape of the task object</p>\n",
                    "line": 25,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onArchiveTask",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "EventEmitter"
                },
                {
                    "name": "onPinTask",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-task',\r\n  standalone: false,\r\n  template: `\r\n    <div class=\"list-item\">\r\n      <label [attr.aria-label]=\"task.title + ''\" for=\"title\">\r\n        <input\r\n          type=\"text\"\r\n          [value]=\"task.title\"\r\n          readonly=\"true\"\r\n          id=\"title\"\r\n          name=\"title\"\r\n        />\r\n      </label>\r\n    </div>\r\n  `,\r\n})\r\nexport default class TaskComponent {\r\n  /**\r\n   * The shape of the task object\r\n  */\r\n  @Input() task: any;\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onPinTask = new EventEmitter<Event>();\r\n\r\n  // tslint:disable-next-line: no-output-on-prefix\r\n  @Output()\r\n  onArchiveTask = new EventEmitter<Event>();\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "TimeSelectComponent",
            "id": "component-TimeSelectComponent-c82211556c44bef543e268b7b3a006a75e9100a76e5ef324985c763fef7a06e83c3a13f6d89668e528f301027391f31dc33ab6370d74fb82c2811c41348224a2",
            "file": "src/app/components/ng2datepickercopy/lib/time-select/time-select.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "TimeSelectService",
                    "type": "injectable"
                },
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => TimeSelectComponent), multi: true\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => TimeSelectComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "dp-time-select",
            "styleUrls": [
                "time-select.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "time-select.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "ITimeSelectConfig",
                    "decorators": []
                },
                {
                    "name": "displayDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "SingleCalendarValue",
                    "decorators": []
                },
                {
                    "name": "maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "SingleCalendarValue",
                    "decorators": []
                },
                {
                    "name": "maxTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "SingleCalendarValue",
                    "decorators": []
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "SingleCalendarValue",
                    "decorators": []
                },
                {
                    "name": "minTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "SingleCalendarValue",
                    "decorators": []
                },
                {
                    "name": "theme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter<IDate>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dayjs",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "api",
                    "defaultValue": "{\n    triggerChange: this.emitChange.bind(this)\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "componentConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITimeSelectConfigInternal",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "hours",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "inputValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CalendarValue",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "inputValueType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ECalendarValue",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "isInited",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "meridiem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "minutes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "seconds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "showDecHour",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "showDecMinute",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "showDecSecond",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "showIncHour",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "showIncMinute",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "showIncSecond",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "showToggleMeridiem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "timeSelectService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TimeSelectService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "utilsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UtilsService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "validateFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateValidator",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 74
                }
            ],
            "methodsClass": [
                {
                    "name": "calculateTimeParts",
                    "args": [
                        {
                            "name": "time",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "time",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "decrease",
                    "args": [
                        {
                            "name": "unit",
                            "type": "TimeUnit",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "unit",
                            "type": "TimeUnit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleConfigChange",
                    "args": [
                        {
                            "name": "config",
                            "type": "SimpleChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "SimpleChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "increase",
                    "args": [
                        {
                            "name": "unit",
                            "type": "TimeUnit",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "unit",
                            "type": "TimeUnit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initValidators",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangeCallback",
                    "args": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "processOnChangeCallback",
                    "args": [
                        {
                            "name": "value",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "CalendarValue",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleMeridiem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "formControl",
                            "type": "UntypedFormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | any",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formControl",
                            "type": "UntypedFormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "CalendarValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "CalendarValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ECalendarValue} from '../common/types/calendar-value-enum';\nimport {SingleCalendarValue} from '../common/types/single-calendar-value';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  HostBinding,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChange,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\nimport {TimeSelectService, TimeUnit} from './time-select.service';\n\nimport {ITimeSelectConfig, ITimeSelectConfigInternal} from './time-select-config.model';\nimport {\n  ControlValueAccessor,\n  UntypedFormControl,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator\n} from '@angular/forms';\nimport {CalendarValue} from '../common/types/calendar-value';\nimport {UtilsService} from '../common/services/utils/utils.service';\nimport {IDate} from '../common/models/date.model';\nimport {DateValidator} from '../common/types/validator.type';\nimport {IDayCalendarConfigInternal} from '../day-calendar/day-calendar-config.model';\nimport {Dayjs} from 'dayjs';\nimport {dayjsRef} from '../common/dayjs/dayjs.ref';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n    selector: 'dp-time-select',\n    templateUrl: 'time-select.component.html',\n    imports: [CommonModule],\n    styleUrls: ['time-select.component.less'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        TimeSelectService,\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => TimeSelectComponent),\n            multi: true\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => TimeSelectComponent),\n            multi: true\n        }\n    ],\n    standalone: true\n})\nexport class TimeSelectComponent implements OnInit, OnChanges, ControlValueAccessor, Validator {\n\n  @Input() config!: ITimeSelectConfig;\n  @Input() displayDate!: SingleCalendarValue;\n  @Input() minDate!: SingleCalendarValue;\n  @Input() maxDate!: SingleCalendarValue;\n  @Input() minTime!: SingleCalendarValue;\n  @Input() maxTime!: SingleCalendarValue;\n  @HostBinding('class') @Input() theme!: string;\n  @Output() onChange: EventEmitter<IDate> = new EventEmitter();\n  isInited: boolean = false;\n  componentConfig!: ITimeSelectConfigInternal;\n  inputValue!: CalendarValue;\n  inputValueType!: ECalendarValue;\n  validateFn!: DateValidator;\n  hours!: string;\n  minutes!: string;\n  seconds!: string;\n  meridiem!: string;\n  showDecHour!: boolean;\n  showDecMinute!: boolean;\n  showDecSecond!: boolean;\n  showIncHour!: boolean;\n  showIncMinute!: boolean;\n  showIncSecond!: boolean;\n  showToggleMeridiem!: boolean;\n  api = {\n    triggerChange: this.emitChange.bind(this)\n  };\n\n  constructor(public readonly timeSelectService: TimeSelectService,\n              public readonly utilsService: UtilsService,\n              public readonly cd: ChangeDetectorRef) {\n  }\n\n  _selected!: Dayjs;\n\n  get selected(): Dayjs {\n    return this._selected;\n  }\n\n  set selected(selected: Dayjs) {\n  this._selected = selected;\n  this.calculateTimeParts(this.selected);\n\n  this.showDecHour = this.timeSelectService?.shouldShowDecrease?.(this.componentConfig, this._selected, 'hour') ?? false;\n  this.showDecMinute = this.timeSelectService?.shouldShowDecrease?.(this.componentConfig, this._selected, 'minute') ?? false;\n  this.showDecSecond = this.timeSelectService?.shouldShowDecrease?.(this.componentConfig, this._selected, 'second') ?? false;\n\n  this.showIncHour = this.timeSelectService?.shouldShowIncrease?.(this.componentConfig, this._selected, 'hour') ?? false;\n  this.showIncMinute = this.timeSelectService?.shouldShowIncrease?.(this.componentConfig, this._selected, 'minute') ?? false;\n  this.showIncSecond = this.timeSelectService?.shouldShowIncrease?.(this.componentConfig, this._selected, 'second') ?? false;\n\n  this.showToggleMeridiem = this.timeSelectService?.shouldShowToggleMeridiem?.(this.componentConfig, this._selected) ?? false;\n\n  this.onChangeCallback(this.processOnChangeCallback(selected));\n  }\n\n  ngOnInit() {\n    this.isInited = true;\n    this.init();\n    this.initValidators();\n  }\n\n  init(): void {\n  this.componentConfig = this.timeSelectService?.getConfig?.(this.config) ?? {};\n  this.selected = this.selected || dayjsRef();\n  this.inputValueType = this.utilsService?.getInputType?.(this.inputValue, false) ?? null;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.isInited) {\n      const {minDate, maxDate, minTime, maxTime} = changes;\n\n      if (minDate || maxDate || minTime || maxTime) {\n        this.initValidators();\n      }\n\n      this.init();\n    }\n  }\n\n  writeValue(value: CalendarValue): void {\n    this.inputValue = value;\n\n    if (value) {\n      const dayjsValue = this.utilsService?.convertToDayjsArray?.(value, {\n        allowMultiSelect: false,\n        format: this.timeSelectService?.getTimeFormat?.(this.componentConfig) ?? ''\n      })?.[0];\n      if (dayjsValue?.isValid?.()) {\n        this.selected = dayjsValue;\n        this.inputValueType = this.utilsService?.getInputType?.(this.inputValue, false) ?? null;\n      }\n    }\n\n    this.cd.markForCheck();\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChangeCallback = fn;\n  }\n\n  onChangeCallback(_: any) {\n  }\n\n  registerOnTouched(fn: any): void {\n  }\n\n  validate(formControl: UntypedFormControl): ValidationErrors | any {\n    if (this.minDate || this.maxDate || this.minTime || this.maxTime) {\n      return this.validateFn(formControl.value);\n    } else {\n      return () => null;\n    }\n  }\n\n  processOnChangeCallback(value: Dayjs): CalendarValue {\n    return this.utilsService?.convertFromDayjsArray?.(\n      this.timeSelectService?.getTimeFormat?.(this.componentConfig) ?? '',\n      [value],\n      this.componentConfig?.returnedValueType || this.inputValueType\n    );\n  }\n\n  initValidators() {\n    this.validateFn = this.utilsService?.createValidator?.(\n      {\n        minDate: this.minDate,\n        maxDate: this.maxDate,\n        minTime: this.minTime,\n        maxTime: this.maxTime\n      }, '', 'day') ?? (() => null);\n\n    this.onChangeCallback(this.processOnChangeCallback(this.selected));\n  }\n\n  decrease(unit: TimeUnit) {\n  this.selected = this.timeSelectService?.decrease?.(this.componentConfig, this.selected, unit) ?? this.selected;\n  this.emitChange();\n  }\n\n  increase(unit: TimeUnit) {\n  this.selected = this.timeSelectService?.increase?.(this.componentConfig, this.selected, unit) ?? this.selected;\n  this.emitChange();\n  }\n\n  toggleMeridiem(): void {\n  this.selected = this.timeSelectService?.toggleMeridiem?.(this.selected) ?? this.selected;\n  this.emitChange();\n  }\n\n  emitChange(): void {\n    this.onChange.emit({date: this.selected, selected: false});\n    this.cd.markForCheck();\n  }\n\n  calculateTimeParts(time: Dayjs): void {\n  this.hours = this.timeSelectService?.getHours?.(this.componentConfig, time) ?? '';\n  this.minutes = this.timeSelectService?.getMinutes?.(this.componentConfig, time) ?? '';\n  this.seconds = this.timeSelectService?.getSeconds?.(this.componentConfig, time) ?? '';\n  this.meridiem = this.timeSelectService?.getMeridiem?.(this.componentConfig, time) ?? '';\n  }\n\n  private handleConfigChange(config: SimpleChange): void {\n    if (config) {\n      const prevConf: IDayCalendarConfigInternal = this.timeSelectService?.getConfig?.(config.previousValue) ?? {};\n      const currentConf: IDayCalendarConfigInternal = this.timeSelectService?.getConfig?.(config.currentValue) ?? {};\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../common/styles/variables';\n\n& {\n\n  dp-time-select {\n    display: inline-block;\n\n    .dp-time-select-controls {\n      margin: 0;\n      padding: 0;\n      text-align: center;\n      line-height: normal;\n      background: @c-white;\n    }\n\n    .dp-time-select-control {\n      display: inline-block;\n      width: 35px;\n      margin: 0 auto;\n      vertical-align: middle;\n      font-size: inherit;\n      letter-spacing: 1px;\n    }\n\n    .dp-time-select-control-up, .dp-time-select-control-down {\n      position: relative;\n      display: block;\n      width: 24px;\n      height: 24px;\n      margin: 3px auto;\n      cursor: pointer;\n      .arrow(0deg)\n    }\n\n    .dp-time-select-control-up::before {\n      transform: rotate(-45deg);\n      top: 4px;\n    }\n\n    .dp-time-select-control-down::before {\n      transform: rotate(135deg);\n    }\n\n    .dp-time-select-separator {\n      width: 5px;\n    }\n\n    &.dp-material {\n      .dp-time-select-control-up, .dp-time-select-control-down {\n        box-sizing: border-box;\n        background: transparent;\n        border: none;\n        outline: none;\n        border-radius: 50%;\n\n        &::before {\n          left: 0;\n        }\n\n        &:hover {\n          background: @c-light-gray;\n        }\n      }\n    }\n  }\n}\n",
                    "styleUrl": "time-select.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "timeSelectService",
                        "type": "TimeSelectService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 88,
                "jsdoctags": [
                    {
                        "name": "timeSelectService",
                        "type": "TimeSelectService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnChanges",
                "ControlValueAccessor",
                "Validator"
            ],
            "accessors": {
                "selected": {
                    "name": "selected",
                    "setSignature": {
                        "name": "selected",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "selected",
                                "type": "Dayjs",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 101,
                        "jsdoctags": [
                            {
                                "name": "selected",
                                "type": "Dayjs",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "selected",
                        "type": "",
                        "returnType": "Dayjs",
                        "line": 97
                    }
                }
            },
            "templateData": "<ul class=\"dp-time-select-controls\" dir=\"ltr\">\n  <li class=\"dp-time-select-control dp-time-select-control-hours\">\n    <button (click)=\"increase('hour')\"\n            [disabled]=\"!showIncHour\"\n            class=\"dp-time-select-control-up\"\n            type=\"button\">\n    </button>\n    <span [innerText]=\"hours\"\n          class=\"dp-time-select-display-hours\">\n    </span>\n    <button (click)=\"decrease('hour')\"\n            [disabled]=\"!showDecHour\"\n            class=\"dp-time-select-control-down\"\n            type=\"button\">\n    </button>\n  </li>\n  <li [innerText]=\"componentConfig.timeSeparator\"\n      class=\"dp-time-select-control dp-time-select-separator\">\n  </li>\n  <li class=\"dp-time-select-control dp-time-select-control-minutes\">\n    <button (click)=\"increase('minute')\"\n            [disabled]=\"!showIncMinute\"\n            class=\"dp-time-select-control-up\"\n            type=\"button\"></button>\n    <span [innerText]=\"minutes\"\n          class=\"dp-time-select-display-minutes\">\n    </span>\n    <button (click)=\"decrease('minute')\"\n            [disabled]=\"!showDecMinute\" class=\"dp-time-select-control-down\"\n            type=\"button\">\n    </button>\n  </li>\n  <ng-container *ngIf=\"componentConfig.showSeconds\">\n    <li [innerText]=\"componentConfig.timeSeparator\"\n        class=\"dp-time-select-control dp-time-select-separator\">\n    </li>\n    <li class=\"dp-time-select-control dp-time-select-control-seconds\">\n      <button (click)=\"increase('second')\"\n              [disabled]=\"!showIncSecond\"\n              class=\"dp-time-select-control-up\"\n              type=\"button\"></button>\n      <span [innerText]=\"seconds\"\n            class=\"dp-time-select-display-seconds\">\n      </span>\n      <button (click)=\"decrease('second')\"\n              [disabled]=\"!showDecSecond\"\n              class=\"dp-time-select-control-down\"\n              type=\"button\">\n      </button>\n    </li>\n  </ng-container>\n  <li *ngIf=\"!componentConfig.showTwentyFourHours\" class=\"dp-time-select-control dp-time-select-control-meridiem\">\n    <button (click)=\"toggleMeridiem()\"\n            [disabled]=\"!showToggleMeridiem\"\n            class=\"dp-time-select-control-up\"\n            type=\"button\">\n    </button>\n    <span [innerText]=\"meridiem\"\n          class=\"dp-time-select-display-meridiem\">\n    </span>\n    <button (click)=\"toggleMeridiem()\"\n            [disabled]=\"!showToggleMeridiem\"\n            class=\"dp-time-select-control-down\"\n            type=\"button\">\n    </button>\n  </li>\n</ul>\n"
        },
        {
            "name": "ToggleComponent",
            "id": "component-ToggleComponent-03822ab886baad4d7a34592aeda8409aae11849c657e778210f2d90263fc7c86c41551339fb004c539cf30b37eda5dba0519751fa6e786acb32fa97eedca1891",
            "file": "src/app/components/toggle/toggle.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-toggle",
            "styleUrls": [
                "./toggle.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toggle.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "isChecked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "toggleChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onToggleChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-toggle',\r\n  templateUrl: './toggle.component.html',\r\n  styleUrls: ['./toggle.component.scss'],\r\n  standalone: true\r\n})\r\nexport class ToggleComponent {\r\n  @Input() isChecked = false;\r\n  @Output() toggleChange = new EventEmitter<boolean>();\r\n\r\n  onToggleChange(): void {\r\n    this.isChecked = !this.isChecked;\r\n    this.toggleChange.emit(this.isChecked);\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".switch {\r\n  position: relative;\r\n  display: inline-block;\r\n  width: 60px;\r\n  height: 34px;\r\n\r\n  input {\r\n    opacity: 0;\r\n    width: 0;\r\n    height: 0;\r\n  }\r\n\r\n  .slider {\r\n    position: absolute;\r\n    cursor: pointer;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background-color: #ccc;\r\n    transition: 0.4s;\r\n    border-radius: 34px;\r\n\r\n    &:before {\r\n      position: absolute;\r\n      content: \"\";\r\n      height: 26px;\r\n      width: 26px;\r\n      left: 4px;\r\n      bottom: 4px;\r\n      background-color: white;\r\n      transition: 0.4s;\r\n      border-radius: 50%;\r\n    }\r\n  }\r\n\r\n  input:checked + .slider {\r\n    background-color: #2196F3;\r\n\r\n    &:before {\r\n      transform: translateX(26px);\r\n    }\r\n  }\r\n}\r\n\r\n.visually-hidden {\r\n  position: absolute;\r\n  width: 1px;\r\n  height: 1px;\r\n  margin: -1px;\r\n  padding: 0;\r\n  overflow: hidden;\r\n  clip: rect(0, 0, 0, 0);\r\n  border: 0;\r\n}",
                    "styleUrl": "./toggle.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<label class=\"switch\">\r\n  <input\r\n    type=\"checkbox\"\r\n    [checked]=\"isChecked\"\r\n    (change)=\"onToggleChange()\"\r\n    id=\"toggleSwitch\"\r\n  />\r\n  <span class=\"slider round\"></span>\r\n</label>\r\n<label for=\"toggleSwitch\" class=\"visually-hidden\">Toggle switch</label>\r\n"
        },
        {
            "name": "YearCalendarComponent",
            "id": "component-YearCalendarComponent-cae1f71926d8bfe0fbd22f9d0de6f0377fd58c6078db69ed643c3438ee9d6f88fb4a0f1b40e105b1ea99853ae37d927895c1cca38cc06f62f6291a4a7ddd8f3e",
            "file": "src/app/components/ng2datepickercopy/lib/year-calendar/year-calendar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => YearCalendarComponent), multi: true\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => YearCalendarComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "dp-year-calendar",
            "styleUrls": [
                "./year-calendar.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "./year-calendar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "IYearCalendarConfig",
                    "decorators": []
                },
                {
                    "name": "displayDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "Dayjs",
                    "decorators": []
                },
                {
                    "name": "maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "Dayjs",
                    "decorators": []
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "Dayjs",
                    "decorators": []
                },
                {
                    "name": "theme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onGoToCurrent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onLeftNav",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "EventEmitter<INavEvent>"
                },
                {
                    "name": "onLeftSecondaryNav",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "EventEmitter<INavEvent>"
                },
                {
                    "name": "onNavHeaderBtnClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "EventEmitter<>"
                },
                {
                    "name": "onRightNav",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "EventEmitter<INavEvent>"
                },
                {
                    "name": "onRightSecondaryNav",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "EventEmitter<INavEvent>"
                },
                {
                    "name": "onSelect",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "EventEmitter<IDateCell>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_currentDateView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dayjs",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 105
                },
                {
                    "name": "_selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Dayjs[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "_shouldShowCurrent",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "api",
                    "defaultValue": "{\r\n    toggleCalendar: this.toggleCalendarMode.bind(this),\r\n    moveCalendarTo: this.moveCalendarTo.bind(this)\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "componentConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IYearCalendarConfigInternal",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "inputValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CalendarValue",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "inputValueType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ECalendarValue",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "isInited",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "navLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "showLeftNav",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "showRightNav",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "startYear",
                    "defaultValue": "2016",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "validateFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DateValidator",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 94
                },
                {
                    "name": "yearMonths",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDateCell[][]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 90
                }
            ],
            "methodsClass": [
                {
                    "name": "convertFromMomentArray",
                    "args": [
                        {
                            "name": "format",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "Dayjs[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "convertTo",
                            "type": "ECalendarValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "CalendarValue",
                    "typeParameters": [],
                    "line": 242,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "format",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "Dayjs[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "convertTo",
                            "type": "ECalendarValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertToMoment",
                    "args": [
                        {
                            "name": "date",
                            "type": "SingleCalendarValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Dayjs | null",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "SingleCalendarValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getYearBtnCssClass",
                    "args": [
                        {
                            "name": "year",
                            "type": "IDateCell",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 303,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "year",
                            "type": "IDateCell",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goToCurrent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 259,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleConfigChange",
                    "args": [
                        {
                            "name": "config",
                            "type": "SimpleChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 353,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "SimpleChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "init",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 317,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "initValidators",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 333,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "moveCalendarTo",
                    "args": [
                        {
                            "name": "to",
                            "type": "SingleCalendarValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 346,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "to",
                            "type": "SingleCalendarValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChangeCallback",
                    "args": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 229,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLeftNavClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 264,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onRightNavClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 273,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "processOnChangeCallback",
                    "args": [
                        {
                            "name": "value",
                            "type": "Dayjs[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "CalendarValue",
                    "typeParameters": [],
                    "line": 232,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Dayjs[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnValidatorChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldShowCurrent",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 282,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleCalendarMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 342,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updateYearRange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "formControl",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | any",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formControl",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "CalendarValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "CalendarValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "yearClicked",
                    "args": [
                        {
                            "name": "year",
                            "type": "IDateCell",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 291,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "year",
                            "type": "IDateCell",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CalendarNavComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "export interface IGenCalendarParams<T> {\r\n  startDate: Dayjs;\r\n  numOfRows: number;\r\n  numOfCells: number;\r\n  isDisabledCb: (date: Dayjs, config: T) => boolean;\r\n  getBtnTextCb: (config: T, date: Dayjs) => string;\r\n  selected: Dayjs[];\r\n  config: T;\r\n  granularity: 'year' | 'month';\r\n}\r\n\r\nexport interface IDateCell {\r\n  date: Dayjs;\r\n  selected: boolean;\r\n  current: boolean;\r\n  disabled: boolean\r\n  text: string;\r\n}\r\n\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  HostBinding,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Output,\r\n  SimpleChange,\r\n  SimpleChanges,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {\r\n  ControlValueAccessor,\r\n  FormControl,\r\n  NG_VALIDATORS,\r\n  NG_VALUE_ACCESSOR,\r\n  ValidationErrors,\r\n  Validator\r\n} from '@angular/forms';\r\nimport dayjs, {Dayjs} from 'dayjs';\r\nimport {INavEvent} from '../common/models/navigation-event.model';\r\nimport {DateValidator} from '../common/types/validator.type';\r\nimport {IYearCalendarConfig, IYearCalendarConfigInternal} from './year-calendar-config';\r\nimport {YearCalendarService} from './year-calendar.service';\r\nimport {UtilsService} from '../common/services/utils/utils.service';\r\nimport { CalendarValue, ECalendarValue, SingleCalendarValue } from '../public-api';\r\nimport { CalendarNavComponent } from '../calendar-nav/calendar-nav.component';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'dp-year-calendar',\r\n  templateUrl: './year-calendar.component.html',\r\n  styleUrls: ['./year-calendar.component.less'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  standalone: true,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  imports: [CalendarNavComponent, CommonModule],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => YearCalendarComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => YearCalendarComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class YearCalendarComponent implements OnInit, OnChanges, ControlValueAccessor, Validator {\r\n\r\n  @Input() config!: IYearCalendarConfig;\r\n  @Input() displayDate!: Dayjs;\r\n  @Input() minDate!: Dayjs;\r\n  @Input() maxDate!: Dayjs;\r\n  @HostBinding('class') @Input() theme!: string;\r\n  @Output() onSelect: EventEmitter<IDateCell> = new EventEmitter();\r\n  @Output() onNavHeaderBtnClick: EventEmitter<null> = new EventEmitter();\r\n  @Output() onGoToCurrent: EventEmitter<void> = new EventEmitter();\r\n  @Output() onLeftNav: EventEmitter<INavEvent> = new EventEmitter();\r\n  @Output() onRightNav: EventEmitter<INavEvent> = new EventEmitter();\r\n  @Output() onLeftSecondaryNav: EventEmitter<INavEvent> = new EventEmitter();\r\n  @Output() onRightSecondaryNav: EventEmitter<INavEvent> = new EventEmitter();\r\n  isInited: boolean = false;\r\n  componentConfig!: IYearCalendarConfigInternal;\r\n  yearMonths!: IDateCell[][];\r\n  startYear: number = 2016;\r\n  inputValue!: CalendarValue;\r\n  inputValueType!: ECalendarValue;\r\n  validateFn!: DateValidator;\r\n  _shouldShowCurrent: boolean = true;\r\n  navLabel!: string;\r\n  showLeftNav!: boolean;\r\n  showRightNav!: boolean;\r\n  api = {\r\n    toggleCalendar: this.toggleCalendarMode.bind(this),\r\n    moveCalendarTo: this.moveCalendarTo.bind(this)\r\n  };\r\n\r\n  _selected!: Dayjs[];\r\n  _currentDateView!: Dayjs;\r\n\r\n  get selected(): Dayjs[] {\r\n    return this._selected;\r\n  }\r\n\r\n  set selected(selected: Dayjs[]) {\r\n    this._selected = selected;\r\n    this.onChangeCallback(this.processOnChangeCallback(selected));\r\n  }\r\n\r\n  get currentDateView(): Dayjs {\r\n    return this._currentDateView;\r\n  }\r\n\r\n    convertToMoment(date: SingleCalendarValue, format: string): Dayjs | null {\r\n    if (!date) {\r\n      return null;\r\n    } else if (typeof date === 'string') {\r\n      return dayjs(date, format);\r\n    } else {\r\n      return date.clone();\r\n    }\r\n  }\r\n\r\n  set currentDateView(current: Dayjs) {\r\n    this._currentDateView = current.clone();\r\n    // Initial range: 2016-2039\r\n    this.startYear =  this.currentDateView.year();\r\n    this.updateYearRange();\r\n    this.showLeftNav = this.yearCalendarService.shouldShowLeft(this.componentConfig.min, this._currentDateView);\r\n    this.showRightNav = this.yearCalendarService.shouldShowRight(this.componentConfig.max, this.currentDateView);\r\n  }\r\n\r\n  updateYearRange() {\r\n    // Set startYear based on currentDateView.year()\r\n    this.startYear = this.currentDateView.year();\r\n    const years: IDateCell[] = [];\r\n    const currentYear = dayjs().year();\r\n    for (let y = this.startYear; y < this.startYear + 24; y++) {\r\n      const date = dayjs(`${y}-01-01`);\r\n      years.push({\r\n        date,\r\n        selected: false,\r\n        current: date.year() === currentYear,\r\n        disabled: false,\r\n        text: date.format(this.componentConfig.yearBtnFormat ?? 'YYYY'),\r\n      });\r\n    }\r\n    this.yearMonths = [];\r\n    for (let i = 0; i < years.length; i += 6) {\r\n      this.yearMonths.push(years.slice(i, i + 6));\r\n    }\r\n    this.navLabel = `${this.startYear} - ${this.startYear + 23}`;\r\n  }\r\n\r\n  constructor(private readonly cd: ChangeDetectorRef,\r\n              private readonly yearCalendarService: YearCalendarService,\r\n              private readonly utilsService: UtilsService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.isInited = true;\r\n    this.init();\r\n    this.initValidators();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (this.isInited) {\r\n      const {minDate, maxDate, config} = changes;\r\n\r\n      this.handleConfigChange(config);\r\n      this.init();\r\n\r\n      if (minDate || maxDate) {\r\n        this.initValidators();\r\n      }\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onChangeCallback = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n  }\r\n\r\n  validate(formControl: FormControl): ValidationErrors | any {\r\n    if (this.minDate || this.maxDate) {\r\n      return this.validateFn(formControl.value);\r\n    } else {\r\n      return () => null;\r\n    }\r\n  }\r\n\r\n  writeValue(value: CalendarValue): void {\r\n    this.inputValue = value;\r\n    if (value) {\r\n      this.selected = this.utilsService.convertToDayjsArray(value, this.componentConfig);\r\n      // Set currentDateView to first selected value or displayDate\r\n      if (this.selected.length > 0) {\r\n        this.currentDateView = this.selected[0].clone();\r\n      } else if (this.displayDate) {\r\n        this.currentDateView = this.displayDate.clone();\r\n      }\r\n      this.startYear = this.currentDateView.year();\r\n    } else {\r\n      this.selected = [];\r\n      if (this.displayDate) {\r\n        this.currentDateView = this.displayDate.clone();\r\n        this.startYear = this.currentDateView.year();\r\n      }\r\n    }\r\n    this.updateYearRange();\r\n    this.inputValueType = this.utilsService.getInputType(this.inputValue, this.componentConfig.allowMultiSelect ?? false);\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  onChangeCallback(_: any): void {\r\n  }\r\n\r\n  processOnChangeCallback(value: Dayjs[]): CalendarValue {\r\n    return this.utilsService.convertFromDayjsArray(\r\n      this.componentConfig.format ?? '',\r\n      value,\r\n      this.componentConfig.returnedValueType || this.inputValueType\r\n    );\r\n  }\r\n\r\n\r\n  // todo:: add unit test\r\n  convertFromMomentArray(format: string,\r\n                         value: Dayjs[],\r\n                         convertTo: ECalendarValue): CalendarValue {\r\n    switch (convertTo) {\r\n      case (ECalendarValue.String):\r\n        return value[0] && value[0].format(format);\r\n      case (ECalendarValue.StringArr):\r\n        return value.filter(Boolean).map(v => v.format(format));\r\n      case (ECalendarValue.Dayjs):\r\n        return value[0] ? value[0].clone() : value[0];\r\n      case (ECalendarValue.DayjsArr):\r\n        return value ? value.map(v => v.clone()) : value;\r\n      default:\r\n        return value;\r\n    }\r\n  }\r\n\r\n  goToCurrent(): void {\r\n    this.currentDateView = dayjs();\r\n    this.onGoToCurrent.emit();\r\n  }\r\n\r\n  onLeftNavClick() {\r\n  const from = this.currentDateView.clone();\r\n  // Move currentDateView 24 years back and update startYear accordingly\r\n  this.currentDateView = this.currentDateView.subtract(24, 'year');\r\n  this.startYear = this.currentDateView.year();\r\n  this.updateYearRange();\r\n  this.onLeftNav.emit({from, to: this.currentDateView.clone()});\r\n  }\r\n\r\n  onRightNavClick(): void {\r\n  const from = this.currentDateView.clone();\r\n  // Move currentDateView 24 years forward and update startYear accordingly\r\n  this.currentDateView = this.currentDateView.add(24, 'year');\r\n  this.startYear = this.currentDateView.year();\r\n  this.updateYearRange();\r\n  this.onRightNav.emit({from, to: this.currentDateView.clone()});\r\n  }\r\n\r\n  shouldShowCurrent(): boolean {\r\n    return this.utilsService.shouldShowCurrent(\r\n      this.componentConfig.showGoToCurrent ?? false,\r\n      'month',\r\n      this.componentConfig.min ?? dayjs(),\r\n      this.componentConfig.max ?? dayjs()\r\n    );\r\n  }\r\n\r\n  yearClicked(year: IDateCell): void {\r\n    if (year.selected && !this.componentConfig.unSelectOnClick) {\r\n      return;\r\n    }\r\n\r\n    this.selected = this.utilsService\r\n      .updateSelected(this.componentConfig.allowMultiSelect ?? false, this.selected, year, 'year');\r\n    this.yearMonths = this.yearCalendarService\r\n      .generateCalendar(this.componentConfig, this.currentDateView, this.selected);\r\n    this.onSelect.emit(year);\r\n  }\r\n\r\n  getYearBtnCssClass(year: IDateCell): {[klass: string]: boolean} {\r\n    const cssClass: {[klass: string]: boolean} = {\r\n      'dp-selected': year.selected,\r\n      'dp-current-year': year.current\r\n    };\r\n    const customCssClass: string = this.yearCalendarService.getYearBtnCssClass(this.componentConfig, year.date);\r\n\r\n    if (customCssClass) {\r\n      cssClass[customCssClass] = true;\r\n    }\r\n\r\n    return cssClass;\r\n  }\r\n\r\n  private init(): void {\r\n    this.componentConfig = this.yearCalendarService.getConfig(this.config);\r\n    this.selected = this.selected || [];\r\n    this.currentDateView = this.displayDate\r\n      ? this.displayDate\r\n      : this.utilsService\r\n        .getDefaultDisplayDate(\r\n          this.currentDateView,\r\n          this.selected,\r\n          this.componentConfig.allowMultiSelect ?? false,\r\n          this.componentConfig.min ?? dayjs()\r\n        );\r\n    this.inputValueType = this.utilsService.getInputType(this.inputValue, this.componentConfig.allowMultiSelect ?? false);\r\n    this._shouldShowCurrent = this.shouldShowCurrent();\r\n  }\r\n\r\n  private initValidators(): void {\r\n    this.validateFn = this.utilsService.createValidator(\r\n      {minDate: this.minDate, maxDate: this.maxDate},\r\n      this.componentConfig.format ?? '',\r\n      'year'\r\n    );\r\n    this.onChangeCallback(this.processOnChangeCallback(this.selected));\r\n  }\r\n\r\n  private toggleCalendarMode(): void {\r\n    this.onNavHeaderBtnClick.emit();\r\n  }\r\n\r\n  private moveCalendarTo(to: SingleCalendarValue): void {\r\n    if (to) {\r\n      this.currentDateView = this.utilsService.convertToDayjs(to, this.componentConfig.format ?? '');\r\n      this.cd.markForCheck();\r\n    }\r\n  }\r\n\r\n  private handleConfigChange(config: SimpleChange): void {\r\n    if (config) {\r\n      const prevConf: IYearCalendarConfigInternal = this.yearCalendarService.getConfig(config.previousValue);\r\n      const currentConf: IYearCalendarConfigInternal = this.yearCalendarService.getConfig(config.currentValue);\r\n\r\n      if (this.utilsService.shouldResetCurrentView(prevConf, currentConf)) {\r\n        this._currentDateView = dayjs();\r\n      }\r\n\r\n      // Use locale from the original config objects, not the internal config\r\n      const prevLocale = config.previousValue?.locale;\r\n      const currentLocale = config.currentValue?.locale;\r\n\r\n      if (prevLocale !== currentLocale) {\r\n        if (this.currentDateView && currentLocale) {\r\n          this.currentDateView = this.currentDateView.locale(currentLocale);\r\n        }\r\n\r\n        if (currentLocale) {\r\n          (this.selected || []).forEach((d) => d.locale(currentLocale));\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./year-calendar.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "yearCalendarService",
                        "type": "YearCalendarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 159,
                "jsdoctags": [
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "yearCalendarService",
                        "type": "YearCalendarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnChanges",
                "ControlValueAccessor",
                "Validator"
            ],
            "accessors": {
                "selected": {
                    "name": "selected",
                    "setSignature": {
                        "name": "selected",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "selected",
                                "type": "Dayjs[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 111,
                        "jsdoctags": [
                            {
                                "name": "selected",
                                "type": "Dayjs[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "selected",
                        "type": "[]",
                        "returnType": "Dayjs[]",
                        "line": 107
                    }
                },
                "currentDateView": {
                    "name": "currentDateView",
                    "setSignature": {
                        "name": "currentDateView",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "current",
                                "type": "Dayjs",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 130,
                        "jsdoctags": [
                            {
                                "name": "current",
                                "type": "Dayjs",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "currentDateView",
                        "type": "",
                        "returnType": "Dayjs",
                        "line": 116
                    }
                }
            },
            "templateData": "<div class=\"dp-year-calendar-container\">\r\n  <dp-calendar-nav\r\n      (onGoToCurrent)=\"goToCurrent()\"\r\n      (onLabelClick)=\"toggleCalendarMode()\"\r\n      (onChooseYearClick)=\"toggleCalendarMode()\"\r\n      (onLeftNav)=\"onLeftNavClick()\"\r\n      (onRightNav)=\"onRightNavClick()\"\r\n      [isLabelClickable]=\"componentConfig.isNavHeaderBtnClickable\"\r\n      [label]=\"navLabel\"\r\n      [showGoToCurrent]=\"shouldShowCurrent()\"\r\n      [showLeftNav]=\"showLeftNav\"\r\n      [showRightNav]=\"showRightNav\"\r\n      [theme]=\"theme\">\r\n  </dp-calendar-nav>\r\n\r\n  <div class=\"dp-calendar-wrapper\">\r\n    <div *ngFor=\"let yearRow of yearMonths\" class=\"dp-years-row\">\r\n      <button (click)=\"yearClicked(year)\"\r\n              *ngFor=\"let year of yearRow\"\r\n              [attr.data-date]=\"year.date.format(componentConfig.format)\"\r\n              [disabled]=\"year.disabled\"\r\n              [innerText]=\"year.text\"\r\n              [ngClass]=\"getYearBtnCssClass(year)\"\r\n              style=\"width: unset;height: unset;\"\r\n              class=\"dp-calendar-year dp-calendar-day\"\r\n              type=\"button\">\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-0aaae7d2f20fd7cff044ae6f6d89d09c424b473311af4f2dc1b0c131342282a69f4dce6c67f77b920b647996262064e7d90793babd808130557dd8ee5302ad04",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\n\r\nimport { AppComponent } from './app.component';\r\n\r\n@NgModule({\r\n  declarations: [AppComponent],\r\n  imports: [],\r\n  providers: [],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "COMBINED_FORMAT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ng2datepickercopy/lib/day-time-calendar/day-time-calendar.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "DAY_FORMAT + TIME_FORMAT"
            },
            {
                "name": "DAY_FORMAT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ng2datepickercopy/lib/day-time-calendar/day-time-calendar.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'YYYYMMDD'"
            },
            {
                "name": "dayjsRef",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ng2datepickercopy/lib/common/dayjs/dayjs.ref.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "dayjs"
            },
            {
                "name": "DEFAULT_DEBOUNCE_MS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ng2datepickercopy/lib/common/decorators/decorators.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "500"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n}"
            },
            {
                "name": "FIRST_PM_HOUR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ng2datepickercopy/lib/time-select/time-select.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "12"
            },
            {
                "name": "single",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/histogram/data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n    name: 'Germany',\r\n    value: 8940000,\r\n  },\r\n  {\r\n    name: 'USA',\r\n    value: 5000000,\r\n  },\r\n  {\r\n    name: 'France',\r\n    value: 7200000,\r\n  },\r\n  {\r\n    name: 'UK',\r\n    value: 6200000,\r\n  },\r\n]"
            },
            {
                "name": "TIME_FORMAT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/ng2datepickercopy/lib/day-time-calendar/day-time-calendar.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'HH:mm:ss'"
            }
        ],
        "functions": [
            {
                "name": "debounce",
                "file": "src/app/components/ng2datepickercopy/lib/common/decorators/decorators.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "ms",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "DEFAULT_DEBOUNCE_MS"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "ms",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "DEFAULT_DEBOUNCE_MS",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "CalendarMode",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"day\" | \"month\" | \"daytime\" | \"time\" | \"year\"",
                "file": "src/app/components/ng2datepickercopy/lib/common/types/calendar-mode.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "CalendarValue",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Dayjs | Dayjs[] | string | string[]",
                "file": "src/app/components/ng2datepickercopy/lib/common/types/calendar-value.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "DateValidator",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/app/components/ng2datepickercopy/lib/common/types/validator.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "SingleCalendarValue",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Dayjs | string",
                "file": "src/app/components/ng2datepickercopy/lib/common/types/single-calendar-value.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TDrops",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"up\" | \"down\"",
                "file": "src/app/components/ng2datepickercopy/lib/common/types/poistions.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TimeUnit",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"hour\" | \"minute\" | \"second\"",
                "file": "src/app/components/ng2datepickercopy/lib/time-select/time-select.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TOpens",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"right\" | \"left\"",
                "file": "src/app/components/ng2datepickercopy/lib/common/types/poistions.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "WeekDays",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"su\" | \"mo\" | \"tu\" | \"we\" | \"th\" | \"fr\" | \"sa\"",
                "file": "src/app/components/ng2datepickercopy/lib/common/types/week-days.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [
            {
                "name": "ECalendarMode",
                "childs": [
                    {
                        "name": "Day",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "DayTime",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Month",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Time",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Year",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/ng2datepickercopy/lib/common/types/calendar-mode-enum.ts"
            },
            {
                "name": "ECalendarValue",
                "childs": [
                    {
                        "name": "Dayjs",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": 1
                    },
                    {
                        "name": "DayjsArr",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "String",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "StringArr",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/ng2datepickercopy/lib/common/types/calendar-value-enum.ts"
            },
            {
                "name": "SelectEvent",
                "childs": [
                    {
                        "name": "INPUT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "input"
                    },
                    {
                        "name": "SELECTION",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "selection"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/ng2datepickercopy/lib/common/types/selection-event.enum.ts"
            }
        ],
        "groupedVariables": {
            "src/app/components/ng2datepickercopy/lib/day-time-calendar/day-time-calendar.service.ts": [
                {
                    "name": "COMBINED_FORMAT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ng2datepickercopy/lib/day-time-calendar/day-time-calendar.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "DAY_FORMAT + TIME_FORMAT"
                },
                {
                    "name": "DAY_FORMAT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ng2datepickercopy/lib/day-time-calendar/day-time-calendar.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'YYYYMMDD'"
                },
                {
                    "name": "TIME_FORMAT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ng2datepickercopy/lib/day-time-calendar/day-time-calendar.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'HH:mm:ss'"
                }
            ],
            "src/app/components/ng2datepickercopy/lib/common/dayjs/dayjs.ref.ts": [
                {
                    "name": "dayjsRef",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ng2datepickercopy/lib/common/dayjs/dayjs.ref.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "dayjs"
                }
            ],
            "src/app/components/ng2datepickercopy/lib/common/decorators/decorators.ts": [
                {
                    "name": "DEFAULT_DEBOUNCE_MS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ng2datepickercopy/lib/common/decorators/decorators.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "500"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n}"
                }
            ],
            "src/app/components/ng2datepickercopy/lib/time-select/time-select.service.ts": [
                {
                    "name": "FIRST_PM_HOUR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/ng2datepickercopy/lib/time-select/time-select.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "12"
                }
            ],
            "src/app/components/histogram/data.ts": [
                {
                    "name": "single",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/histogram/data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n    name: 'Germany',\r\n    value: 8940000,\r\n  },\r\n  {\r\n    name: 'USA',\r\n    value: 5000000,\r\n  },\r\n  {\r\n    name: 'France',\r\n    value: 7200000,\r\n  },\r\n  {\r\n    name: 'UK',\r\n    value: 6200000,\r\n  },\r\n]"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/components/ng2datepickercopy/lib/common/decorators/decorators.ts": [
                {
                    "name": "debounce",
                    "file": "src/app/components/ng2datepickercopy/lib/common/decorators/decorators.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "ms",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "DEFAULT_DEBOUNCE_MS"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "ms",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "DEFAULT_DEBOUNCE_MS",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/components/ng2datepickercopy/lib/common/types/calendar-mode-enum.ts": [
                {
                    "name": "ECalendarMode",
                    "childs": [
                        {
                            "name": "Day",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "DayTime",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Month",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Time",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Year",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/ng2datepickercopy/lib/common/types/calendar-mode-enum.ts"
                }
            ],
            "src/app/components/ng2datepickercopy/lib/common/types/calendar-value-enum.ts": [
                {
                    "name": "ECalendarValue",
                    "childs": [
                        {
                            "name": "Dayjs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": 1
                        },
                        {
                            "name": "DayjsArr",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "String",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "StringArr",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/ng2datepickercopy/lib/common/types/calendar-value-enum.ts"
                }
            ],
            "src/app/components/ng2datepickercopy/lib/common/types/selection-event.enum.ts": [
                {
                    "name": "SelectEvent",
                    "childs": [
                        {
                            "name": "INPUT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "input"
                        },
                        {
                            "name": "SELECTION",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "selection"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/ng2datepickercopy/lib/common/types/selection-event.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/components/ng2datepickercopy/lib/common/types/calendar-mode.ts": [
                {
                    "name": "CalendarMode",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"day\" | \"month\" | \"daytime\" | \"time\" | \"year\"",
                    "file": "src/app/components/ng2datepickercopy/lib/common/types/calendar-mode.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/components/ng2datepickercopy/lib/common/types/calendar-value.ts": [
                {
                    "name": "CalendarValue",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Dayjs | Dayjs[] | string | string[]",
                    "file": "src/app/components/ng2datepickercopy/lib/common/types/calendar-value.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/components/ng2datepickercopy/lib/common/types/validator.type.ts": [
                {
                    "name": "DateValidator",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/app/components/ng2datepickercopy/lib/common/types/validator.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "src/app/components/ng2datepickercopy/lib/common/types/single-calendar-value.ts": [
                {
                    "name": "SingleCalendarValue",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Dayjs | string",
                    "file": "src/app/components/ng2datepickercopy/lib/common/types/single-calendar-value.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/components/ng2datepickercopy/lib/common/types/poistions.type.ts": [
                {
                    "name": "TDrops",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"up\" | \"down\"",
                    "file": "src/app/components/ng2datepickercopy/lib/common/types/poistions.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "TOpens",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"right\" | \"left\"",
                    "file": "src/app/components/ng2datepickercopy/lib/common/types/poistions.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/components/ng2datepickercopy/lib/time-select/time-select.service.ts": [
                {
                    "name": "TimeUnit",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"hour\" | \"minute\" | \"second\"",
                    "file": "src/app/components/ng2datepickercopy/lib/time-select/time-select.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/components/ng2datepickercopy/lib/common/types/week-days.type.ts": [
                {
                    "name": "WeekDays",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"su\" | \"mo\" | \"tu\" | \"we\" | \"th\" | \"fr\" | \"sa\"",
                    "file": "src/app/components/ng2datepickercopy/lib/common/types/week-days.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/accordion/accordion-2.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Accordion2Component",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/accordion/accordion-2.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "StopAccordionToggleDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/accordion/accordion.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccordionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/accordion/models/accordion.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AccordionItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/address-form/address-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddressFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertComponent",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/app/components/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/cs-date-picker/cs-date-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CsDatePickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/56",
                "status": "low"
            },
            {
                "filePath": "src/app/components/cs-date-picker/cs-date-picker.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DateOptions",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/date-picker/date-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatePickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/fetch-data/fetch-data.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FetchDataComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/fetch-data/fetch-data.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Pokemon",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/fetch-data/pokemon.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PokemonService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/fetch-data/pokemon.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HttpResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/fetch-data/pokemon.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Pokemon",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/form-field/form-field.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormFieldComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/form/form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/histogram/data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "single",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/histogram/histogram.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HistogramComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/list/list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/list/list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/calendar-nav/calendar-nav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CalendarNavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/common/dayjs/dayjs.ref.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dayjsRef",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/common/decorators/decorators.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "debounce",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/common/decorators/decorators.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_DEBOUNCE_MS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/common/models/calendar.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICalendar",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/common/models/calendar.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICalendarInternal",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/common/models/date.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDate",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/common/models/navigation-event.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "INavEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/common/services/utils/utils.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UtilsService",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/common/services/utils/utils.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DateLimits",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/common/types/calendar-mode.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "CalendarMode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/common/types/calendar-value.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "CalendarValue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/common/types/poistions.type.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TDrops",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/common/types/poistions.type.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TOpens",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/common/types/selection-event.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISelectionEvent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/common/types/single-calendar-value.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "SingleCalendarValue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/common/types/validator.type.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "DateValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/common/types/week-days.type.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "WeekDays",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/date-picker/date-picker-config.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IConfig",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/date-picker/date-picker-config.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDatePickerConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/date-picker/date-picker-config.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDatePickerConfigInternal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/date-picker/date-picker-directive-config.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDatePickerDirectiveConfig",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/date-picker/date-picker.api.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDpDayPickerApi",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/date-picker/date-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatePickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/78",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/date-picker/date-picker.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DatePickerDirective",
                "coveragePercent": 0,
                "coverageCount": "0/43",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/date-picker/date-picker.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DatePickerService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/day-calendar/day-calendar-config.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IConfig",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/day-calendar/day-calendar-config.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDayCalendarConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/day-calendar/day-calendar-config.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDayCalendarConfigInternal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/day-calendar/day-calendar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DayCalendarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/63",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/day-calendar/day-calendar.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DayCalendarService",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/day-calendar/day.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDay",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/day-calendar/day.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDayEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/day-time-calendar/day-time-calendar-config.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDayTimeCalendarConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/day-time-calendar/day-time-calendar-config.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDayTimeCalendarConfigInternal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/day-time-calendar/day-time-calendar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DayTimeCalendarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/38",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/day-time-calendar/day-time-calendar.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DayTimeCalendarService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/day-time-calendar/day-time-calendar.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COMBINED_FORMAT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/day-time-calendar/day-time-calendar.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DAY_FORMAT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/day-time-calendar/day-time-calendar.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TIME_FORMAT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/month-calendar/month-calendar-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IConfig",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/month-calendar/month-calendar-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMonthCalendarConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/month-calendar/month-calendar-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMonthCalendarConfigInternal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/month-calendar/month-calendar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MonthCalendarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/53",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/month-calendar/month-calendar.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MonthCalendarService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/month-calendar/month.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMonth",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/time-select/time-select-config.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IConfig",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/time-select/time-select-config.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITimeSelectConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/time-select/time-select-config.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITimeSelectConfigInternal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/time-select/time-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimeSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/47",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/time-select/time-select.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TimeSelectService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/time-select/time-select.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FIRST_PM_HOUR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/time-select/time-select.service.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TimeUnit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/year-calendar/year-calendar-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IConfig",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/year-calendar/year-calendar-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IYearCalendarConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/year-calendar/year-calendar-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IYearCalendarConfigInternal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/year-calendar/year-calendar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "YearCalendarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/52",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/year-calendar/year-calendar.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDateCell",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/year-calendar/year-calendar.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IGenCalendarParams",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/year-calendar/year-calendar.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "YearCalendarService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/ng2datepickercopy/lib/year-calendar/year-calendar.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDateCell",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/playground/components/plg-title/plg-title.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlTitleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/playground/playground.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlaygroundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/components/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/simple-table/simple-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SimpleTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskComponent",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/toggle/toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToggleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/dynamic-class.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DynamicClassDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/dynamic-style.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DynamicStyleDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/text-input-style.directives.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "CustomInputStyleDirective",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/text-input-style.directives.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StyleConfig",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/models/task.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Task",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}