(self.webpackChunktaskbox=self.webpackChunktaskbox||[]).push([[618],{"./src/app/components/ng2datepickercopy/lib/calendar-nav/calendar-nav.component.less?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"dp-calendar-nav .dp-calendar-nav-container {\n  position: relative;\n  box-sizing: border-box;\n  height: 25px;\n  border: 1px solid #000000;\n  border-bottom: none;\n}\ndp-calendar-nav .dp-nav-date-btn {\n  box-sizing: border-box;\n  height: 25px;\n  border: 1px solid #000000;\n  border-bottom: none;\n}\ndp-calendar-nav .dp-nav-btns-container {\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  right: 5px;\n  display: inline-block;\n}\ndp-calendar-nav .dp-calendar-nav-container-left,\ndp-calendar-nav .dp-calendar-nav-container-right {\n  display: inline-block;\n}\ndp-calendar-nav .dp-calendar-nav-left,\ndp-calendar-nav .dp-calendar-nav-right,\ndp-calendar-nav .dp-calendar-secondary-nav-left,\ndp-calendar-nav .dp-calendar-secondary-nav-right {\n  position: relative;\n  width: 16px;\n  cursor: pointer;\n}\ndp-calendar-nav .dp-calendar-nav-left,\ndp-calendar-nav .dp-calendar-nav-right {\n  line-height: 0;\n}\ndp-calendar-nav .dp-calendar-nav-left::before,\ndp-calendar-nav .dp-calendar-nav-right::before {\n  position: relative;\n  content: '';\n  display: inline-block;\n  height: 8px;\n  width: 8px;\n  vertical-align: baseline;\n  border-style: solid;\n  border-width: 2px 2px 0 0;\n  transform: rotate(45deg);\n}\ndp-calendar-nav .dp-calendar-secondary-nav-left,\ndp-calendar-nav .dp-calendar-secondary-nav-right {\n  padding: 0;\n}\ndp-calendar-nav .dp-calendar-secondary-nav-left::before,\ndp-calendar-nav .dp-calendar-secondary-nav-right::before,\ndp-calendar-nav .dp-calendar-secondary-nav-left::after,\ndp-calendar-nav .dp-calendar-secondary-nav-right::after {\n  position: relative;\n  content: '';\n  display: inline-block;\n  height: 8px;\n  width: 8px;\n  vertical-align: baseline;\n  border-style: solid;\n  border-width: 2px 2px 0 0;\n  transform: rotate(45deg);\n}\ndp-calendar-nav .dp-calendar-secondary-nav-left::before,\ndp-calendar-nav .dp-calendar-secondary-nav-right::before {\n  right: -10px;\n}\ndp-calendar-nav .dp-calendar-secondary-nav-right {\n  left: initial;\n  right: 5px;\n}\ndp-calendar-nav .dp-calendar-nav-left::before {\n  position: relative;\n  content: '';\n  display: inline-block;\n  height: 8px;\n  width: 8px;\n  vertical-align: baseline;\n  border-style: solid;\n  border-width: 2px 2px 0 0;\n  transform: rotate(-135deg);\n}\ndp-calendar-nav .dp-calendar-secondary-nav-left::before,\ndp-calendar-nav .dp-calendar-secondary-nav-left::after {\n  position: relative;\n  content: '';\n  display: inline-block;\n  height: 8px;\n  width: 8px;\n  vertical-align: baseline;\n  border-style: solid;\n  border-width: 2px 2px 0 0;\n  transform: rotate(-135deg);\n}\ndp-calendar-nav .dp-calendar-secondary-nav-left::before {\n  right: -10px;\n}\ndp-calendar-nav .dp-nav-header {\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  left: 5px;\n  display: inline-block;\n  font-size: 13px;\n}\ndp-calendar-nav .dp-nav-header-btn {\n  cursor: pointer;\n}\ndp-calendar-nav .dp-current-location-btn {\n  position: relative;\n  top: -1px;\n  height: 16px;\n  width: 16px;\n  vertical-align: middle;\n  background: rgba(0, 0, 0, 0.6);\n  border: 1px solid rgba(0, 0, 0, 0.6);\n  outline: none;\n  border-radius: 50%;\n  box-shadow: inset 0 0 0 3px #FFFFFF;\n  cursor: pointer;\n}\ndp-calendar-nav .dp-current-location-btn:hover {\n  background: #000000;\n}\ndp-calendar-nav.dp-material .dp-calendar-nav-container {\n  height: 30px;\n  border: 1px solid #E0E0E0;\n}\ndp-calendar-nav.dp-material .dp-calendar-nav-left,\ndp-calendar-nav.dp-material .dp-calendar-nav-right,\ndp-calendar-nav.dp-material .dp-calendar-secondary-nav-left,\ndp-calendar-nav.dp-material .dp-calendar-secondary-nav-right {\n  border: none;\n  background: #FFFFFF;\n  outline: none;\n  font-size: 16px;\n  padding: 0;\n}\ndp-calendar-nav.dp-material .dp-calendar-secondary-nav-left,\ndp-calendar-nav.dp-material .dp-calendar-secondary-nav-right {\n  width: 20px;\n}\ndp-calendar-nav.dp-material .dp-nav-header-btn {\n  height: 20px;\n  width: 80px;\n  border: none;\n  background: #FFFFFF;\n  outline: none;\n}\ndp-calendar-nav.dp-material .dp-nav-header-btn:hover {\n  background: rgba(0, 0, 0, 0.05);\n}\ndp-calendar-nav.dp-material .dp-nav-header-btn:active {\n  background: rgba(0, 0, 0, 0.1);\n}\n",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./src/app/components/ng2datepickercopy/lib/date-picker/date-picker.component.less?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"dp-date-picker {\n  display: inline-block;\n}\ndp-date-picker.dp-material .dp-picker-input {\n  box-sizing: border-box;\n  height: 30px;\n  width: 213px;\n  font-size: 13px;\n  outline: none;\n}\ndp-date-picker .dp-input-container {\n  position: relative;\n}\ndp-date-picker .dp-selected {\n  background: #106CC8;\n  color: #FFFFFF;\n}\n.dp-popup {\n  position: relative;\n  display: inline-block;\n  background: #FFFFFF;\n  box-shadow: 1px 1px 5px 0 rgba(0, 0, 0, 0.1);\n  border-left: 1px solid rgba(0, 0, 0, 0.1);\n  border-right: 1px solid rgba(0, 0, 0, 0.1);\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  white-space: nowrap;\n}\n",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./src/app/components/ng2datepickercopy/lib/day-calendar/day-calendar.component.less?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"dp-day-calendar {\n  display: inline-block;\n}\ndp-day-calendar .dp-day-calendar-container {\n  background: #FFFFFF;\n}\ndp-day-calendar .dp-calendar-wrapper {\n  box-sizing: border-box;\n  border: 1px solid #000000;\n}\ndp-day-calendar .dp-calendar-wrapper .dp-calendar-weekday:first-child {\n  border-left: none;\n}\ndp-day-calendar .dp-weekdays {\n  font-size: 15px;\n  margin-bottom: 5px;\n}\ndp-day-calendar .dp-calendar-weekday {\n  box-sizing: border-box;\n  display: inline-block;\n  width: 30px;\n  text-align: center;\n  border-left: 1px solid #000000;\n  border-bottom: 1px solid #000000;\n}\ndp-day-calendar .dp-calendar-day {\n  box-sizing: border-box;\n  width: 30px;\n  height: 30px;\n  cursor: pointer;\n}\ndp-day-calendar .dp-selected {\n  background: #106CC8;\n  color: #FFFFFF;\n}\ndp-day-calendar .dp-prev-month,\ndp-day-calendar .dp-next-month {\n  opacity: 0.5;\n}\ndp-day-calendar .dp-hide-near-month .dp-prev-month,\ndp-day-calendar .dp-hide-near-month .dp-next-month {\n  visibility: hidden;\n}\ndp-day-calendar .dp-week-number {\n  position: absolute;\n  font-size: 9px;\n}\ndp-day-calendar.dp-material .dp-calendar-weekday {\n  height: 25px;\n  width: 30px;\n  line-height: 25px;\n  color: #7a7a7a;\n  border: none;\n}\ndp-day-calendar.dp-material .dp-calendar-wrapper {\n  border: 1px solid #E0E0E0;\n}\ndp-day-calendar.dp-material .dp-calendar-month,\ndp-day-calendar.dp-material .dp-calendar-day {\n  box-sizing: border-box;\n  background: #FFFFFF;\n  border-radius: 50%;\n  border: none;\n  outline: none;\n}\ndp-day-calendar.dp-material .dp-calendar-month:hover,\ndp-day-calendar.dp-material .dp-calendar-day:hover {\n  background: #E0E0E0;\n}\ndp-day-calendar.dp-material .dp-selected {\n  background: #106CC8;\n  color: #FFFFFF;\n}\ndp-day-calendar.dp-material .dp-selected:hover {\n  background: #106CC8;\n}\ndp-day-calendar.dp-material .dp-current-day {\n  border: 1px solid #106CC8;\n}\n",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./src/app/components/ng2datepickercopy/lib/day-time-calendar/day-time-calendar.component.less?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"dp-day-time-calendar {\n  display: inline-block;\n}\ndp-day-time-calendar dp-time-select {\n  display: block;\n  border: 1px solid #000000;\n  border-top: 0;\n}\ndp-day-time-calendar.dp-material dp-time-select {\n  border: 1px solid #E0E0E0;\n  border-top: 0;\n}\n",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./src/app/components/ng2datepickercopy/lib/month-calendar/month-calendar.component.less?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"dp-month-calendar {\n  display: inline-block;\n}\ndp-month-calendar .dp-month-calendar-container {\n  background: #FFFFFF;\n}\ndp-month-calendar .dp-calendar-wrapper {\n  border: 1px solid #000000;\n}\ndp-month-calendar .dp-calendar-month {\n  box-sizing: border-box;\n  width: 52.5px;\n  height: 52.5px;\n  cursor: pointer;\n}\ndp-month-calendar .dp-calendar-month.dp-selected {\n  background: #106CC8;\n  color: #FFFFFF;\n}\ndp-month-calendar.dp-material .dp-calendar-weekday {\n  height: 25px;\n  width: 30px;\n  line-height: 25px;\n  background: #E0E0E0;\n  border: 1px solid #E0E0E0;\n}\ndp-month-calendar.dp-material .dp-calendar-wrapper {\n  border: 1px solid #E0E0E0;\n}\ndp-month-calendar.dp-material .dp-calendar-month {\n  box-sizing: border-box;\n  background: #FFFFFF;\n  border-radius: 50%;\n  border: none;\n  outline: none;\n}\ndp-month-calendar.dp-material .dp-calendar-month:hover {\n  background: #E0E0E0;\n}\ndp-month-calendar.dp-material .dp-selected {\n  background: #106CC8;\n  color: #FFFFFF;\n}\ndp-month-calendar.dp-material .dp-selected:hover {\n  background: #106CC8;\n}\ndp-month-calendar.dp-material .dp-current-month {\n  border: 1px solid #106CC8;\n}\n",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./src/app/components/ng2datepickercopy/lib/time-select/time-select.component.less?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"dp-time-select {\n  display: inline-block;\n}\ndp-time-select .dp-time-select-controls {\n  margin: 0;\n  padding: 0;\n  text-align: center;\n  line-height: normal;\n  background: #FFFFFF;\n}\ndp-time-select .dp-time-select-control {\n  display: inline-block;\n  width: 35px;\n  margin: 0 auto;\n  vertical-align: middle;\n  font-size: inherit;\n  letter-spacing: 1px;\n}\ndp-time-select .dp-time-select-control-up,\ndp-time-select .dp-time-select-control-down {\n  position: relative;\n  display: block;\n  width: 24px;\n  height: 24px;\n  margin: 3px auto;\n  cursor: pointer;\n}\ndp-time-select .dp-time-select-control-up::before,\ndp-time-select .dp-time-select-control-down::before {\n  position: relative;\n  content: '';\n  display: inline-block;\n  height: 8px;\n  width: 8px;\n  vertical-align: baseline;\n  border-style: solid;\n  border-width: 2px 2px 0 0;\n  transform: rotate(0deg);\n}\ndp-time-select .dp-time-select-control-up::before {\n  transform: rotate(-45deg);\n  top: 4px;\n}\ndp-time-select .dp-time-select-control-down::before {\n  transform: rotate(135deg);\n}\ndp-time-select .dp-time-select-separator {\n  width: 5px;\n}\ndp-time-select.dp-material .dp-time-select-control-up,\ndp-time-select.dp-material .dp-time-select-control-down {\n  box-sizing: border-box;\n  background: transparent;\n  border: none;\n  outline: none;\n  border-radius: 50%;\n}\ndp-time-select.dp-material .dp-time-select-control-up::before,\ndp-time-select.dp-material .dp-time-select-control-down::before {\n  left: 0;\n}\ndp-time-select.dp-material .dp-time-select-control-up:hover,\ndp-time-select.dp-material .dp-time-select-control-down:hover {\n  background: #E0E0E0;\n}\n",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./src/app/components/ng2datepickercopy/lib/year-calendar/year-calendar.component.less?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/@angular-devkit/build-angular/node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,"",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./src/app/components/ng2datepickercopy/ng2-date-picker-copy.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,YearCalendar:()=>YearCalendar,__namedExportsOrder:()=>__namedExportsOrder,default:()=>ng2_date_picker_copy_stories});var dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),fesm2022_forms=__webpack_require__("./node_modules/@angular/forms/fesm2022/forms.mjs"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs");var ECalendarValue,date_picker_componentngResource=__webpack_require__("./src/app/components/ng2datepickercopy/lib/date-picker/date-picker.component.less?ngResource"),date_picker_componentngResource_default=__webpack_require__.n(date_picker_componentngResource);!function(ECalendarValue){ECalendarValue[ECalendarValue.Dayjs=1]="Dayjs",ECalendarValue[ECalendarValue.DayjsArr=2]="DayjsArr",ECalendarValue[ECalendarValue.String=3]="String",ECalendarValue[ECalendarValue.StringArr=4]="StringArr"}(ECalendarValue||(ECalendarValue={}));var core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),dayjs_min=__webpack_require__("./node_modules/dayjs/dayjs.min.js"),dayjs_min_default=__webpack_require__.n(dayjs_min),isSameOrAfter=__webpack_require__("./node_modules/dayjs/plugin/isSameOrAfter.js"),isSameOrAfter_default=__webpack_require__.n(isSameOrAfter),isSameOrBefore=__webpack_require__("./node_modules/dayjs/plugin/isSameOrBefore.js"),isSameOrBefore_default=__webpack_require__.n(isSameOrBefore),isBetween=__webpack_require__("./node_modules/dayjs/plugin/isBetween.js"),isBetween_default=__webpack_require__.n(isBetween),isoWeek=__webpack_require__("./node_modules/dayjs/plugin/isoWeek.js"),isoWeek_default=__webpack_require__.n(isoWeek),customParseFormat=__webpack_require__("./node_modules/dayjs/plugin/customParseFormat.js"),customParseFormat_default=__webpack_require__.n(customParseFormat);dayjs_min_default().extend(isSameOrAfter_default()),dayjs_min_default().extend(isSameOrBefore_default()),dayjs_min_default().extend(isBetween_default()),dayjs_min_default().extend(isoWeek_default()),dayjs_min_default().extend(customParseFormat_default());const dayjsRef=dayjs_min_default();let UtilsService=class UtilsService{static debounce(func,wait){let timeout;return(...args)=>{clearTimeout(timeout),timeout=setTimeout((()=>{func(...args)}),wait)}}createArray(size){return new Array(size).fill(1)}convertToDayjs(date,format){return date?"string"==typeof date?dayjsRef(date,format):dayjsRef(date.toDate()):dayjsRef()}isDateValid(date,format){return""===date||dayjsRef(date,format,!0).isValid()}getDefaultDisplayDate(current,selected,allowMultiSelect,minDate){if(current)return dayjsRef(current.toDate());if(minDate&&minDate.isAfter(dayjsRef()))return dayjsRef(minDate.toDate());if(allowMultiSelect){if(selected&&selected[selected.length])return dayjsRef(selected[selected.length].toDate())}else if(selected&&selected[0])return dayjsRef(selected[0].toDate());return dayjsRef()}getInputType(value,allowMultiSelect){if(Array.isArray(value)){if(!value.length)return ECalendarValue.DayjsArr;if("string"==typeof value[0])return ECalendarValue.StringArr;if(dayjsRef.isDayjs(value[0]))return ECalendarValue.DayjsArr}else{if("string"==typeof value)return ECalendarValue.String;if(dayjsRef.isDayjs(value))return ECalendarValue.Dayjs}return allowMultiSelect?ECalendarValue.DayjsArr:ECalendarValue.Dayjs}convertToDayjsArray(value,config){let retVal;switch(this.getInputType(value,config.allowMultiSelect??!1)){case ECalendarValue.String:retVal=value?[dayjsRef(value,config.format,!0)]:[];break;case ECalendarValue.StringArr:retVal=value.map((v=>v?dayjsRef(v,config.format,!0):null)).filter((d=>null!=d));break;case ECalendarValue.Dayjs:retVal=value?[dayjsRef(value.toDate())]:[];break;case ECalendarValue.DayjsArr:retVal=(value||[]).map((v=>dayjsRef(v.toDate())));break;default:retVal=[]}return retVal}convertFromDayjsArray(format,value,convertTo){switch(convertTo){case ECalendarValue.String:return value[0]&&value[0].format(format);case ECalendarValue.StringArr:return value.filter(Boolean).map((v=>v.format(format)));case ECalendarValue.Dayjs:return value[0]?dayjsRef(value[0].toDate()):value[0];case ECalendarValue.DayjsArr:return value?value.map((v=>dayjsRef(v.toDate()))):value;default:return value}}convertToString(value,format){let tmpVal;if("string"==typeof value)tmpVal=[value];else if(Array.isArray(value))tmpVal=value.length?value.map((v=>this.convertToDayjs(v,format).format(format))):value;else{if(!dayjsRef.isDayjs(value))return"";tmpVal=[value.format(format)]}return tmpVal.filter(Boolean).join(" | ")}clearUndefined(obj){return obj?(Object.keys(obj).forEach((key=>void 0===obj[key]&&delete obj[key])),obj):obj}updateSelected(isMultiple,currentlySelected,date,granularity="day"){return isMultiple?date.selected?currentlySelected.filter((d=>!d.isSame(date.date,granularity))):currentlySelected.concat([date.date]):date.selected?[]:[date.date]}closestParent(element,selector){if(!element)return null;const match=element.querySelector(selector);return match||(element.parentElement?this.closestParent(element.parentElement,selector):null)}onlyTime(m){return m&&dayjsRef.isDayjs(m)?dayjsRef(m.format("HH:mm:ss"),"HH:mm:ss"):dayjsRef("00:00:00","HH:mm:ss")}granularityFromType(calendarType){switch(calendarType){case"time":case"daytime":return"second";default:return calendarType}}createValidator({minDate,maxDate,minTime,maxTime},format,calendarType){let isValid,value;const validators=[],granularity=this.granularityFromType(calendarType);if(minDate){const md=this.convertToDayjs(minDate,format);validators.push({key:"minDate",isValid:()=>{const _isValid=value.every((val=>val.isSameOrAfter(md,granularity)));return isValid=!!isValid&&_isValid,_isValid}})}if(maxDate){const md=this.convertToDayjs(maxDate,format);validators.push({key:"maxDate",isValid:()=>{const _isValid=value.every((val=>val.isSameOrBefore(md,granularity)));return isValid=!!isValid&&_isValid,_isValid}})}if(minTime){const md=this.onlyTime(this.convertToDayjs(minTime,format));validators.push({key:"minTime",isValid:()=>{const _isValid=value.every((val=>this.onlyTime(val).isSameOrAfter(md)));return isValid=!!isValid&&_isValid,_isValid}})}if(maxTime){const md=this.onlyTime(this.convertToDayjs(maxTime,format));validators.push({key:"maxTime",isValid:()=>{const _isValid=value.every((val=>this.onlyTime(val).isSameOrBefore(md)));return isValid=!!isValid&&_isValid,_isValid}})}return inputVal=>{if(isValid=!0,value=this.convertToDayjsArray(inputVal,{format,allowMultiSelect:!0}).filter(Boolean),!value.every((val=>val.isValid())))return{format:{given:inputVal}};const errors=validators.reduce(((map,err)=>(err.isValid()||(map[err.key]={given:value}),map)),{});return isValid?{}:errors}}datesStringToStringArray(value){return(value||"").split("|").map((m=>m.trim())).filter(Boolean)}getValidDayjsArray(value,format){return this.datesStringToStringArray(value).filter((d=>this.isDateValid(d,format))).map((d=>dayjsRef(d,format)))}shouldShowCurrent(showGoToCurrent,mode,min,max){return showGoToCurrent&&"time"!==mode&&this.isDateInRange(dayjsRef(),min,max)}isDateInRange(date,from,to){return!!date&&(!from&&!to||(!from&&to?date.isSameOrBefore(to):from&&!to?date.isSameOrAfter(from):date.isBetween(from,to,"day","[]")))}convertPropsToDayjs(obj,format,props){props.forEach((prop=>{obj.hasOwnProperty(prop)&&(obj[prop]=this.convertToDayjs(obj[prop],format))}))}shouldResetCurrentView(prevConf,currentConf){return!(!prevConf||!currentConf)&&(!(prevConf.min||!currentConf.min)||(!(!prevConf.min||!currentConf.min||prevConf.min.isSame(currentConf.min,"d"))||(!(prevConf.max||!currentConf.max)||!(!prevConf.max||!currentConf.max||prevConf.max.isSame(currentConf.max,"d")))))}getNativeElement(elem){return elem?"string"==typeof elem?document.querySelector(elem):elem instanceof core.ElementRef?elem.nativeElement:elem:null}};var ECalendarMode;UtilsService=(0,tslib_es6.Cg)([(0,core.Injectable)({providedIn:"root"})],UtilsService),function(ECalendarMode){ECalendarMode[ECalendarMode.Day=0]="Day",ECalendarMode[ECalendarMode.DayTime=1]="DayTime",ECalendarMode[ECalendarMode.Month=2]="Month",ECalendarMode[ECalendarMode.Time=3]="Time",ECalendarMode[ECalendarMode.Year=4]="Year"}(ECalendarMode||(ECalendarMode={}));var day_calendar_componentngResource=__webpack_require__("./src/app/components/ng2datepickercopy/lib/day-calendar/day-calendar.component.less?ngResource"),day_calendar_componentngResource_default=__webpack_require__.n(day_calendar_componentngResource);let DayCalendarService=class DayCalendarService{constructor(utilsService){this.utilsService=utilsService,this.DEFAULT_CONFIG={showNearMonthDays:!0,showWeekNumbers:!1,firstDayOfWeek:"su",weekDayFormat:"ddd",format:"DD-MM-YYYY",allowMultiSelect:!1,monthFormat:"MMM, YYYY",enableMonthSelector:!0,dayBtnFormat:"DD",unSelectOnClick:!0},this.DAYS=["su","mo","tu","we","th","fr","sa"]}getConfig(config){const _config={...this.DEFAULT_CONFIG,...this.utilsService.clearUndefined(config)};return this.utilsService.convertPropsToDayjs(_config,_config.format??"DD-MM-YYYY",["min","max"]),_config}generateDaysMap(firstDayOfWeek){const firstDayIndex=this.DAYS.indexOf(firstDayOfWeek);return this.DAYS.slice(firstDayIndex,7).concat(this.DAYS.slice(0,firstDayIndex)).reduce(((map,day,index)=>(map[day]=index,map)),{})}generateMonthArray(config,month,selected){const parsedMonth=month.isValid()?dayjsRef(month.toDate()):dayjsRef();let monthArray=[];const firstDayOfWeekIndex=this.DAYS.indexOf(config.firstDayOfWeek??"su");let firstDayOfBoard=parsedMonth.startOf("month");for(;firstDayOfBoard.day()!==firstDayOfWeekIndex;)firstDayOfBoard=firstDayOfBoard.subtract(1,"day");let current=dayjsRef(firstDayOfBoard.toDate());const prevMonth=parsedMonth.subtract(1,"month"),nextMonth=parsedMonth.add(1,"month"),today=dayjsRef();return this.utilsService.createArray(42).reduce((array=>(array.push({date:dayjsRef(current.toDate()),selected:!!selected.find((selectedDay=>current.isSame(selectedDay,"day"))),currentMonth:current.isSame(parsedMonth,"month"),prevMonth:current.isSame(prevMonth,"month"),nextMonth:current.isSame(nextMonth,"month"),currentDay:current.isSame(today,"day"),disabled:this.isDateDisabled(current,config)}),current=current.add(1,"day"),array)),[]).forEach(((day,index)=>{const weekIndex=Math.floor(index/7);monthArray[weekIndex]||monthArray.push([]),monthArray[weekIndex].push(day)})),config.showNearMonthDays||(monthArray=this.removeNearMonthWeeks(parsedMonth,monthArray)),monthArray}generateWeekdays(firstDayOfWeek){const weekdayNames={su:dayjsRef().day(0),mo:dayjsRef().day(1),tu:dayjsRef().day(2),we:dayjsRef().day(3),th:dayjsRef().day(4),fr:dayjsRef().day(5),sa:dayjsRef().day(6)},weekdays=[],daysMap=this.generateDaysMap(firstDayOfWeek);for(const dayKey in daysMap)daysMap.hasOwnProperty(dayKey)&&(weekdays[daysMap[dayKey]]=weekdayNames[dayKey]);return weekdays}isDateDisabled(date,config){return config.isDayDisabledCallback?config.isDayDisabledCallback(date):!(!config.min||!date.isBefore(config.min,"day"))||!(!config.max||!date.isAfter(config.max,"day"))}getHeaderLabel(config,month){return config.monthFormatter?config.monthFormatter(month):month.format(config.monthFormat)}shouldShowLeft(min,currentMonthView){return!min||min.isBefore(currentMonthView,"month")}shouldShowRight(max,currentMonthView){return!max||max.isAfter(currentMonthView,"month")}generateDaysIndexMap(firstDayOfWeek){const firstDayIndex=this.DAYS.indexOf(firstDayOfWeek);return this.DAYS.slice(firstDayIndex,7).concat(this.DAYS.slice(0,firstDayIndex)).reduce(((map,day,index)=>(map[index]=day,map)),{})}getMonthCalendarConfig(componentConfig){return this.utilsService.clearUndefined({min:componentConfig.min,max:componentConfig.max,format:componentConfig.format,isNavHeaderBtnClickable:!0,allowMultiSelect:!1,yearFormat:componentConfig.yearFormat,yearFormatter:componentConfig.yearFormatter,monthBtnFormat:componentConfig.monthBtnFormat,monthBtnFormatter:componentConfig.monthBtnFormatter,monthBtnCssClassCallback:componentConfig.monthBtnCssClassCallback,isMonthDisabledCallback:componentConfig.isMonthDisabledCallback,multipleYearsNavigateBy:componentConfig.multipleYearsNavigateBy,showMultipleYearsNavigation:componentConfig.showMultipleYearsNavigation,showGoToCurrent:componentConfig.showGoToCurrent,numOfMonthRows:componentConfig.numOfMonthRows})}getDayBtnText(config,day){return config.dayBtnFormatter?config.dayBtnFormatter(day):day.format(config.dayBtnFormat)}getDayBtnCssClass(config,day){return config.dayBtnCssClassCallback?config.dayBtnCssClassCallback(day):""}removeNearMonthWeeks(currentMonth,monthArray){return monthArray[monthArray.length-1].find((day=>day.date.isSame(currentMonth,"month")))?monthArray:monthArray.slice(0,-1)}static{this.ctorParameters=()=>[{type:UtilsService}]}};DayCalendarService=(0,tslib_es6.Cg)([(0,core.Injectable)({providedIn:"root"})],DayCalendarService);var MonthCalendarService_1,month_calendar_componentngResource=__webpack_require__("./src/app/components/ng2datepickercopy/lib/month-calendar/month-calendar.component.less?ngResource"),month_calendar_componentngResource_default=__webpack_require__.n(month_calendar_componentngResource);let MonthCalendarService=class MonthCalendarService{static{MonthCalendarService_1=this}constructor(utilsService){this.utilsService=utilsService,this.DEFAULT_CONFIG={allowMultiSelect:!1,yearFormat:"YYYY",format:"MM-YYYY",isNavHeaderBtnClickable:!1,monthBtnFormat:"MMM",multipleYearsNavigateBy:10,showMultipleYearsNavigation:!1,unSelectOnClick:!0,numOfMonthRows:3}}getConfig(config){const _config={...this.DEFAULT_CONFIG,...this.utilsService?.clearUndefined?.(config)??{}};return MonthCalendarService_1.validateConfig(_config),this.utilsService?.convertPropsToDayjs?.(_config,_config.format??"MM-YYYY",["min","max"]),_config}generateYear(config,year,selected){let index=year?.startOf?.("year")??dayjsRef().startOf("year");return this.utilsService?.createArray?.(config?.numOfMonthRows??1)?.map((()=>this.utilsService?.createArray?.(12/(config?.numOfMonthRows??1))?.map((()=>{const date=dayjsRef(index),month={date,selected:!!selected?.find?.((s=>index?.isSame?.(s,"month"))),currentMonth:index?.isSame?.(dayjsRef(),"month")??!1,disabled:this.isMonthDisabled(date,config),text:this.getMonthBtnText(config,date)};return index=index?.add?.(1,"month")??index,month}))??[]))??[]}isMonthDisabled(date,config){return config?.isMonthDisabledCallback?config.isMonthDisabledCallback(date):!(!config?.min||!date?.isBefore?.(config.min,"month"))||!(!config?.max||!date?.isAfter?.(config.max,"month"))}shouldShowLeft(min,currentMonthView){return min?.isBefore?.(currentMonthView,"year")??!0}shouldShowRight(max,currentMonthView){return max?.isAfter?.(currentMonthView,"year")??!0}getHeaderLabel(config,year){return config?.yearFormatter?config.yearFormatter(year):year?.format?.(config?.yearFormat??"YYYY")??""}getMonthBtnText(config,month){return config?.monthBtnFormatter?config.monthBtnFormatter(month):month?.format?.(config?.monthBtnFormat??"MMM")??""}getMonthBtnCssClass(config,month){return config?.monthBtnCssClassCallback?config.monthBtnCssClassCallback(month):""}static validateConfig(config){if((config?.numOfMonthRows??0)<1||(config?.numOfMonthRows??0)>12||!Number.isInteger(12/(config?.numOfMonthRows??1)))throw new Error("numOfMonthRows has to be between 1 - 12 and divide 12 to integer")}static{this.ctorParameters=()=>[{type:UtilsService}]}};MonthCalendarService=MonthCalendarService_1=(0,tslib_es6.Cg)([(0,core.Injectable)({providedIn:"root"})],MonthCalendarService);var common=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs");var calendar_nav_componentngResource=__webpack_require__("./src/app/components/ng2datepickercopy/lib/calendar-nav/calendar-nav.component.less?ngResource"),calendar_nav_componentngResource_default=__webpack_require__.n(calendar_nav_componentngResource);let CalendarNavComponent=class CalendarNavComponent{constructor(cd){this.cd=cd,this.isLabelClickable=!1,this.showLeftNav=!0,this.showLeftSecondaryNav=!1,this.showRightNav=!0,this.showRightSecondaryNav=!1,this.leftNavDisabled=!1,this.leftSecondaryNavDisabled=!1,this.rightNavDisabled=!1,this.rightSecondaryNavDisabled=!1,this.showGoToCurrent=!0,this.showYearButton=!0,this.onLeftNav=new core.EventEmitter,this.onLeftSecondaryNav=new core.EventEmitter,this.onRightNav=new core.EventEmitter,this.onRightSecondaryNav=new core.EventEmitter,this.onLabelClick=new core.EventEmitter,this.onGoToCurrent=new core.EventEmitter,this.onChooseYearClick=new core.EventEmitter}leftNavClicked(){this.onLeftNav.emit()}leftSecondaryNavClicked(){this.onLeftSecondaryNav.emit()}rightNavClicked(){this.onRightNav.emit()}rightSecondaryNavClicked(){this.onRightSecondaryNav.emit()}labelClicked(){this.onLabelClick.emit(),this.showYearButton=!1,this.cd.markForCheck()}chooseYearClicked(){this.onChooseYearClick.emit()}static{this.ctorParameters=()=>[{type:core.ChangeDetectorRef}]}static{this.propDecorators={label:[{type:core.Input}],yearLabel:[{type:core.Input}],isLabelClickable:[{type:core.Input}],showLeftNav:[{type:core.Input}],showLeftSecondaryNav:[{type:core.Input}],showRightNav:[{type:core.Input}],showRightSecondaryNav:[{type:core.Input}],leftNavDisabled:[{type:core.Input}],leftSecondaryNavDisabled:[{type:core.Input}],rightNavDisabled:[{type:core.Input}],rightSecondaryNavDisabled:[{type:core.Input}],showGoToCurrent:[{type:core.Input}],showYearButton:[{type:core.Input}],theme:[{type:core.HostBinding,args:["class"]},{type:core.Input}],onLeftNav:[{type:core.Output}],onLeftSecondaryNav:[{type:core.Output}],onRightNav:[{type:core.Output}],onRightSecondaryNav:[{type:core.Output}],onLabelClick:[{type:core.Output}],onGoToCurrent:[{type:core.Output}],onChooseYearClick:[{type:core.Output}]}}};CalendarNavComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"dp-calendar-nav",template:'<div class="dp-calendar-nav-container" dir="ltr">\r\n  <div class="dp-nav-header">\r\n    <span [attr.data-hidden]="isLabelClickable"\r\n          [hidden]="isLabelClickable"\r\n          [innerText]="label">\r\n    </span>\r\n    <button (click)="labelClicked();"\r\n            *ngIf="label"\r\n            [attr.data-hidden]="!isLabelClickable"\r\n            [hidden]="!isLabelClickable"\r\n            [innerText]="label"\r\n            class="dp-nav-header-btn"\r\n            type="button">\r\n    </button>\r\n    <button (click)="chooseYearClicked()"\r\n            class="dp-nav-choose-year-btn"\r\n            *ngIf="showYearButton"\r\n            type="button">\r\n       {{yearLabel ?? \'Year\'}}\r\n    </button>\r\n  </div>\r\n\r\n  <div class="dp-nav-btns-container">\r\n    <div class="dp-calendar-nav-container-left">\r\n      <button (click)="leftSecondaryNavClicked()"\r\n              *ngIf="showLeftSecondaryNav"\r\n              [disabled]="leftSecondaryNavDisabled"\r\n              class="dp-calendar-secondary-nav-left"\r\n              type="button">\r\n      </button>\r\n      <button (click)="leftNavClicked()"\r\n              [attr.data-hidden]="!showLeftNav"\r\n              [disabled]="leftNavDisabled"\r\n              [hidden]="!showLeftNav"\r\n              class="dp-calendar-nav-left"\r\n              type="button">\r\n      </button>\r\n    </div>\r\n    <button (click)="onGoToCurrent.emit()"\r\n            *ngIf="showGoToCurrent"\r\n            class="dp-current-location-btn"\r\n            type="button">\r\n    </button>\r\n    <div class="dp-calendar-nav-container-right">\r\n      <button (click)="rightNavClicked()"\r\n              [attr.data-hidden]="!showRightNav"\r\n              [disabled]="rightNavDisabled"\r\n              [hidden]="!showRightNav"\r\n              class="dp-calendar-nav-right"\r\n              type="button">\r\n      </button>\r\n      <button (click)="rightSecondaryNavClicked()"\r\n              *ngIf="showRightSecondaryNav"\r\n              [disabled]="rightSecondaryNavDisabled"\r\n              class="dp-calendar-secondary-nav-right"\r\n              type="button">\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n',imports:[common.CommonModule],encapsulation:core.ViewEncapsulation.None,changeDetection:core.ChangeDetectionStrategy.OnPush,standalone:!0,styles:[calendar_nav_componentngResource_default()]})],CalendarNavComponent);let MonthCalendarComponent=class MonthCalendarComponent{constructor(monthCalendarService,utilsService,cd){this.monthCalendarService=monthCalendarService,this.utilsService=utilsService,this.cd=cd,this.onSelect=new core.EventEmitter,this.onNavHeaderBtnClick=new core.EventEmitter,this.onGoToCurrent=new core.EventEmitter,this.onLeftNav=new core.EventEmitter,this.onRightNav=new core.EventEmitter,this.onLeftSecondaryNav=new core.EventEmitter,this.onRightSecondaryNav=new core.EventEmitter,this.isInited=!1,this._shouldShowCurrent=!0,this.api={toggleCalendar:this.toggleCalendarMode.bind(this),moveCalendarTo:this.moveCalendarTo.bind(this)}}get selected(){return this._selected}set selected(selected){this._selected=selected,this.onChangeCallback(this.processOnChangeCallback(selected))}get currentDateView(){return this._currentDateView??dayjsRef()}set currentDateView(current){this._currentDateView=dayjsRef(current.toDate()),this.yearMonths=this.monthCalendarService.generateYear(this.componentConfig,this.currentDateView,this.selected),this.navLabel=this.monthCalendarService.getHeaderLabel(this.componentConfig,this.currentDateView),this.showLeftNav=this.monthCalendarService.shouldShowLeft(this.componentConfig.min??dayjsRef(),this.currentDateView),this.showRightNav=this.monthCalendarService.shouldShowRight(this.componentConfig.max??dayjsRef(),this.currentDateView),this.showSecondaryLeftNav=this.componentConfig.showMultipleYearsNavigation&&this.showLeftNav,this.showSecondaryRightNav=this.componentConfig.showMultipleYearsNavigation&&this.showRightNav}ngOnInit(){this.isInited=!0,this.init(),this.initValidators()}ngOnChanges(changes){if(this.isInited){const{minDate,maxDate,config}=changes;this.handleConfigChange(config),this.init(),(minDate||maxDate)&&this.initValidators(),this.cd.markForCheck()}}init(){this.componentConfig=this.monthCalendarService.getConfig(this.config),this.selected=this.selected||[],this.currentDateView=this.displayDate??this.utilsService.getDefaultDisplayDate(this.currentDateView,this.selected,this.componentConfig.allowMultiSelect??!1,this.componentConfig.min??dayjsRef()),this.inputValueType=this.utilsService.getInputType(this.inputValue??"",this.componentConfig.allowMultiSelect??!1),this._shouldShowCurrent=this.shouldShowCurrent()}writeValue(value){this.inputValue=value,value?(this.selected=this.utilsService.convertToDayjsArray(value,this.componentConfig),this.yearMonths=this.monthCalendarService.generateYear(this.componentConfig,this.currentDateView,this.selected),this.inputValueType=this.utilsService.getInputType(this.inputValue,this.componentConfig.allowMultiSelect??!1)):(this.selected=[],this.yearMonths=this.monthCalendarService.generateYear(this.componentConfig,this.currentDateView,this.selected)),this.cd.markForCheck()}registerOnChange(fn){this.onChangeCallback=fn}onChangeCallback(_){}registerOnTouched(fn){}validate(formControl){return this.minDate||this.maxDate?this.validateFn?this.validateFn(formControl.value):null:()=>null}processOnChangeCallback(value){return this.utilsService.convertFromDayjsArray(this.componentConfig.format??"",value,this.componentConfig.returnedValueType??this.inputValueType??ECalendarValue.Dayjs)}initValidators(){this.validateFn=this.validateFn=this.utilsService.createValidator({minDate:this.minDate,maxDate:this.maxDate},this.componentConfig.format??"","month"),this.onChangeCallback(this.processOnChangeCallback(this.selected))}monthClicked(month){month.selected&&!this.componentConfig.unSelectOnClick||(this.selected=this.utilsService.updateSelected(this.componentConfig.allowMultiSelect??!1,this.selected,month,"month"),this.yearMonths=this.monthCalendarService.generateYear(this.componentConfig,this.currentDateView,this.selected),this.onSelect.emit(month))}onLeftNavClick(){const from=dayjsRef(this.currentDateView.toDate());this.currentDateView=this.currentDateView.subtract(1,"year");const to=dayjsRef(this.currentDateView.toDate());this.yearMonths=this.monthCalendarService.generateYear(this.componentConfig,this.currentDateView,this.selected),this.onLeftNav.emit({from,to})}onLeftSecondaryNavClick(){let navigateBy=this.componentConfig.multipleYearsNavigateBy??1;this.componentConfig.min&&this.currentDateView.year()-this.componentConfig.min.year()<navigateBy&&(navigateBy=this.componentConfig.min?this.currentDateView.year()-this.componentConfig.min.year():navigateBy);const from=dayjsRef(this.currentDateView.toDate());this.currentDateView=this.currentDateView.subtract(navigateBy,"year");const to=dayjsRef(this.currentDateView.toDate());this.onLeftSecondaryNav.emit({from,to})}onRightNavClick(){const from=dayjsRef(this.currentDateView.toDate());this.currentDateView=this.currentDateView.add(1,"year");const to=dayjsRef(this.currentDateView.toDate());this.onRightNav.emit({from,to})}onRightSecondaryNavClick(){let navigateBy=this.componentConfig.multipleYearsNavigateBy??1;this.componentConfig.max&&this.componentConfig.max.year()-this.currentDateView.year()<navigateBy&&(navigateBy=this.componentConfig.max?this.componentConfig.max.year()-this.currentDateView.year():navigateBy);const from=dayjsRef(this.currentDateView.toDate());this.currentDateView=this.currentDateView.add(navigateBy,"year");const to=dayjsRef(this.currentDateView.toDate());this.onRightSecondaryNav.emit({from,to})}toggleCalendarMode(){this.onNavHeaderBtnClick.emit()}getMonthBtnCssClass(month){const cssClass={"dp-selected":month.selected,"dp-current-month":month.currentMonth},customCssClass=this.monthCalendarService.getMonthBtnCssClass(this.componentConfig,month.date);return customCssClass&&(cssClass[customCssClass]=!0),cssClass}shouldShowCurrent(){return this.utilsService.shouldShowCurrent(this.componentConfig.showGoToCurrent??!1,"month",this.componentConfig.min??dayjsRef(),this.componentConfig.max??dayjsRef())}goToCurrent(){this.currentDateView=dayjsRef(),this.onGoToCurrent.emit()}moveCalendarTo(to){to&&(this.currentDateView=this.utilsService.convertToDayjs(to,this.componentConfig.format??""),this.cd.markForCheck())}handleConfigChange(config){if(config){const prevConf=this.monthCalendarService.getConfig(config.previousValue),currentConf=this.monthCalendarService.getConfig(config.currentValue);this.utilsService.shouldResetCurrentView(prevConf,currentConf)&&(this._currentDateView=void 0)}}static{this.ctorParameters=()=>[{type:MonthCalendarService},{type:UtilsService},{type:core.ChangeDetectorRef}]}static{this.propDecorators={config:[{type:core.Input}],displayDate:[{type:core.Input}],minDate:[{type:core.Input}],maxDate:[{type:core.Input}],theme:[{type:core.HostBinding,args:["class"]},{type:core.Input}],onSelect:[{type:core.Output}],onNavHeaderBtnClick:[{type:core.Output}],onGoToCurrent:[{type:core.Output}],onLeftNav:[{type:core.Output}],onRightNav:[{type:core.Output}],onLeftSecondaryNav:[{type:core.Output}],onRightSecondaryNav:[{type:core.Output}]}}};MonthCalendarComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"dp-month-calendar",template:'<div class="dp-month-calendar-container" dir="ltr">\n  <dp-calendar-nav\n      (onGoToCurrent)="goToCurrent()"\n      (onLabelClick)="toggleCalendarMode()"\n      (onLeftNav)="onLeftNavClick()"\n      (onLeftSecondaryNav)="onLeftSecondaryNavClick()"\n      (onRightNav)="onRightNavClick()"\n      (onRightSecondaryNav)="onRightSecondaryNavClick()"\n      [isLabelClickable]="componentConfig.isNavHeaderBtnClickable"\n      [label]="navLabel"\n      [showYearButton]="false"\n      [showGoToCurrent]="shouldShowCurrent()"\n      [showLeftNav]="showLeftNav"\n      [showLeftSecondaryNav]="showSecondaryLeftNav"\n      [showRightNav]="showRightNav"\n      [showRightSecondaryNav]="showSecondaryRightNav"\n      [theme]="theme">\n  </dp-calendar-nav>\n\n  <div class="dp-calendar-wrapper">\n    <div *ngFor="let monthRow of yearMonths" class="dp-months-row">\n      <button (click)="monthClicked(month)"\n              *ngFor="let month of monthRow"\n              [attr.data-date]="month.date.format(componentConfig.format)"\n              [disabled]="month.disabled"\n              [innerText]="month.text"\n              [ngClass]="getMonthBtnCssClass(month)"\n              class="dp-calendar-month"\n              type="button">\n      </button>\n    </div>\n  </div>\n</div>\n',encapsulation:core.ViewEncapsulation.None,changeDetection:core.ChangeDetectionStrategy.OnPush,imports:[common.CommonModule,CalendarNavComponent],providers:[MonthCalendarService,{provide:fesm2022_forms.kq,useExisting:(0,core.forwardRef)((()=>MonthCalendarComponent)),multi:!0},{provide:fesm2022_forms.cz,useExisting:(0,core.forwardRef)((()=>MonthCalendarComponent)),multi:!0}],standalone:!0,styles:[month_calendar_componentngResource_default()]})],MonthCalendarComponent);var year_calendar_componentngResource=__webpack_require__("./src/app/components/ng2datepickercopy/lib/year-calendar/year-calendar.component.less?ngResource"),year_calendar_componentngResource_default=__webpack_require__.n(year_calendar_componentngResource);let YearCalendarService=class YearCalendarService{constructor(utilsService){this.utilsService=utilsService,this.DEFAULT_CONFIG={allowMultiSelect:!1,yearFormat:"YYYY",yearBtnFormat:"YYYY",format:"YYYY",numOfYearsPerPage:24,numOfYearRows:6,unSelectOnClick:!0}}getConfig(config){const _config={...this.DEFAULT_CONFIG,...this.utilsService.clearUndefined(config)};return this.validateConfig(_config),this.utilsService.convertPropsToDayjs(_config,_config.format??"YYYY",["min","max"]),_config}_generateCalendar({numOfRows,numOfCells,isDisabledCb,getBtnTextCb,selected,config,startDate,granularity}){const index=startDate.clone();return this.createArray(numOfRows).map((()=>this.createArray(numOfCells/numOfRows).map((()=>{const date=index.clone(),month={date,selected:!!selected.find((s=>index.isSame(s,granularity))),current:index.isSame(dayjs_min_default()(),granularity),disabled:isDisabledCb(date,config),text:getBtnTextCb(config,date)};return index.add(1,"month"),month}))))}generateCalendar(config,year,selected=[]){return this._generateCalendar({numOfRows:config.numOfYearRows??0,numOfCells:config.numOfYearsPerPage??this.DEFAULT_CONFIG.numOfYearsPerPage,isDisabledCb:this.isYearDisabled,getBtnTextCb:this.getYearBtnText,selected,config,startDate:year.clone().startOf("year"),granularity:"year"})}isYearDisabled(date,config){return!(!config.min||!date.isBefore(config.min,"year"))||!(!config.max||!date.isAfter(config.max,"year"))}shouldShowLeft(min,currentMonthView){return!min||min.isBefore(currentMonthView,"year")}shouldShowRight(max,currentMonthView){return!max||max.isAfter(currentMonthView,"year")}getHeaderLabel(config,year){return config.yearFormatter?config.yearFormatter(year):year.format(config.yearFormat??"YYYY")}getYearBtnText(config,year){return config.yearBtnFormatter?config.yearBtnFormatter(year):year.format(config.yearBtnFormat??"YYYY")}getYearBtnCssClass(config,year){return config.yearBtnCssClassCallback?config.yearBtnCssClassCallback(year):""}validateConfig(config){}createArray(length){return Array.from({length},((_,i)=>i))}static{this.ctorParameters=()=>[{type:UtilsService}]}};var SelectEvent;YearCalendarService=(0,tslib_es6.Cg)([(0,core.Injectable)({providedIn:"root"})],YearCalendarService),function(SelectEvent){SelectEvent.INPUT="input",SelectEvent.SELECTION="selection"}(SelectEvent||(SelectEvent={}));let YearCalendarComponent=class YearCalendarComponent{get selected(){return this._selected}set selected(selected){this._selected=selected,this.onChangeCallback(this.processOnChangeCallback(selected))}get currentDateView(){return this._currentDateView}convertToMoment(date,format){return date?"string"==typeof date?dayjs_min_default()(date,format):date.clone():null}set currentDateView(current){this._currentDateView=current.clone(),this.startYear=this.currentDateView.year(),this.updateYearRange(),this.showLeftNav=this.yearCalendarService.shouldShowLeft(this.componentConfig.min,this._currentDateView),this.showRightNav=this.yearCalendarService.shouldShowRight(this.componentConfig.max,this.currentDateView)}updateYearRange(){this.startYear=this.currentDateView.year();const years=[],currentYear=dayjs_min_default()().year();for(let y=this.startYear;y<this.startYear+24;y++){const date=dayjs_min_default()(`${y}-01-01`);years.push({date,selected:!1,current:date.year()===currentYear,disabled:!1,text:date.format(this.componentConfig.yearBtnFormat??"YYYY")})}this.yearMonths=[];for(let i=0;i<years.length;i+=6)this.yearMonths.push(years.slice(i,i+6));this.navLabel=`${this.startYear} - ${this.startYear+23}`}constructor(cd,yearCalendarService,utilsService){this.cd=cd,this.yearCalendarService=yearCalendarService,this.utilsService=utilsService,this.onSelect=new core.EventEmitter,this.onNavHeaderBtnClick=new core.EventEmitter,this.onGoToCurrent=new core.EventEmitter,this.onLeftNav=new core.EventEmitter,this.onRightNav=new core.EventEmitter,this.onLeftSecondaryNav=new core.EventEmitter,this.onRightSecondaryNav=new core.EventEmitter,this.isInited=!1,this.startYear=2016,this._shouldShowCurrent=!0,this.api={toggleCalendar:this.toggleCalendarMode.bind(this),moveCalendarTo:this.moveCalendarTo.bind(this)}}ngOnInit(){this.isInited=!0,this.init(),this.initValidators()}ngOnChanges(changes){if(this.isInited){const{minDate,maxDate,config}=changes;this.handleConfigChange(config),this.init(),(minDate||maxDate)&&this.initValidators()}}registerOnChange(fn){this.onChangeCallback=fn}registerOnTouched(fn){}registerOnValidatorChange(fn){}setDisabledState(isDisabled){}validate(formControl){return this.minDate||this.maxDate?this.validateFn(formControl.value):()=>null}writeValue(value){this.inputValue=value,value?(this.selected=this.utilsService.convertToDayjsArray(value,this.componentConfig),this.selected.length>0?this.currentDateView=this.selected[0].clone():this.displayDate&&(this.currentDateView=this.displayDate.clone()),this.startYear=this.currentDateView.year()):(this.selected=[],this.displayDate&&(this.currentDateView=this.displayDate.clone(),this.startYear=this.currentDateView.year())),this.updateYearRange(),this.inputValueType=this.utilsService.getInputType(this.inputValue,this.componentConfig.allowMultiSelect??!1),this.cd.markForCheck()}onChangeCallback(_){}processOnChangeCallback(value){return this.utilsService.convertFromDayjsArray(this.componentConfig.format??"",value,this.componentConfig.returnedValueType||this.inputValueType)}convertFromMomentArray(format,value,convertTo){switch(convertTo){case ECalendarValue.String:return value[0]&&value[0].format(format);case ECalendarValue.StringArr:return value.filter(Boolean).map((v=>v.format(format)));case ECalendarValue.Dayjs:return value[0]?value[0].clone():value[0];case ECalendarValue.DayjsArr:return value?value.map((v=>v.clone())):value;default:return value}}goToCurrent(){this.currentDateView=dayjs_min_default()(),this.onGoToCurrent.emit()}onLeftNavClick(){const from=this.currentDateView.clone();this.currentDateView=this.currentDateView.subtract(24,"year"),this.startYear=this.currentDateView.year(),this.updateYearRange(),this.onLeftNav.emit({from,to:this.currentDateView.clone()})}onRightNavClick(){const from=this.currentDateView.clone();this.currentDateView=this.currentDateView.add(24,"year"),this.startYear=this.currentDateView.year(),this.updateYearRange(),this.onRightNav.emit({from,to:this.currentDateView.clone()})}shouldShowCurrent(){return this.utilsService.shouldShowCurrent(this.componentConfig.showGoToCurrent??!1,"month",this.componentConfig.min??dayjs_min_default()(),this.componentConfig.max??dayjs_min_default()())}yearClicked(year){year.selected&&!this.componentConfig.unSelectOnClick||(this.selected=this.utilsService.updateSelected(this.componentConfig.allowMultiSelect??!1,this.selected,year,"year"),this.yearMonths=this.yearCalendarService.generateCalendar(this.componentConfig,this.currentDateView,this.selected),this.onSelect.emit(year))}getYearBtnCssClass(year){const cssClass={"dp-selected":year.selected,"dp-current-year":year.current},customCssClass=this.yearCalendarService.getYearBtnCssClass(this.componentConfig,year.date);return customCssClass&&(cssClass[customCssClass]=!0),cssClass}init(){this.componentConfig=this.yearCalendarService.getConfig(this.config),this.selected=this.selected||[],this.currentDateView=this.displayDate?this.displayDate:this.utilsService.getDefaultDisplayDate(this.currentDateView,this.selected,this.componentConfig.allowMultiSelect??!1,this.componentConfig.min??dayjs_min_default()()),this.inputValueType=this.utilsService.getInputType(this.inputValue,this.componentConfig.allowMultiSelect??!1),this._shouldShowCurrent=this.shouldShowCurrent()}initValidators(){this.validateFn=this.utilsService.createValidator({minDate:this.minDate,maxDate:this.maxDate},this.componentConfig.format??"","year"),this.onChangeCallback(this.processOnChangeCallback(this.selected))}toggleCalendarMode(){this.onNavHeaderBtnClick.emit()}moveCalendarTo(to){to&&(this.currentDateView=this.utilsService.convertToDayjs(to,this.componentConfig.format??""),this.cd.markForCheck())}handleConfigChange(config){if(config){const prevConf=this.yearCalendarService.getConfig(config.previousValue),currentConf=this.yearCalendarService.getConfig(config.currentValue);this.utilsService.shouldResetCurrentView(prevConf,currentConf)&&(this._currentDateView=dayjs_min_default()());const prevLocale=config.previousValue?.locale,currentLocale=config.currentValue?.locale;prevLocale!==currentLocale&&(this.currentDateView&&currentLocale&&(this.currentDateView=this.currentDateView.locale(currentLocale)),currentLocale&&(this.selected||[]).forEach((d=>d.locale(currentLocale))))}}static{this.ctorParameters=()=>[{type:core.ChangeDetectorRef},{type:YearCalendarService},{type:UtilsService}]}static{this.propDecorators={config:[{type:core.Input}],displayDate:[{type:core.Input}],minDate:[{type:core.Input}],maxDate:[{type:core.Input}],theme:[{type:core.HostBinding,args:["class"]},{type:core.Input}],onSelect:[{type:core.Output}],onNavHeaderBtnClick:[{type:core.Output}],onGoToCurrent:[{type:core.Output}],onLeftNav:[{type:core.Output}],onRightNav:[{type:core.Output}],onLeftSecondaryNav:[{type:core.Output}],onRightSecondaryNav:[{type:core.Output}]}}};YearCalendarComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"dp-year-calendar",template:'<div class="dp-year-calendar-container">\r\n  <dp-calendar-nav\r\n      (onGoToCurrent)="goToCurrent()"\r\n      (onLabelClick)="toggleCalendarMode()"\r\n      (onLeftNav)="onLeftNavClick()"\r\n      (onRightNav)="onRightNavClick()"\r\n      [isLabelClickable]="componentConfig.isNavHeaderBtnClickable"\r\n      [label]="\'\'"\r\n      [yearLabel]="navLabel"\r\n      [showGoToCurrent]="shouldShowCurrent()"\r\n      [showLeftNav]="showLeftNav"\r\n      [showRightNav]="showRightNav"\r\n      [theme]="theme">\r\n  </dp-calendar-nav>\r\n\r\n  <div class="dp-calendar-wrapper">\r\n    <div *ngFor="let yearRow of yearMonths" class="dp-years-row">\r\n      <button (click)="yearClicked(year)"\r\n              *ngFor="let year of yearRow"\r\n              [attr.data-date]="year.date.format(componentConfig.format)"\r\n              [disabled]="year.disabled"\r\n              [innerText]="year.text"\r\n              [ngClass]="getYearBtnCssClass(year)"\r\n              class="dp-calendar-year"\r\n              type="button">\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n',encapsulation:core.ViewEncapsulation.None,standalone:!0,changeDetection:core.ChangeDetectionStrategy.OnPush,imports:[CalendarNavComponent,common.CommonModule],providers:[{provide:fesm2022_forms.kq,useExisting:(0,core.forwardRef)((()=>YearCalendarComponent)),multi:!0},{provide:fesm2022_forms.cz,useExisting:(0,core.forwardRef)((()=>YearCalendarComponent)),multi:!0}],styles:[year_calendar_componentngResource_default()]})],YearCalendarComponent);let DayCalendarComponent=class DayCalendarComponent{constructor(dayCalendarService,utilsService,cd){this.dayCalendarService=dayCalendarService,this.utilsService=utilsService,this.cd=cd,this.onSelect=new core.EventEmitter,this.onMonthSelect=new core.EventEmitter,this.onNavHeaderBtnClick=new core.EventEmitter,this.onGoToCurrent=new core.EventEmitter,this.onLeftNav=new core.EventEmitter,this.onRightNav=new core.EventEmitter,this.CalendarMode=ECalendarMode,this.isInited=!1,this.currentCalendarMode=ECalendarMode.Day,this._shouldShowCurrent=!0,this.api={moveCalendarsBy:this.moveCalendarsBy.bind(this),moveCalendarTo:this.moveCalendarTo.bind(this),toggleCalendarMode:this.toggleCalendarMode.bind(this)}}get selected(){return this._selected}set selected(selected){this._selected=selected,this.onChangeCallback(this.processOnChangeCallback(selected))}get currentDateView(){return this._currentDateView||dayjsRef()}set currentDateView(current){this._currentDateView=dayjsRef(current.toDate()),this.weeks=this.dayCalendarService.generateMonthArray(this.componentConfig,this._currentDateView,this.selected),this.navLabel=this.dayCalendarService.getHeaderLabel(this.componentConfig,this._currentDateView),this.showLeftNav=!0,this.showRightNav=!0}ngOnInit(){this.isInited=!0,this.init(),this.initValidators()}init(){this.componentConfig=this.dayCalendarService.getConfig(this.config),this.selected=this.selected||[],this.currentDateView=this.displayDate?this.utilsService.convertToDayjs(this.displayDate,this.componentConfig.format??""):this.utilsService.getDefaultDisplayDate(this.currentDateView,this.selected,this.componentConfig.allowMultiSelect??!1,this.componentConfig.min??dayjsRef()),this.weekdays=this.dayCalendarService.generateWeekdays(this.componentConfig.firstDayOfWeek??"su"),this.inputValueType=this.utilsService.getInputType(this.inputValue,this.componentConfig.allowMultiSelect??!1),this.monthCalendarConfig=this.dayCalendarService.getMonthCalendarConfig(this.componentConfig),this._shouldShowCurrent=this.shouldShowCurrent()}ngOnChanges(changes){if(this.isInited){const{minDate,maxDate,config}=changes;this.handleConfigChange(config),this.init(),(minDate||maxDate)&&this.initValidators()}}writeValue(value){this.inputValue=value,value?(this.selected=this.utilsService.convertToDayjsArray(value,this.componentConfig),this.inputValueType=this.utilsService.getInputType(this.inputValue,this.componentConfig.allowMultiSelect??!1)):this.selected=[],this.weeks=this.dayCalendarService.generateMonthArray(this.componentConfig,this.currentDateView,this.selected),this.cd.markForCheck()}registerOnChange(fn){this.onChangeCallback=fn}onChangeCallback(_){}registerOnTouched(fn){}validate(formControl){return this.minDate||this.maxDate?this.validateFn(formControl.value):()=>null}processOnChangeCallback(value){return this.utilsService.convertFromDayjsArray(this.componentConfig.format??"",value,this.componentConfig.returnedValueType||this.inputValueType)}initValidators(){this.validateFn=this.utilsService.createValidator({minDate:this.minDate,maxDate:this.maxDate},this.componentConfig.format??"","day"),this.onChangeCallback(this.processOnChangeCallback(this.selected))}dayClicked(day){day.selected&&!this.componentConfig.unSelectOnClick||(this.selected=this.utilsService.updateSelected(this.componentConfig.allowMultiSelect??!1,this.selected,day),this.weeks=this.dayCalendarService.generateMonthArray(this.componentConfig,this.currentDateView,this.selected),this.onSelect.emit(day))}getDayBtnText(day){return this.dayCalendarService.getDayBtnText(this.componentConfig,day.date)}getDayBtnCssClass(day){const cssClasses={"dp-selected":day.selected,"dp-current-month":!!day.currentMonth,"dp-prev-month":!!day.prevMonth,"dp-next-month":!!day.nextMonth,"dp-current-day":!!day.currentDay},customCssClass=this.dayCalendarService.getDayBtnCssClass(this.componentConfig,day.date);return customCssClass&&(cssClasses[customCssClass]=!0),cssClasses}onLeftNavClick(){const from=dayjsRef(this.currentDateView.toDate());this.moveCalendarsBy(this.currentDateView,-1,"month");const to=dayjsRef(this.currentDateView.toDate());this.onLeftNav.emit({from,to})}onRightNavClick(){const from=dayjsRef(this.currentDateView.toDate());this.moveCalendarsBy(this.currentDateView,1,"month");const to=dayjsRef(this.currentDateView.toDate());this.onRightNav.emit({from,to})}onMonthCalendarLeftClick(change){this.onLeftNav.emit(change)}onYearCalendarLeftClick(change){this.onLeftNav.emit(change)}onMonthCalendarRightClick(change){this.onRightNav.emit(change)}onYearCalendarRightClick(change){this.onRightNav.emit(change)}onMonthCalendarSecondaryLeftClick(change){this.onRightNav.emit(change)}onMonthCalendarSecondaryRightClick(change){this.onLeftNav.emit(change)}getWeekdayName(weekday){return this.componentConfig.weekDayFormatter?this.componentConfig.weekDayFormatter(weekday.day()):weekday.format(this.componentConfig.weekDayFormat)}toggleCalendarMode(mode){this.currentCalendarMode!==mode&&(this.currentCalendarMode=mode,this.onNavHeaderBtnClick.emit(mode)),this.cd.markForCheck()}monthSelected(month){this.currentDateView=dayjsRef(month.date.toDate()),this.currentCalendarMode=ECalendarMode.Day,this.onMonthSelect.emit(month)}yearSelected(year){this.currentDateView=dayjsRef(year.date.toDate()),this.currentCalendarMode=ECalendarMode.Month,this.cd.markForCheck()}moveCalendarsBy(current,amount,granularity="month"){this.currentDateView=dayjsRef(current.toDate()).add(amount,granularity),this.cd.markForCheck()}moveCalendarTo(to){to&&(this.currentDateView=this.utilsService.convertToDayjs(to,this.componentConfig.format??"")),this.cd.markForCheck()}shouldShowCurrent(){return this.utilsService.shouldShowCurrent(this.componentConfig.showGoToCurrent??!1,"day",this.componentConfig.min??dayjsRef(),this.componentConfig.max??dayjsRef())}goToCurrent(){this.currentDateView=dayjsRef(),this.onGoToCurrent.emit()}handleConfigChange(config){if(config){const prevConf=this.dayCalendarService.getConfig(config.previousValue),currentConf=this.dayCalendarService.getConfig(config.currentValue);this.utilsService.shouldResetCurrentView(prevConf,currentConf)&&(this._currentDateView=null)}}static{this.ctorParameters=()=>[{type:DayCalendarService},{type:UtilsService},{type:core.ChangeDetectorRef}]}static{this.propDecorators={config:[{type:core.Input}],displayDate:[{type:core.Input}],minDate:[{type:core.Input}],maxDate:[{type:core.Input}],theme:[{type:core.HostBinding,args:["class"]},{type:core.Input}],onSelect:[{type:core.Output}],onMonthSelect:[{type:core.Output}],onNavHeaderBtnClick:[{type:core.Output}],onGoToCurrent:[{type:core.Output}],onLeftNav:[{type:core.Output}],onRightNav:[{type:core.Output}]}}};DayCalendarComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"dp-day-calendar",template:'<div *ngIf="currentCalendarMode ===  CalendarMode.Day" class="dp-day-calendar-container" dir="ltr">\r\n  <dp-calendar-nav\r\n      (onGoToCurrent)="goToCurrent()"\r\n      (onLabelClick)="toggleCalendarMode(CalendarMode.Month)"\r\n      (onChooseYearClick)="toggleCalendarMode(CalendarMode.Year)"\r\n      (onLeftNav)="onLeftNavClick()"\r\n      (onRightNav)="onRightNavClick()"\r\n      [isLabelClickable]="componentConfig.enableMonthSelector"\r\n      [label]="navLabel"\r\n      [showGoToCurrent]="_shouldShowCurrent"\r\n      [showLeftNav]="showLeftNav"\r\n      [showRightNav]="showRightNav"\r\n      [theme]="theme">\r\n  </dp-calendar-nav>\r\n\r\n  <div [ngClass]="{\'dp-hide-near-month\': !componentConfig.showNearMonthDays}"\r\n       class="dp-calendar-wrapper">\r\n    <div class="dp-weekdays">\r\n      <span *ngFor="let weekday of weekdays"\r\n            [innerText]="getWeekdayName(weekday)"\r\n            class="dp-calendar-weekday">\r\n      </span>\r\n    </div>\r\n    <div *ngFor="let week of weeks" class="dp-calendar-week">\r\n      <span *ngIf="componentConfig.showWeekNumbers"\r\n            [innerText]="week[0].date.isoWeek()"\r\n            class="dp-week-number">\r\n      </span>\r\n      <button (click)="dayClicked(day)"\r\n              *ngFor="let day of week"\r\n              [attr.data-date]="day.date.format(componentConfig.format)"\r\n              [disabled]="day.disabled"\r\n              [innerText]="getDayBtnText(day)"\r\n              [ngClass]="getDayBtnCssClass(day)"\r\n              class="dp-calendar-day"\r\n              type="button">\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<dp-month-calendar\r\n    (onLeftNav)="onMonthCalendarLeftClick($event)"\r\n    (onLeftSecondaryNav)="onMonthCalendarSecondaryLeftClick($event)"\r\n    (onNavHeaderBtnClick)="toggleCalendarMode(CalendarMode.Day)"\r\n    (onRightNav)="onMonthCalendarRightClick($event)"\r\n    (onRightSecondaryNav)="onMonthCalendarSecondaryRightClick($event)"\r\n    (onSelect)="monthSelected($event)"\r\n    *ngIf="currentCalendarMode ===  CalendarMode.Month"\r\n    [config]="monthCalendarConfig"\r\n    [displayDate]="_currentDateView"\r\n    [ngModel]="_selected"\r\n    [theme]="theme">\r\n</dp-month-calendar>\r\n\r\n<dp-year-calendar\r\n    (onLeftNav)="onYearCalendarLeftClick($event)"\r\n    (onLeftSecondaryNav)="onYearCalendarSecondaryLeftClick($event)"\r\n    (chooseYearClicked)="toggleCalendarMode(CalendarMode.Day)"\r\n    (onRightNav)="onYearCalendarRightClick($event)"\r\n    (onRightSecondaryNav)="onYearCalendarSecondaryRightClick($event)"\r\n    (onSelect)="yearSelected($event)"\r\n    *ngIf="currentCalendarMode ===  CalendarMode.Year"\r\n    [config]="yearCalendarConfig"\r\n    [displayDate]="_currentDateView"\r\n    [ngModel]="_selected"\r\n    [theme]="theme">\r\n</dp-year-calendar>',imports:[MonthCalendarComponent,common.CommonModule,fesm2022_forms.YN,CalendarNavComponent,YearCalendarComponent],encapsulation:core.ViewEncapsulation.None,changeDetection:core.ChangeDetectionStrategy.OnPush,providers:[DayCalendarService,{provide:fesm2022_forms.kq,useExisting:(0,core.forwardRef)((()=>DayCalendarComponent)),multi:!0},{provide:fesm2022_forms.cz,useExisting:(0,core.forwardRef)((()=>DayCalendarComponent)),multi:!0}],standalone:!0,styles:[day_calendar_componentngResource_default()]})],DayCalendarComponent);let TimeSelectService=class TimeSelectService{constructor(utilsService){this.utilsService=utilsService,this.DEFAULT_CONFIG={hours12Format:"hh",hours24Format:"HH",meridiemFormat:"A",minutesFormat:"mm",minutesInterval:1,secondsFormat:"ss",secondsInterval:1,showSeconds:!1,showTwentyFourHours:!1,timeSeparator:":"}}getConfig(config){const timeConfigs={maxTime:config?.maxTime?this.utilsService?.onlyTime(config.maxTime):void 0,minTime:config?.minTime?this.utilsService?.onlyTime(config.minTime):void 0};return{...this.DEFAULT_CONFIG,...this.utilsService?.clearUndefined(config)??{},...timeConfigs}}getTimeFormat(config){return(config?.showTwentyFourHours?config?.hours24Format:config?.hours12Format)+(config?.timeSeparator??":")+(config?.minutesFormat??"mm")+(config?.showSeconds?(config?.timeSeparator??":")+(config?.secondsFormat??"ss"):"")+(config?.showTwentyFourHours?"":" "+(config?.meridiemFormat??"A"))}getHours(config,t){const time=t||dayjsRef();return time?.format(config?.showTwentyFourHours?config?.hours24Format:config?.hours12Format)??""}getMinutes(config,t){const time=t||dayjsRef();return time?.format(config?.minutesFormat??"mm")??""}getSeconds(config,t){const time=t||dayjsRef();return time?.format(config?.secondsFormat??"ss")??""}getMeridiem(config,time){return time?.format(config?.meridiemFormat??"A")??""}decrease(config,time,unit){let amount=1;switch(unit){case"minute":amount=config?.minutesInterval??1;break;case"second":amount=config?.secondsInterval??1}return time?.subtract(amount,unit)??time}increase(config,time,unit){let amount=1;switch(unit){case"minute":amount=config?.minutesInterval??1;break;case"second":amount=config?.secondsInterval??1}return time?.add(amount,unit)??time}toggleMeridiem(time){return time?time.hour()<12?time.add(12,"hour"):time.subtract(12,"hour"):time}shouldShowDecrease(config,time,unit){if(!config?.min&&!config?.minTime)return!0;const newTime=this.decrease(config,time,unit);return(!config?.min||config?.min?.isSameOrBefore?.(newTime))&&(!config?.minTime||config?.minTime?.isSameOrBefore?.(this.utilsService?.onlyTime(newTime)))}shouldShowIncrease(config,time,unit){if(!config?.max&&!config?.maxTime)return!0;const newTime=this.increase(config,time,unit);return(!config?.max||config?.max?.isSameOrAfter?.(newTime))&&(!config?.maxTime||config?.maxTime?.isSameOrAfter?.(this.utilsService?.onlyTime(newTime)))}shouldShowToggleMeridiem(config,time){if(!(config?.min||config?.max||config?.minTime||config?.maxTime))return!0;const newTime=this.toggleMeridiem(time);return(!config?.max||config?.max?.isSameOrAfter?.(newTime))&&(!config?.min||config?.min?.isSameOrBefore?.(newTime))&&(!config?.maxTime||config?.maxTime?.isSameOrAfter?.(this.utilsService?.onlyTime(newTime)))&&(!config?.minTime||config?.minTime?.isSameOrBefore?.(this.utilsService?.onlyTime(newTime)))}static{this.ctorParameters=()=>[{type:UtilsService}]}};TimeSelectService=(0,tslib_es6.Cg)([(0,core.Injectable)({providedIn:"root"})],TimeSelectService);let DayTimeCalendarService=class DayTimeCalendarService{constructor(utilsService,dayCalendarService,timeSelectService){this.utilsService=utilsService,this.dayCalendarService=dayCalendarService,this.timeSelectService=timeSelectService,this.DEFAULT_CONFIG={}}getConfig(config){const _config={...this.DEFAULT_CONFIG,...this.timeSelectService.getConfig(config),...this.dayCalendarService.getConfig(config)};return this.utilsService.convertPropsToDayjs(_config,_config.format??"YYYY-MM-DD",["min","max"]),_config}updateDay(current,day,config){const time=current||dayjsRef();let updated=dayjsRef(day.format("YYYYMMDD")+time.format("HH:mm:ss"),"YYYYMMDDHH:mm:ss");if(config.min){const min=config.min;updated=min.isAfter(updated)?min:updated}if(config.max){const max=config.max;updated=max.isBefore(updated)?max:updated}return updated}updateTime(current,time){const day=current||dayjsRef();return dayjsRef(day.format("YYYYMMDD")+time.format("HH:mm:ss"),"YYYYMMDDHH:mm:ss")}static{this.ctorParameters=()=>[{type:UtilsService},{type:DayCalendarService},{type:TimeSelectService}]}};DayTimeCalendarService=(0,tslib_es6.Cg)([(0,core.Injectable)({providedIn:"root"})],DayTimeCalendarService);var time_select_componentngResource=__webpack_require__("./src/app/components/ng2datepickercopy/lib/time-select/time-select.component.less?ngResource"),time_select_componentngResource_default=__webpack_require__.n(time_select_componentngResource);let TimeSelectComponent=class TimeSelectComponent{constructor(timeSelectService,utilsService,cd){this.timeSelectService=timeSelectService,this.utilsService=utilsService,this.cd=cd,this.onChange=new core.EventEmitter,this.isInited=!1,this.api={triggerChange:this.emitChange.bind(this)}}get selected(){return this._selected}set selected(selected){this._selected=selected,this.calculateTimeParts(this.selected),this.showDecHour=this.timeSelectService?.shouldShowDecrease?.(this.componentConfig,this._selected,"hour")??!1,this.showDecMinute=this.timeSelectService?.shouldShowDecrease?.(this.componentConfig,this._selected,"minute")??!1,this.showDecSecond=this.timeSelectService?.shouldShowDecrease?.(this.componentConfig,this._selected,"second")??!1,this.showIncHour=this.timeSelectService?.shouldShowIncrease?.(this.componentConfig,this._selected,"hour")??!1,this.showIncMinute=this.timeSelectService?.shouldShowIncrease?.(this.componentConfig,this._selected,"minute")??!1,this.showIncSecond=this.timeSelectService?.shouldShowIncrease?.(this.componentConfig,this._selected,"second")??!1,this.showToggleMeridiem=this.timeSelectService?.shouldShowToggleMeridiem?.(this.componentConfig,this._selected)??!1,this.onChangeCallback(this.processOnChangeCallback(selected))}ngOnInit(){this.isInited=!0,this.init(),this.initValidators()}init(){this.componentConfig=this.timeSelectService?.getConfig?.(this.config)??{},this.selected=this.selected||dayjsRef(),this.inputValueType=this.utilsService?.getInputType?.(this.inputValue,!1)??null}ngOnChanges(changes){if(this.isInited){const{minDate,maxDate,minTime,maxTime}=changes;(minDate||maxDate||minTime||maxTime)&&this.initValidators(),this.init()}}writeValue(value){if(this.inputValue=value,value){const dayjsValue=this.utilsService?.convertToDayjsArray?.(value,{allowMultiSelect:!1,format:this.timeSelectService?.getTimeFormat?.(this.componentConfig)??""})?.[0];dayjsValue?.isValid?.()&&(this.selected=dayjsValue,this.inputValueType=this.utilsService?.getInputType?.(this.inputValue,!1)??null)}this.cd.markForCheck()}registerOnChange(fn){this.onChangeCallback=fn}onChangeCallback(_){}registerOnTouched(fn){}validate(formControl){return this.minDate||this.maxDate||this.minTime||this.maxTime?this.validateFn(formControl.value):()=>null}processOnChangeCallback(value){return this.utilsService?.convertFromDayjsArray?.(this.timeSelectService?.getTimeFormat?.(this.componentConfig)??"",[value],this.componentConfig?.returnedValueType||this.inputValueType)}initValidators(){this.validateFn=this.utilsService?.createValidator?.({minDate:this.minDate,maxDate:this.maxDate,minTime:this.minTime,maxTime:this.maxTime},"","day")??(()=>null),this.onChangeCallback(this.processOnChangeCallback(this.selected))}decrease(unit){this.selected=this.timeSelectService?.decrease?.(this.componentConfig,this.selected,unit)??this.selected,this.emitChange()}increase(unit){this.selected=this.timeSelectService?.increase?.(this.componentConfig,this.selected,unit)??this.selected,this.emitChange()}toggleMeridiem(){this.selected=this.timeSelectService?.toggleMeridiem?.(this.selected)??this.selected,this.emitChange()}emitChange(){this.onChange.emit({date:this.selected,selected:!1}),this.cd.markForCheck()}calculateTimeParts(time){this.hours=this.timeSelectService?.getHours?.(this.componentConfig,time)??"",this.minutes=this.timeSelectService?.getMinutes?.(this.componentConfig,time)??"",this.seconds=this.timeSelectService?.getSeconds?.(this.componentConfig,time)??"",this.meridiem=this.timeSelectService?.getMeridiem?.(this.componentConfig,time)??""}handleConfigChange(config){if(config){this.timeSelectService?.getConfig?.(config.previousValue),this.timeSelectService?.getConfig?.(config.currentValue)}}static{this.ctorParameters=()=>[{type:TimeSelectService},{type:UtilsService},{type:core.ChangeDetectorRef}]}static{this.propDecorators={config:[{type:core.Input}],displayDate:[{type:core.Input}],minDate:[{type:core.Input}],maxDate:[{type:core.Input}],minTime:[{type:core.Input}],maxTime:[{type:core.Input}],theme:[{type:core.HostBinding,args:["class"]},{type:core.Input}],onChange:[{type:core.Output}]}}};var DatePickerService_1;TimeSelectComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"dp-time-select",template:'<ul class="dp-time-select-controls" dir="ltr">\n  <li class="dp-time-select-control dp-time-select-control-hours">\n    <button (click)="increase(\'hour\')"\n            [disabled]="!showIncHour"\n            class="dp-time-select-control-up"\n            type="button">\n    </button>\n    <span [innerText]="hours"\n          class="dp-time-select-display-hours">\n    </span>\n    <button (click)="decrease(\'hour\')"\n            [disabled]="!showDecHour"\n            class="dp-time-select-control-down"\n            type="button">\n    </button>\n  </li>\n  <li [innerText]="componentConfig.timeSeparator"\n      class="dp-time-select-control dp-time-select-separator">\n  </li>\n  <li class="dp-time-select-control dp-time-select-control-minutes">\n    <button (click)="increase(\'minute\')"\n            [disabled]="!showIncMinute"\n            class="dp-time-select-control-up"\n            type="button"></button>\n    <span [innerText]="minutes"\n          class="dp-time-select-display-minutes">\n    </span>\n    <button (click)="decrease(\'minute\')"\n            [disabled]="!showDecMinute" class="dp-time-select-control-down"\n            type="button">\n    </button>\n  </li>\n  <ng-container *ngIf="componentConfig.showSeconds">\n    <li [innerText]="componentConfig.timeSeparator"\n        class="dp-time-select-control dp-time-select-separator">\n    </li>\n    <li class="dp-time-select-control dp-time-select-control-seconds">\n      <button (click)="increase(\'second\')"\n              [disabled]="!showIncSecond"\n              class="dp-time-select-control-up"\n              type="button"></button>\n      <span [innerText]="seconds"\n            class="dp-time-select-display-seconds">\n      </span>\n      <button (click)="decrease(\'second\')"\n              [disabled]="!showDecSecond"\n              class="dp-time-select-control-down"\n              type="button">\n      </button>\n    </li>\n  </ng-container>\n  <li *ngIf="!componentConfig.showTwentyFourHours" class="dp-time-select-control dp-time-select-control-meridiem">\n    <button (click)="toggleMeridiem()"\n            [disabled]="!showToggleMeridiem"\n            class="dp-time-select-control-up"\n            type="button">\n    </button>\n    <span [innerText]="meridiem"\n          class="dp-time-select-display-meridiem">\n    </span>\n    <button (click)="toggleMeridiem()"\n            [disabled]="!showToggleMeridiem"\n            class="dp-time-select-control-down"\n            type="button">\n    </button>\n  </li>\n</ul>\n',imports:[common.CommonModule],encapsulation:core.ViewEncapsulation.None,changeDetection:core.ChangeDetectionStrategy.OnPush,providers:[TimeSelectService,{provide:fesm2022_forms.kq,useExisting:(0,core.forwardRef)((()=>TimeSelectComponent)),multi:!0},{provide:fesm2022_forms.cz,useExisting:(0,core.forwardRef)((()=>TimeSelectComponent)),multi:!0}],standalone:!0,styles:[time_select_componentngResource_default()]})],TimeSelectComponent);let DatePickerService=class DatePickerService{static{DatePickerService_1=this}constructor(utilsService,timeSelectService,daytimeCalendarService){this.utilsService=utilsService,this.timeSelectService=timeSelectService,this.daytimeCalendarService=daytimeCalendarService,this.onPickerClosed=new core.EventEmitter,this.defaultConfig={closeOnSelect:!0,closeOnSelectDelay:100,closeOnEnter:!0,format:"DD-MM-YYYY",openOnFocus:!0,openOnClick:!0,onOpenDelay:0,disableKeypress:!1,showNearMonthDays:!0,showWeekNumbers:!1,enableMonthSelector:!0,showGoToCurrent:!0,hideOnOutsideClick:!0}}getConfig(config,mode="daytime"){const _config={...this.defaultConfig,format:DatePickerService_1.getDefaultFormatByMode(mode),...this.utilsService.clearUndefined(config)};return this.utilsService.convertPropsToDayjs(_config,_config.format??"DD-MM-YYYY",["min","max"]),config&&config.allowMultiSelect&&void 0===config.closeOnSelect&&(_config.closeOnSelect=!1),_config}getYearConfigService(pickerConfig){return{min:pickerConfig.min,max:pickerConfig.max,isYearDisabledCallback:pickerConfig.isDayDisabledCallback,allowMultiSelect:pickerConfig.allowMultiSelect,yearFormat:pickerConfig.yearFormat,yearFormatter:pickerConfig.yearFormatter,format:pickerConfig.format,numOfYearsPerPage:24,numOfYearRows:4,yearBtnFormat:pickerConfig.yearFormat,yearBtnFormatter:pickerConfig.yearFormatter,yearBtnCssClassCallback:pickerConfig.dayBtnCssClassCallback,returnedValueType:pickerConfig.returnedValueType,showGoToCurrent:pickerConfig.showGoToCurrent,unSelectOnClick:pickerConfig.unSelectOnClick}}getDayConfigService(pickerConfig){return{min:pickerConfig.min,max:pickerConfig.max,isDayDisabledCallback:pickerConfig.isDayDisabledCallback,weekDayFormat:pickerConfig.weekDayFormat,weekDayFormatter:pickerConfig.weekDayFormatter,showNearMonthDays:pickerConfig.showNearMonthDays,showWeekNumbers:pickerConfig.showWeekNumbers,firstDayOfWeek:pickerConfig.firstDayOfWeek,format:pickerConfig.format,allowMultiSelect:pickerConfig.allowMultiSelect,monthFormat:pickerConfig.monthFormat,monthFormatter:pickerConfig.monthFormatter,enableMonthSelector:pickerConfig.enableMonthSelector,yearFormat:pickerConfig.yearFormat,yearFormatter:pickerConfig.yearFormatter,dayBtnFormat:pickerConfig.dayBtnFormat,dayBtnFormatter:pickerConfig.dayBtnFormatter,dayBtnCssClassCallback:pickerConfig.dayBtnCssClassCallback,monthBtnFormat:pickerConfig.monthBtnFormat,monthBtnFormatter:pickerConfig.monthBtnFormatter,monthBtnCssClassCallback:pickerConfig.monthBtnCssClassCallback,isMonthDisabledCallback:pickerConfig.isMonthDisabledCallback,multipleYearsNavigateBy:pickerConfig.multipleYearsNavigateBy,showMultipleYearsNavigation:pickerConfig.showMultipleYearsNavigation,returnedValueType:pickerConfig.returnedValueType,showGoToCurrent:pickerConfig.showGoToCurrent,unSelectOnClick:pickerConfig.unSelectOnClick,numOfMonthRows:pickerConfig.numOfMonthRows}}getDayTimeConfig(pickerConfig){return this.daytimeCalendarService.getConfig(pickerConfig)}getTimeConfig(pickerConfig){return this.timeSelectService.getConfig(pickerConfig)}pickerClosed(){this.onPickerClosed.emit()}isValidInputDateValue(value,config){value=value||"";return this.utilsService.datesStringToStringArray(value).every((date=>this.utilsService.isDateValid(date,config.format||"DD-MM-YYYY")))}convertInputValueToDayjsArray(value,config){value=value||"";const datesStrArr=this.utilsService.datesStringToStringArray(value);return this.utilsService.convertToDayjsArray(datesStrArr,config)}getOverlayPosition({drops,opens}){if(drops||opens)return[{originX:opens?"left"===opens?"start":"end":"start",originY:drops&&"up"===drops?"top":"bottom",overlayX:opens?"left"===opens?"start":"end":"start",overlayY:drops&&"up"===drops?"bottom":"top"}]}static getDefaultFormatByMode(mode){switch(mode){case"day":return"DD-MM-YYYY";case"daytime":return"DD-MM-YYYY HH:mm:ss";case"time":return"HH:mm:ss";case"month":return"MMM, YYYY";case"year":return"YYYY"}}static{this.ctorParameters=()=>[{type:UtilsService},{type:TimeSelectService},{type:DayTimeCalendarService}]}};DatePickerService=DatePickerService_1=(0,tslib_es6.Cg)([(0,core.Injectable)({providedIn:"root"})],DatePickerService);var day_time_calendar_componentngResource=__webpack_require__("./src/app/components/ng2datepickercopy/lib/day-time-calendar/day-time-calendar.component.less?ngResource"),day_time_calendar_componentngResource_default=__webpack_require__.n(day_time_calendar_componentngResource);let DayTimeCalendarComponent=class DayTimeCalendarComponent{constructor(dayTimeCalendarService,utilsService,cd){this.dayTimeCalendarService=dayTimeCalendarService,this.utilsService=utilsService,this.cd=cd,this.onChange=new core.EventEmitter,this.onGoToCurrent=new core.EventEmitter,this.onLeftNav=new core.EventEmitter,this.onRightNav=new core.EventEmitter,this.isInited=!1,this.api={moveCalendarTo:this.moveCalendarTo.bind(this)}}get selected(){return this._selected}set selected(selected){this._selected=selected,this.onChangeCallback(this.processOnChangeCallback(selected))}ngOnInit(){this.isInited=!0,this.init(),this.initValidators()}init(){this.componentConfig=this.dayTimeCalendarService.getConfig(this.config),this.inputValueType=this.utilsService.getInputType(this.inputValue,!1)}ngOnChanges(changes){if(this.isInited){const{minDate,maxDate}=changes;this.init(),(minDate||maxDate)&&this.initValidators()}}writeValue(value){this.inputValue=value,value?(this.selected=this.utilsService.convertToDayjsArray(value,{format:this.componentConfig.format,allowMultiSelect:!1})[0],this.inputValueType=this.utilsService.getInputType(this.inputValue,!1)):this.selected=null,this.cd.markForCheck()}registerOnChange(fn){this.onChangeCallback=fn}onChangeCallback(_){}registerOnTouched(fn){}validate(formControl){return this.minDate||this.maxDate?this.validateFn(formControl.value):()=>null}processOnChangeCallback(value){return null==value?"":this.utilsService.convertFromDayjsArray(this.componentConfig.format??"",[value],this.componentConfig.returnedValueType||this.inputValueType)}initValidators(){this.validateFn=this.utilsService.createValidator({minDate:this.minDate,maxDate:this.maxDate},this.componentConfig.format??"","daytime"),this.onChangeCallback(this.processOnChangeCallback(this.selected))}dateSelected(day){this.selected=this.dayTimeCalendarService.updateDay(this.selected??day.date,day.date,this.componentConfig),this.emitChange()}timeChange(time){this.selected=this.dayTimeCalendarService.updateTime(this.selected??time.date,time.date),this.emitChange()}emitChange(){this.selected&&this.onChange.emit({date:this.selected,selected:!1})}moveCalendarTo(to){to&&this.dayCalendarRef.moveCalendarTo(to)}onLeftNavClick(change){this.onLeftNav.emit(change)}onRightNavClick(change){this.onRightNav.emit(change)}static{this.ctorParameters=()=>[{type:DayTimeCalendarService},{type:UtilsService},{type:core.ChangeDetectorRef}]}static{this.propDecorators={config:[{type:core.Input}],displayDate:[{type:core.Input}],minDate:[{type:core.Input}],maxDate:[{type:core.Input}],theme:[{type:core.HostBinding,args:["class"]},{type:core.Input}],onChange:[{type:core.Output}],onGoToCurrent:[{type:core.Output}],onLeftNav:[{type:core.Output}],onRightNav:[{type:core.Output}],dayCalendarRef:[{type:core.ViewChild,args:["dayCalendar"]}]}}};DayTimeCalendarComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"dp-day-time-calendar",template:'<dp-day-calendar #dayCalendar\n                 (onGoToCurrent)="onGoToCurrent.emit()"\n                 (onLeftNav)="onLeftNavClick($event)"\n                 (onRightNav)="onRightNavClick($event)"\n                 (onSelect)="dateSelected($event)"\n                 [config]="componentConfig"\n                 [displayDate]="displayDate"\n                 [ngModel]="_selected"\n                 [theme]="theme">\n</dp-day-calendar>\n<dp-time-select #timeSelect\n                (onChange)="timeChange($event)"\n                [config]="componentConfig"\n                [ngModel]="_selected"\n                [theme]="theme">\n</dp-time-select>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,encapsulation:core.ViewEncapsulation.None,imports:[common.CommonModule,DayCalendarComponent,TimeSelectComponent,fesm2022_forms.YN],providers:[DayTimeCalendarService,DayCalendarService,TimeSelectService,{provide:fesm2022_forms.kq,useExisting:(0,core.forwardRef)((()=>DayTimeCalendarComponent)),multi:!0},{provide:fesm2022_forms.cz,useExisting:(0,core.forwardRef)((()=>DayTimeCalendarComponent)),multi:!0}],standalone:!0,styles:[day_time_calendar_componentngResource_default()]})],DayTimeCalendarComponent);var overlay=__webpack_require__("./node_modules/@angular/cdk/fesm2022/overlay.mjs");let DatePickerComponent=class DatePickerComponent{constructor(dayPickerService,elemRef,renderer,utilsService,cd){this.dayPickerService=dayPickerService,this.elemRef=elemRef,this.renderer=renderer,this.utilsService=utilsService,this.cd=cd,this.isInitialized=!1,this.open=new core.EventEmitter,this.close=new core.EventEmitter,this.onChange=new core.EventEmitter,this.onGoToCurrent=new core.EventEmitter,this.onLeftNav=new core.EventEmitter,this.onRightNav=new core.EventEmitter,this.onSelect=new core.EventEmitter,this.isFocusedTrigger=!1,this.globalListenersUnlisteners=[],this.api={open:this.showCalendars.bind(this),close:this.hideCalendar.bind(this),moveCalendarTo:this.moveCalendarTo.bind(this)},this.selectEvent=SelectEvent,this.areCalendarsShown=!1}get openOnFocus(){return this.componentConfig.openOnFocus??!1}get openOnClick(){return this.componentConfig.openOnClick??!1}get selected(){return this._selected}set selected(selected){this._selected=selected,this.inputElementValue=this.utilsService.convertFromDayjsArray(this.componentConfig.format??"",selected,ECalendarValue.StringArr).join(" | ");const val=this.processOnChangeCallback(selected);this.onChangeCallback(val,!1),this.onChange.emit(val)}get currentDateView(){return this._currentDateView}set currentDateView(date){this._currentDateView=date,this.dayCalendarRef&&this.dayCalendarRef.moveCalendarTo(date),this.monthCalendarRef&&this.monthCalendarRef.moveCalendarTo(date),this.dayTimeCalendarRef&&this.dayTimeCalendarRef.moveCalendarTo(date),this.displayDate=date}onClick(){this.openOnClick&&(this.isFocusedTrigger||this.disabled||this.areCalendarsShown||this.showCalendars())}onBodyClick(event){this.inputElement.nativeElement!==event.target&&this.componentConfig.hideOnOutsideClick&&this.hideCalendar()}writeValue(value){this.inputValue=value,value||""===value?(this.selected=this.utilsService.convertToDayjsArray(value,this.componentConfig),this.init()):this.selected=[],this.cd.markForCheck()}registerOnChange(fn){this.onChangeCallback=fn}onChangeCallback(_,__){}registerOnTouched(fn){this.onTouchedCallback=fn}onTouchedCallback(){}validate(formControl){return this.validateFn(formControl.value)}processOnChangeCallback(selected){return"string"==typeof selected?selected:this.utilsService.convertFromDayjsArray(this.componentConfig.format??"",selected,this.componentConfig.returnedValueType||this.utilsService.getInputType(this.inputValue,this.componentConfig.allowMultiSelect??!1))}initValidators(){this.validateFn=this.utilsService.createValidator({minDate:this.minDate,maxDate:this.maxDate,minTime:this.minTime,maxTime:this.maxTime},this.componentConfig.format??"",this.mode),this.onChangeCallback(this.processOnChangeCallback(this.selected),!1)}ngOnInit(){this.isInitialized=!0,this.init()}ngOnChanges(changes){this.isInitialized&&this.init()}setDisabledState(isDisabled){this.disabled=isDisabled,this.cd.markForCheck()}init(){this.componentConfig=this.dayPickerService.getConfig(this.config,this.mode),this.currentDateView=this.displayDate?this.utilsService.convertToDayjs(this.displayDate,this.componentConfig.format??""):this.utilsService.getDefaultDisplayDate(this.currentDateView,this.selected,this.componentConfig.allowMultiSelect??!1,this.componentConfig.min??dayjsRef()),this.dayCalendarConfig=this.dayPickerService.getDayConfigService(this.componentConfig),this.yearCalendarConfig=this.dayPickerService.getYearConfigService(this.componentConfig),this.dayTimeCalendarConfig=this.dayPickerService.getDayTimeConfig(this.componentConfig),this.timeSelectConfig=this.dayPickerService.getTimeConfig(this.componentConfig),this.initValidators(),this.overlayPosition=this.dayPickerService.getOverlayPosition(this.componentConfig),this.origin=this.utilsService.getNativeElement(this.componentConfig.inputElementContainer??this.elemRef)??this.elemRef}inputFocused(){this.openOnFocus&&(clearTimeout(this.onOpenDelayTimeoutHandler),this.isFocusedTrigger=!0,this.onOpenDelayTimeoutHandler=setTimeout((()=>{this.areCalendarsShown||this.showCalendars(),this.isFocusedTrigger=!1,this.cd.markForCheck()}),this.componentConfig.onOpenDelay))}inputBlurred(){clearTimeout(this.onOpenDelayTimeoutHandler),this.onTouchedCallback()}showCalendars(){this.areCalendarsShown=!0,this.startGlobalListeners(),this.timeSelectRef&&this.timeSelectRef.api.triggerChange(),this.open.emit(),this.cd.markForCheck()}hideCalendar(){this.areCalendarsShown=!1,this.dayCalendarRef&&this.dayCalendarRef.api.toggleCalendarMode(ECalendarMode.Day),this.stopGlobalListeners(),this.close.emit(),this.cd.markForCheck()}onViewDateChange(value){const strVal=value?this.utilsService.convertToString(value,this.componentConfig.format??""):"";this.dayPickerService.isValidInputDateValue(strVal,this.componentConfig)?(this.selected=this.dayPickerService.convertInputValueToDayjsArray(strVal,this.componentConfig),this.currentDateView=this.selected.length?this.utilsService.getDefaultDisplayDate(dayjsRef(),this.selected,this.componentConfig.allowMultiSelect??!1,this.componentConfig.min??dayjsRef()):this.currentDateView,this.onSelect.emit({date:strVal,type:SelectEvent.INPUT,granularity:"day"})):(this._selected=this.utilsService.getValidDayjsArray(strVal,this.componentConfig.format??""),this.onChangeCallback(this.processOnChangeCallback(strVal),!0))}dateSelected(date,granularity,type,ignoreClose){this.selected=this.utilsService.updateSelected(this.componentConfig.allowMultiSelect??!1,this.selected,date,granularity),ignoreClose||this.onDateClick(),this.onSelect.emit({date:date.date,granularity,type})}onDateClick(){this.componentConfig.closeOnSelect&&setTimeout(this.hideCalendar.bind(this),this.componentConfig.closeOnSelectDelay)}onKeyPress(event){switch(event.key){case"Escape":case"Esc":case"Tab":this.hideCalendar()}}moveCalendarTo(date){this.currentDateView=this.utilsService.convertToDayjs(date,this.componentConfig.format??"")}onLeftNavClick(change){this.displayDate=change.to,this.onLeftNav.emit(change)}onRightNavClick(change){this.displayDate=change.to,this.onRightNav.emit(change)}startGlobalListeners(){this.globalListenersUnlisteners.push(this.renderer.listen(document,"keydown",(e=>{this.onKeyPress(e)})))}stopGlobalListeners(){this.globalListenersUnlisteners.forEach((ul=>ul())),this.globalListenersUnlisteners=[]}ngOnDestroy(){this.handleInnerElementClickUnlisteners.forEach((ul=>ul())),this.appendToElement&&this.appendToElement.removeChild(this.calendarWrapper)}goToCurrent(){this.currentDateView=dayjsRef(),this.onGoToCurrent.emit()}static{this.ctorParameters=()=>[{type:DatePickerService},{type:core.ElementRef},{type:core.Renderer2},{type:UtilsService},{type:core.ChangeDetectorRef}]}static{this.propDecorators={config:[{type:core.Input}],mode:[{type:core.Input}],placeholder:[{type:core.Input}],disabled:[{type:core.Input}],displayDate:[{type:core.Input}],theme:[{type:core.HostBinding,args:["class"]},{type:core.Input}],minDate:[{type:core.Input}],maxDate:[{type:core.Input}],minTime:[{type:core.Input}],maxTime:[{type:core.Input}],open:[{type:core.Output}],close:[{type:core.Output}],onChange:[{type:core.Output}],onGoToCurrent:[{type:core.Output}],onLeftNav:[{type:core.Output}],onRightNav:[{type:core.Output}],onSelect:[{type:core.Output}],calendarContainer:[{type:core.ViewChild,args:["container"]}],dayCalendarRef:[{type:core.ViewChild,args:["dayCalendar"]}],monthCalendarRef:[{type:core.ViewChild,args:["monthCalendar"]}],dayTimeCalendarRef:[{type:core.ViewChild,args:["daytimeCalendar"]}],timeSelectRef:[{type:core.ViewChild,args:["timeSelect"]}],inputElement:[{type:core.ViewChild,args:["inputElement"]}],onClick:[{type:core.HostListener,args:["click"]}]}}};DatePickerComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"dp-date-picker",template:'<div [ngClass]="{\'dp-open\': areCalendarsShown}" dir="ltr" #trigger>\r\n  <div [attr.data-hidden]="componentConfig.hideInputContainer"\r\n       [hidden]="componentConfig.hideInputContainer"\r\n       class="dp-input-container">\r\n    <input #inputElement\r\n           (blur)="inputBlurred()"\r\n           (focus)="inputFocused()"\r\n           (keydown.enter)="componentConfig.closeOnEnter && hideCalendar()"\r\n           (ngModelChange)="onViewDateChange($event)"\r\n           [disabled]="disabled"\r\n           [ngModel]="inputElementValue"\r\n           [placeholder]="placeholder"\r\n           [readonly]="componentConfig.disableKeypress"\r\n           class="dp-picker-input"\r\n           type="text"/>\r\n  </div>\r\n  <ng-template cdkConnectedOverlay\r\n               [cdkConnectedOverlayPositions]="overlayPosition"\r\n               [cdkConnectedOverlayOrigin]="origin || trigger"\r\n               [cdkConnectedOverlayOpen]="areCalendarsShown"\r\n               [cdkConnectedOverlayHasBackdrop]="false"\r\n               (overlayOutsideClick)="onBodyClick($event)">\r\n    <div #container>\r\n      <div [attr.data-hidden]="!areCalendarsShown"\r\n           [ngSwitch]="mode"\r\n           class="dp-popup {{theme}}">\r\n        <dp-day-calendar #dayCalendar\r\n                         (onGoToCurrent)="goToCurrent()"\r\n                         (onLeftNav)="onLeftNavClick($event)"\r\n                         (onRightNav)="onRightNavClick($event)"\r\n                         (onSelect)="dateSelected($event, \'day\', selectEvent.SELECTION, false)"\r\n                         *ngSwitchCase="\'day\'"\r\n                         [config]="dayCalendarConfig"\r\n                         [displayDate]="displayDate"\r\n                         [ngModel]="_selected"\r\n                         [theme]="theme">\r\n        </dp-day-calendar>\r\n\r\n        <dp-month-calendar #monthCalendar\r\n                           (onGoToCurrent)="goToCurrent()"\r\n                           (onLeftNav)="onLeftNavClick($event)"\r\n                           (onRightNav)="onRightNavClick($event)"\r\n                           (onSelect)="dateSelected($event, \'month\', selectEvent.SELECTION, false)"\r\n                           *ngSwitchCase="\'month\'"\r\n                           [config]="dayCalendarConfig"\r\n                           [displayDate]="displayDate"\r\n                           [ngModel]="_selected"\r\n                           [theme]="theme">\r\n        </dp-month-calendar>\r\n\r\n        <dp-time-select #timeSelect\r\n                        (onChange)="dateSelected($event, \'second\', selectEvent.SELECTION, true)"\r\n                        *ngSwitchCase="\'time\'"\r\n                        [config]="timeSelectConfig"\r\n                        [ngModel]="_selected && _selected[0]"\r\n                        [theme]="theme">\r\n        </dp-time-select>\r\n\r\n        <dp-day-time-calendar #daytimeCalendar\r\n                              (onChange)="dateSelected($event, \'second\', selectEvent.SELECTION, true)"\r\n                              (onGoToCurrent)="goToCurrent()"\r\n                              (onLeftNav)="onLeftNavClick($event)"\r\n                              (onRightNav)="onRightNavClick($event)"\r\n                              *ngSwitchCase="\'daytime\'"\r\n                              [config]="dayTimeCalendarConfig"\r\n                              [displayDate]="displayDate"\r\n                              [ngModel]="_selected && _selected[0]"\r\n                              [theme]="theme">\r\n        </dp-day-time-calendar>\r\n\r\n        <dp-year-calendar #yearCalendar\r\n          (onLeftNav)="onLeftNavClick($event)"\r\n          (onRightNav)="onRightNavClick($event)"\r\n          (onSelect)="dateSelected($event, \'year\', selectEvent.SELECTION, false)"\r\n          [config]="yearCalendarConfig"\r\n          [displayDate]="displayDate"\r\n          [ngModel]="_selected"\r\n          *ngSwitchCase="\'year\'"\r\n          [theme]="theme">\r\n        </dp-year-calendar>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n</div>',encapsulation:core.ViewEncapsulation.None,changeDetection:core.ChangeDetectionStrategy.OnPush,imports:[DayCalendarComponent,MonthCalendarComponent,TimeSelectComponent,DayTimeCalendarComponent,YearCalendarComponent,fesm2022_forms.YN,common.CommonModule,overlay.z_],providers:[DatePickerService,DayTimeCalendarService,DayCalendarService,TimeSelectService,{provide:fesm2022_forms.kq,useExisting:(0,core.forwardRef)((()=>DatePickerComponent)),multi:!0},{provide:fesm2022_forms.cz,useExisting:(0,core.forwardRef)((()=>DatePickerComponent)),multi:!0}],standalone:!0,styles:[date_picker_componentngResource_default()]})],DatePickerComponent);let DatePickerDirective=class DatePickerDirective{constructor(viewContainerRef,elemRef,componentFactoryResolver,formControl,utilsService){this.viewContainerRef=viewContainerRef,this.elemRef=elemRef,this.componentFactoryResolver=componentFactoryResolver,this.formControl=formControl,this.utilsService=utilsService,this.open=new core.EventEmitter,this.close=new core.EventEmitter,this.onChange=new core.EventEmitter,this.onGoToCurrent=new core.EventEmitter,this.onLeftNav=new core.EventEmitter,this.onRightNav=new core.EventEmitter,this.onSelect=new core.EventEmitter,this._mode="day"}get config(){return this._config}set config(config){this._config={...config,hideInputContainer:!0,inputElementContainer:config.inputElementContainer??this.elemRef},this.updateDatepickerConfig(),this.markForCheck()}get theme(){return this._theme}set theme(theme){this._theme=theme,this.datePicker&&(this.datePicker.theme=theme),this.markForCheck()}get mode(){return this._mode}set mode(mode){this._mode=mode,this.datePicker&&(this.datePicker.mode=mode),this.markForCheck()}get minDate(){return this._minDate}set minDate(minDate){this._minDate=minDate,this.datePicker&&(this.datePicker.minDate=minDate,this.datePicker.ngOnInit()),this.markForCheck()}get maxDate(){return this._maxDate}set maxDate(maxDate){this._maxDate=maxDate,this.datePicker&&(this.datePicker.maxDate=maxDate,this.datePicker.ngOnInit()),this.markForCheck()}get minTime(){return this._minTime}set minTime(minTime){this._minTime=minTime,this.datePicker&&(this.datePicker.minTime=minTime,this.datePicker.ngOnInit()),this.markForCheck()}get maxTime(){return this._maxTime}set maxTime(maxTime){this._maxTime=maxTime,this.datePicker&&(this.datePicker.maxTime=maxTime,this.datePicker.ngOnInit()),this.markForCheck()}get displayDate(){return this._displayDate}set displayDate(displayDate){this._displayDate=displayDate,this.updateDatepickerConfig(),this.markForCheck()}ngOnInit(){this.datePicker=this.createDatePicker(),this.api=this.datePicker.api,this.updateDatepickerConfig(),this.attachModelToDatePicker(),this.datePicker.theme=this.theme}createDatePicker(){const factory=this.componentFactoryResolver.resolveComponentFactory(DatePickerComponent);return this.viewContainerRef.createComponent(factory).instance}attachModelToDatePicker(){if(!this.formControl)return;this.datePicker.onViewDateChange(this.formControl.value),this.formControl.valueChanges&&this.formControl.valueChanges.subscribe((value=>{if(value!==this.datePicker.inputElementValue){const strVal=this.utilsService.convertToString(value,this.datePicker.componentConfig.format??"");this.datePicker.onViewDateChange(strVal)}}));let setup=!0;this.datePicker.registerOnChange(((value,changedByInput)=>{if(value){setup&&Array.isArray(value)&&!value.length||changedByInput||this.formControl.control&&this.formControl.control.setValue(this.datePicker.inputElementValue)}const errors=this.datePicker.validateFn(value);if(setup?setup=!1:this.formControl.control&&this.formControl.control.markAsDirty({onlySelf:!0}),errors){if(errors.hasOwnProperty("format")&&errors.format){const{given}=errors.format;this.datePicker.inputElementValue=given,!changedByInput&&this.formControl.control&&this.formControl.control.setValue(given)}this.formControl.control&&this.formControl.control.setErrors(errors)}}))}onClick(){this.datePicker&&"function"==typeof this.datePicker.onClick&&this.datePicker.onClick()}onFocus(){this.datePicker.inputFocused()}onEnter(){this.datePicker.componentConfig.closeOnEnter&&this.datePicker.hideCalendar()}markForCheck(){this.datePicker&&this.datePicker.cd.markForCheck()}updateDatepickerConfig(){this.datePicker&&(this.datePicker.minDate=this.minDate,this.datePicker.maxDate=this.maxDate,this.datePicker.minTime=this.minTime,this.datePicker.maxTime=this.maxTime,this.datePicker.mode=this.mode||"day",this.datePicker.displayDate=this.displayDate,this.datePicker.config=this.config,this.datePicker.open=this.open,this.datePicker.close=this.close,this.datePicker.onChange=this.onChange,this.datePicker.onGoToCurrent=this.onGoToCurrent,this.datePicker.onLeftNav=this.onLeftNav,this.datePicker.onRightNav=this.onRightNav,this.datePicker.onSelect=this.onSelect,this.datePicker.init(),this.datePicker.componentConfig.disableKeypress?this.elemRef.nativeElement.setAttribute("readonly",!0):this.elemRef.nativeElement.removeAttribute("readonly"))}static{this.ctorParameters=()=>[{type:core.ViewContainerRef},{type:core.ElementRef},{type:core.ComponentFactoryResolver},{type:fesm2022_forms.vO,decorators:[{type:core.Optional}]},{type:UtilsService}]}static{this.propDecorators={open:[{type:core.Output}],close:[{type:core.Output}],onChange:[{type:core.Output}],onGoToCurrent:[{type:core.Output}],onLeftNav:[{type:core.Output}],onRightNav:[{type:core.Output}],onSelect:[{type:core.Output}],config:[{type:core.Input,args:["dpDayPicker"]}],theme:[{type:core.Input}],mode:[{type:core.Input}],minDate:[{type:core.Input}],maxDate:[{type:core.Input}],minTime:[{type:core.Input}],maxTime:[{type:core.Input}],displayDate:[{type:core.Input}],onClick:[{type:core.HostListener,args:["click"]}],onFocus:[{type:core.HostListener,args:["focus"]}],onEnter:[{type:core.HostListener,args:["keydown.enter"]}]}}};DatePickerDirective=(0,tslib_es6.Cg)([(0,core.Directive)({exportAs:"dpDayPicker",selector:"[dpDayPicker]",standalone:!0})],DatePickerDirective);const ng2_date_picker_copy_stories={title:"Components/DatePickerCopy",component:DatePickerComponent,decorators:[(0,dist.moduleMetadata)({imports:[fesm2022_forms.YN,DatePickerComponent,DatePickerDirective,YearCalendarComponent]})]},Default=()=>({props:{selectedDayTime:null,displayDate:null,config:{firstDayOfWeek:"su",monthFormat:"DD-MM-YYYY",disableKeypress:!1,closeOnSelect:void 0,closeOnSelectDelay:100,openOnFocus:!0,openOnClick:!0,onOpenDelay:0,closeOnEnter:!0,weekDayFormat:"ddd",showNearMonthDays:!0,showWeekNumbers:!1,enableMonthSelector:!0,yearFormat:"YYYY",showGoToCurrent:!0,dayBtnFormat:"DD",monthBtnFormat:"MMM",hours12Format:"hh",hours24Format:"HH",meridiemFormat:"A",minutesFormat:"mm",minutesInterval:1,secondsFormat:"ss",secondsInterval:1,showSeconds:!1,showTwentyFourHours:!1,timeSeparator:":",multipleYearsNavigateBy:10,showMultipleYearsNavigation:!1,hideInputContainer:!1,returnedValueType:"string",unSelectOnClick:!0,hideOnOutsideClick:!0,numOfMonthRows:3,format:"DD-MM-YYYY"},updateDisplayDate:function(date){date&&"Invalid date"!==date&&date.length>=10&&(this.displayDate=date,console.log("Display date updated:",this.displayDate))}},template:'\n        <input\n            #dateDirective\n            [dpDayPicker]="config"\n            [displayDate]="displayDate"\n            theme="ibz-datepicker"\n            id="picker"\n            (ngModelChange)="updateDisplayDate($event)"\n            [(ngModel)]="selectedDayTime"\n        />\n        <p>Date sélectionnée : {{ selectedDayTime }}</p>\n    '}),YearCalendar=()=>({props:{config:{yearFormat:"YYYY",yearBtnFormat:"YYYY",numOfYearsPerPage:24,numOfYearRows:6,format:"YYYY",showGoToCurrent:!0,allowMultiSelect:!1,unSelectOnClick:!0,isNavHeaderBtnClickable:!0},displayDate:void 0,minDate:void 0,maxDate:void 0,theme:"ibz-datepicker",onSelect:event=>{console.log("Year selected:",event)}},template:'\n        <dp-year-calendar\n            [config]="config"\n            [displayDate]="displayDate"\n            [minDate]="minDate"\n            [maxDate]="maxDate"\n            [theme]="theme"\n            (onSelect)="onSelect($event)"\n        ></dp-year-calendar>\n    '}),__namedExportsOrder=["Default","YearCalendar"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"() => ({\n  props: {\n    selectedDayTime: null,\n    displayDate: null,\n    config: {\n      firstDayOfWeek: 'su',\n      monthFormat: 'DD-MM-YYYY',\n      disableKeypress: false,\n      closeOnSelect: undefined,\n      closeOnSelectDelay: 100,\n      openOnFocus: true,\n      openOnClick: true,\n      onOpenDelay: 0,\n      closeOnEnter: true,\n      weekDayFormat: 'ddd',\n      showNearMonthDays: true,\n      showWeekNumbers: false,\n      enableMonthSelector: true,\n      yearFormat: 'YYYY',\n      showGoToCurrent: true,\n      dayBtnFormat: 'DD',\n      monthBtnFormat: 'MMM',\n      hours12Format: 'hh',\n      hours24Format: 'HH',\n      meridiemFormat: 'A',\n      minutesFormat: 'mm',\n      minutesInterval: 1,\n      secondsFormat: 'ss',\n      secondsInterval: 1,\n      showSeconds: false,\n      showTwentyFourHours: false,\n      timeSeparator: ':',\n      multipleYearsNavigateBy: 10,\n      showMultipleYearsNavigation: false,\n      hideInputContainer: false,\n      returnedValueType: 'string',\n      // ECalendarValue.String\n      unSelectOnClick: true,\n      hideOnOutsideClick: true,\n      numOfMonthRows: 3,\n      format: 'DD-MM-YYYY'\n    },\n    updateDisplayDate: function (date: any) {\n      // Ne met à jour que si la date est valide\n      if (date && date !== 'Invalid date' && date.length >= 10) {\n        this.displayDate = date;\n        console.log('Display date updated:', this.displayDate);\n      }\n    }\n  },\n  template: `\n        <input\n            #dateDirective\n            [dpDayPicker]=\"config\"\n            [displayDate]=\"displayDate\"\n            theme=\"ibz-datepicker\"\n            id=\"picker\"\n            (ngModelChange)=\"updateDisplayDate($event)\"\n            [(ngModel)]=\"selectedDayTime\"\n        />\n        <p>Date sélectionnée : {{ selectedDayTime }}</p>\n    `\n})",...Default.parameters?.docs?.source}}},YearCalendar.parameters={...YearCalendar.parameters,docs:{...YearCalendar.parameters?.docs,source:{originalSource:'() => ({\n  props: {\n    config: {\n      yearFormat: \'YYYY\',\n      yearBtnFormat: \'YYYY\',\n      numOfYearsPerPage: 24,\n      numOfYearRows: 6,\n      format: \'YYYY\',\n      showGoToCurrent: true,\n      allowMultiSelect: false,\n      unSelectOnClick: true,\n      isNavHeaderBtnClickable: true\n    },\n    displayDate: undefined,\n    minDate: undefined,\n    maxDate: undefined,\n    theme: \'ibz-datepicker\',\n    onSelect: (event: any) => {\n      console.log(\'Year selected:\', event);\n    }\n  },\n  template: `\n        <dp-year-calendar\n            [config]="config"\n            [displayDate]="displayDate"\n            [minDate]="minDate"\n            [maxDate]="maxDate"\n            [theme]="theme"\n            (onSelect)="onSelect($event)"\n        ></dp-year-calendar>\n    `\n})',...YearCalendar.parameters?.docs?.source}}}}}]);